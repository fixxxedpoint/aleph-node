# This file was @generated by cargo2nix 0.10.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "aleph-node/default"
    "primitives/default"
    "aleph-runtime/default"
    "pallet-aleph/default"
    "pallet-elections/default"
    "finality-aleph/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
}:
let
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
in let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.10.0";
  workspace = {
    aleph-node = rustPackages.unknown.aleph-node."0.4.0";
    primitives = rustPackages.unknown.primitives."0.3.0";
    aleph-runtime = rustPackages.unknown.aleph-runtime."0.4.0";
    pallet-aleph = rustPackages.unknown.pallet-aleph."0.2.0";
    pallet-elections = rustPackages.unknown.pallet-elections."0.1.0";
    finality-aleph = rustPackages.unknown.finality-aleph."0.3.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" = overridableMkRustCrate (profileName: rec {
    name = "Inflector";
    version = "0.11.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "heavyweight" ]
      [ "lazy_static" ]
      [ "regex" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e61f2b7f93d2c7d2b08263acaa4a363b3e276806c68af6134c44f523bf1aacd"; };
    dependencies = {
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.17.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9ecd88a8c8378ca913a680cd98f0f13ac67383d35993f86c90a70e3f137816b"; };
    dependencies = {
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.26.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aead."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "aead";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b613b8e1e3cf911a086f53f03bf286f52fd7a7258e4fa606f0ef220d39d8877"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes."0.7.5" = overridableMkRustCrate (profileName: rec {
    name = "aes";
    version = "0.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e8b47f52ea9bae42228d07ec09eb676433d7c4ed1ebdf0f1d1c29ed446f1ab8"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      cipher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.1" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "aes-gcm";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df5f85a83a7d8b0442b6aa7b504b8212c1733da07b98aae43d4bc21b2cb3cdf6"; };
    features = builtins.concatLists [
      [ "aes" ]
      [ "alloc" ]
      [ "default" ]
    ];
    dependencies = {
      aead = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.4.3" { inherit profileName; };
      aes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.7.5" { inherit profileName; };
      cipher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; };
      ctr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ctr."0.8.0" { inherit profileName; };
      ghash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ghash."0.4.4" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.7.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.5" { inherit profileName; };
      ${ if !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "0.7.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "538d26ed9842009b131db7afed8166c54666b869f7b3b0bd16070957f04ead39"; };
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      bit_vec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; };
      derivative = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
    };
  });
  
  "unknown".aleph-node."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "aleph-node";
    version = "0.4.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/bin/node");
    features = builtins.concatLists [
      [ "default" ]
      [ "short_session" ]
    ];
    dependencies = {
      aleph_runtime = rustPackages."unknown".aleph-runtime."0.4.0" { inherit profileName; };
      finality_aleph = rustPackages."unknown".finality-aleph."0.3.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      hex_literal = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".hex-literal."0.3.4" { profileName = "__noProfile"; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      libp2p = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.39.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pallet_staking = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-staking."4.0.0-dev" { inherit profileName; };
      pallet_transaction_payment_rpc = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-transaction-payment-rpc."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      aleph_primitives = rustPackages."unknown".primitives."0.3.0" { inherit profileName; };
      sc_basic_authorship = rustPackages."git+https://github.com/paritytech/substrate.git".sc-basic-authorship."0.10.0-dev" { inherit profileName; };
      sc_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; };
      sc_cli = rustPackages."git+https://github.com/paritytech/substrate.git".sc-cli."0.10.0-dev" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; };
      sc_consensus_aura = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus-aura."0.10.0-dev" { inherit profileName; };
      sc_executor = rustPackages."git+https://github.com/paritytech/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; };
      sc_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sc-keystore."4.0.0-dev" { inherit profileName; };
      sc_network = rustPackages."git+https://github.com/paritytech/substrate.git".sc-network."0.10.0-dev" { inherit profileName; };
      sc_rpc = rustPackages."git+https://github.com/paritytech/substrate.git".sc-rpc."4.0.0-dev" { inherit profileName; };
      sc_rpc_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-rpc-api."0.10.0-dev" { inherit profileName; };
      sc_service = rustPackages."git+https://github.com/paritytech/substrate.git".sc-service."0.10.0-dev" { inherit profileName; };
      sc_telemetry = rustPackages."git+https://github.com/paritytech/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; };
      sc_transaction_pool = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool."4.0.0-dev" { inherit profileName; };
      sc_transaction_pool_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_consensus_aura = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_timestamp = rustPackages."git+https://github.com/paritytech/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; };
      sp_transaction_pool = rustPackages."git+https://github.com/paritytech/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; };
      structopt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".structopt."0.3.26" { inherit profileName; };
      substrate_frame_rpc_system = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-frame-rpc-system."4.0.0-dev" { inherit profileName; };
    };
    buildDependencies = {
      substrate_build_script_utils = buildRustPackages."git+https://github.com/paritytech/substrate.git".substrate-build-script-utils."3.0.0" { profileName = "__noProfile"; };
    };
  });
  
  "unknown".aleph-runtime."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "aleph-runtime";
    version = "0.4.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/bin/runtime");
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "short_session" ]
      [ "std" ]
    ];
    dependencies = {
      frame_executive = rustPackages."git+https://github.com/paritytech/substrate.git".frame-executive."4.0.0-dev" { inherit profileName; };
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      frame_system_rpc_runtime_api = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system-rpc-runtime-api."4.0.0-dev" { inherit profileName; };
      pallet_aleph = rustPackages."unknown".pallet-aleph."0.2.0" { inherit profileName; };
      pallet_aura = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-aura."4.0.0-dev" { inherit profileName; };
      pallet_authorship = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-authorship."4.0.0-dev" { inherit profileName; };
      pallet_balances = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-balances."4.0.0-dev" { inherit profileName; };
      pallet_elections = rustPackages."unknown".pallet-elections."0.1.0" { inherit profileName; };
      pallet_multisig = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-multisig."4.0.0-dev" { inherit profileName; };
      pallet_randomness_collective_flip = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-randomness-collective-flip."4.0.0-dev" { inherit profileName; };
      pallet_scheduler = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-scheduler."4.0.0-dev" { inherit profileName; };
      pallet_session = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; };
      pallet_staking = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-staking."4.0.0-dev" { inherit profileName; };
      pallet_sudo = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-sudo."4.0.0-dev" { inherit profileName; };
      pallet_timestamp = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; };
      pallet_transaction_payment = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-transaction-payment."4.0.0-dev" { inherit profileName; };
      pallet_transaction_payment_rpc_runtime_api = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-transaction-payment-rpc-runtime-api."4.0.0-dev" { inherit profileName; };
      pallet_treasury = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-treasury."4.0.0-dev" { inherit profileName; };
      pallet_utility = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-utility."4.0.0-dev" { inherit profileName; };
      pallet_vesting = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-vesting."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      primitives = rustPackages."unknown".primitives."0.3.0" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; };
      sp_consensus_aura = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_offchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-offchain."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_session = rustPackages."git+https://github.com/paritytech/substrate.git".sp-session."4.0.0-dev" { inherit profileName; };
      sp_staking = rustPackages."git+https://github.com/paritytech/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_transaction_pool = rustPackages."git+https://github.com/paritytech/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; };
      sp_version = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
    };
    buildDependencies = {
      substrate_wasm_builder = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".substrate-wasm-builder."4.0.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "ansi_term";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" = overridableMkRustCrate (profileName: rec {
    name = "anyhow";
    version = "1.0.55";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "159bb86af3a200e19a068f4224eae4c8bb2d0fa054c7e5d1cacd5cef95e684cd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "arrayref";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.4.12" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.4.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cd9fd44efafa8690358b7408d253adf110036b88f55672a933f01d616ad9b1b9"; };
    dependencies = {
      nodrop = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nodrop."0.1.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b"; };
    features = builtins.concatLists [
      [ "array-sizes-33-128" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1_der."0.7.5" = overridableMkRustCrate (profileName: rec {
    name = "asn1_der";
    version = "0.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e22d1f4b888c298a027c99dc9048015fac177587de20fc30232a057dfbe24a21"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "native_types" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-channel."1.6.1" = overridableMkRustCrate (profileName: rec {
    name = "async-channel";
    version = "1.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2114d64672151c0c5eaa5e131ec84a74f06e1e559830dabba01ca30605d66319"; };
    dependencies = {
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" { inherit profileName; };
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.2" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-executor."1.4.1" = overridableMkRustCrate (profileName: rec {
    name = "async-executor";
    version = "1.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "871f9bb5e0a22eeb7e8cf16641feb87c9dc67032ccf8ff49e772eb9941d3a965"; };
    dependencies = {
      async_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-task."4.1.0" { inherit profileName; };
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" { inherit profileName; };
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.7.0" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-global-executor."2.0.2" = overridableMkRustCrate (profileName: rec {
    name = "async-global-executor";
    version = "2.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9586ec52317f36de58453159d48351bc244bc24ced3effc1fce22f3d48664af6"; };
    features = builtins.concatLists [
      [ "async-io" ]
      [ "default" ]
    ];
    dependencies = {
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.6.1" { inherit profileName; };
      async_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-executor."1.4.1" { inherit profileName; };
      async_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.6.0" { inherit profileName; };
      async_mutex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-mutex."1.4.0" { inherit profileName; };
      blocking = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blocking."1.1.0" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-io."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "async-io";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a811e6a479f2439f0c04038796b5cfb3d2ad56c230e0f2d3f7b04d68cfee607b"; };
    dependencies = {
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      parking = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.0.0" { inherit profileName; };
      polling = rustPackages."registry+https://github.com/rust-lang/crates.io-index".polling."2.2.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.4" { inherit profileName; };
      waker_fn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-lock."2.5.0" = overridableMkRustCrate (profileName: rec {
    name = "async-lock";
    version = "2.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e97a171d191782fba31bb902b14ad94e24a68145032b7eedf871ab0bc0d077b6"; };
    dependencies = {
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-mutex."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "async-mutex";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "479db852db25d9dbf6204e6cb6253698f175c15726470f78af0d918e99d6156e"; };
    dependencies = {
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-process."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "async-process";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "83137067e3a2a6a06d67168e49e68a0957d215410473a740cea95a2425c0b7c6"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "async_io" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.6.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "blocking" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blocking."1.1.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.2" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "signal_hook" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook."0.3.13" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-std."1.10.0" = overridableMkRustCrate (profileName: rec {
    name = "async-std";
    version = "1.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8056f1455169ab86dd47b47391e4ab0cbd25410a70e9fe675544f49bafaf952"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-channel" ]
      [ "async-global-executor" ]
      [ "async-io" ]
      [ "async-lock" ]
      [ "async-process" ]
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "futures-channel" ]
      [ "futures-core" ]
      [ "futures-io" ]
      [ "futures-lite" ]
      [ "gloo-timers" ]
      [ "kv-log-macro" ]
      [ "log" ]
      [ "memchr" ]
      [ "num_cpus" ]
      [ "once_cell" ]
      [ "pin-project-lite" ]
      [ "pin-utils" ]
      [ "slab" ]
      [ "std" ]
      [ "unstable" ]
      [ "wasm-bindgen-futures" ]
    ];
    dependencies = {
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.6.1" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "unknown") then "async_global_executor" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-global-executor."2.0.2" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "unknown") then "async_io" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.6.0" { inherit profileName; };
      async_lock = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."2.5.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "unknown") then "async_process" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-process."1.3.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.7" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "futures_channel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "unknown") then "futures_lite" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "gloo_timers" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-timers."0.2.3" { inherit profileName; };
      kv_log_macro = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kv-log-macro."1.0.7" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      pin_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-std-resolver."0.20.4" = overridableMkRustCrate (profileName: rec {
    name = "async-std-resolver";
    version = "0.20.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dbf3e776afdf3a2477ef4854b85ba0dff3bd85792f685fb3c68948b4d304e4f0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "system-config" ]
    ];
    dependencies = {
      async_std = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-std."1.10.0" { inherit profileName; };
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      pin_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; };
      trust_dns_resolver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-resolver."0.20.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-task."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "async-task";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "677d306121baf53310a3fd342d88dc0824f6bbeace68347593658525565abee8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" = overridableMkRustCrate (profileName: rec {
    name = "async-trait";
    version = "0.1.52";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "061a7acccaa286c011ddc30970520b98fa40e00c9d644633fb26b5fc63a265e3"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "asynchronous-codec";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb4401f0a3622dad2e0763fa79e0eb328bc70fb7dccfdd645341f00d671247d6"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "asynchronous-codec";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0de5164e5edbf51c45fb8c2d9664ae1c095cce1b265ecf7569093c0d66ef690"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atomic."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "atomic";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b88d82667eca772c4aa12f0f1348b3ae643424c8876448f3f7bd5787032e234c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "fallback" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "atomic-waker";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "065374052e7df7ee4047b1160cca5e1467a12351a40b3da123c870ba0b8eda2a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "atty";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.64" = overridableMkRustCrate (profileName: rec {
    name = "backtrace";
    version = "0.3.64";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e121dee8023ce33ab248d9ce1493df03c3b38a659b240096fcbd7048ff9c31f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      addr2line = rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.17.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.4.4" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.27.1" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "base-x";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4521f3e3d031370679b3b140beb36dfe4801b09ac77e30c61941f97df3ef28b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base58."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "base58";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6107fe1be6682a68940da878d9e9f5e90ca5745b3dec9fd1bb393c8777d4f581"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3441f0f7b02788e948e47f457ca01f1d7e6d92c693bc132c22b087d3141c03ff"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "alloc")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bimap."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "bimap";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc0455254eb5c6964c4545d8bac815e1a1be4f3afe0ae695ea539c12d728d44b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" = overridableMkRustCrate (profileName: rec {
    name = "bincode";
    version = "1.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bindgen."0.59.2" = overridableMkRustCrate (profileName: rec {
    name = "bindgen";
    version = "0.59.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2bd2a9a458e8f4304c52c43ebb0cfbd520289f8379a52e329a38afda99bf8eb8"; };
    features = builtins.concatLists [
      [ "runtime" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      cexpr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" { inherit profileName; };
      clang_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.3.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      lazycell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; };
      peeking_take_while = rustPackages."registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      shlex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-vec";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitvec."0.20.4" = overridableMkRustCrate (profileName: rec {
    name = "bitvec";
    version = "0.20.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7774144344a4faa177370406a7ff5f1da24303817368584c6206c8303eb07848"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      funty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".funty."1.1.0" { inherit profileName; };
      radium = rustPackages."registry+https://github.com/rust-lang/crates.io-index".radium."0.6.2" { inherit profileName; };
      tap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" { inherit profileName; };
      wyz = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wyz."0.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake2."0.9.2" = overridableMkRustCrate (profileName: rec {
    name = "blake2";
    version = "0.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0a4e37d16930f5459780f5621038b6382b9bb37c19016f39fb6b5808d831f174"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crypto_mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.8.0" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake2-rfc."0.2.18" = overridableMkRustCrate (profileName: rec {
    name = "blake2-rfc";
    version = "0.2.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d6d530bdd2d52966a6d03b7a964add7ae1a288d25214066fd4b600f0f796400"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.4.12" { inherit profileName; };
      constant_time_eq = rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake2b_simd."0.5.11" = overridableMkRustCrate (profileName: rec {
    name = "blake2b_simd";
    version = "0.5.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "afa748e348ad3be8263be728124b24a24f268266f6f5d58af9d75f6a40b5c587"; };
    dependencies = {
      arrayref = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.6" { inherit profileName; };
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      constant_time_eq = rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake2s_simd."0.5.11" = overridableMkRustCrate (profileName: rec {
    name = "blake2s_simd";
    version = "0.5.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e461a7034e85b211a4acb57ee2e6730b32912b06c08cc242243c39fc21ae6a2"; };
    dependencies = {
      arrayref = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.6" { inherit profileName; };
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      constant_time_eq = rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake3."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "blake3";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b64485778c4f16a6a5a9d335e80d449ac6c70cdd6a06d2af18a6f6f775a125b3"; };
    dependencies = {
      arrayref = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.6" { inherit profileName; };
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      constant_time_eq = rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.1.5" { inherit profileName; };
      crypto_mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.8.0" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b"; };
    dependencies = {
      block_padding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-padding."0.1.5" { inherit profileName; };
      byte_tools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "block-padding")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "block_padding" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-padding."0.2.1" { inherit profileName; };
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-padding."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "block-padding";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5"; };
    dependencies = {
      byte_tools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-padding."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "block-padding";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d696c370c750c948ada61c69a0ee2cbbb9c50b1019ddb86d9317157a99c2cae"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blocking."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "blocking";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "046e47d4b2d391b1f6f8b407b1deb8dee56c1852ccd868becf2710f601b5f427"; };
    dependencies = {
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.6.1" { inherit profileName; };
      async_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-task."4.1.0" { inherit profileName; };
      atomic_waker = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.0.0" { inherit profileName; };
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.7.0" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bs58."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bs58";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "771fe0050b883fcc3ea2359b1a96bcfbc090b7116eae7c3c512c7a083fdf23d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bstr."0.2.17" = overridableMkRustCrate (profileName: rec {
    name = "bstr";
    version = "0.2.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba3569f383e8f1598449f1a423e72e99569137b47740b1da11ef19af3d5c3223"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".build-helper."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "build-helper";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bdce191bf3fa4995ce948c8c83b4640a1745457a149e73c6db75b4ffe36aad5f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4a45a46ab1f2412e53d3a0ade76ffad2025804294569aae387231a0cd6e0899"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byte-slice-cast."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "byte-slice-cast";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d30c751592b77c499e7bce34d99d67c2c11bdc0574e9a488ddade14150a4698"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "byte-tools";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "i128" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."0.4.12" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "0.4.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c"; };
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      iovec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".iovec."0.1.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "0.5.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e4cec68f03f32e44924783795810fa50a7035d8c8ebe78580ad7e6c703fba38"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cache-padded."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "cache-padded";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1db59621ec70f09c5e9b597b220c7a2b43611f4710dc03ceb8748637775692c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".camino."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "camino";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f3132262930b0522068049f5870a856ab8affc80c70d08b6ecb785771a6fc23"; };
    features = builtins.concatLists [
      [ "serde" ]
      [ "serde1" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cargo-platform."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "cargo-platform";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cbdb825da8a5df079a43676dbe042702f1707b1109f713a01420fbb4cc71fa27"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "cargo_metadata";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7714a157da7991e23d90686b9524b9e12e0407a108647f52e9328f4b3d51ac7f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      cargo_platform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo-platform."0.1.2" { inherit profileName; };
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.11.0" { inherit profileName; };
      semver_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.10.2" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.14.2" = overridableMkRustCrate (profileName: rec {
    name = "cargo_metadata";
    version = "0.14.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4acbb09d9ee8e23699b9634375c72795d095bf268439da88562cf9b501f181fa"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      camino = rustPackages."registry+https://github.com/rust-lang/crates.io-index".camino."1.0.7" { inherit profileName; };
      cargo_platform = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo-platform."0.1.2" { inherit profileName; };
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.6" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.73";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11"; };
    features = builtins.concatLists [
      [ "jobserver" ]
      [ "parallel" ]
    ];
    dependencies = {
      jobserver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "cexpr";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766"; };
    dependencies = {
      nom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chacha20."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "chacha20";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fee7ad89dc1128635074c268ee661f90c3f7e83d9fd12910608c36b47d6c3412"; };
    features = builtins.concatLists [
      [ "cipher" ]
      [ "default" ]
      [ "xchacha" ]
      [ "zeroize" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      cipher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.1.5" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chacha20poly1305."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "chacha20poly1305";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1580317203210c517b6d44794abfbe600698276db18127e37ad3e69bf5e848e5"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "chacha20" ]
      [ "default" ]
      [ "xchacha20poly1305" ]
    ];
    dependencies = {
      aead = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.4.3" { inherit profileName; };
      chacha20 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chacha20."0.7.1" { inherit profileName; };
      cipher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; };
      poly1305 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".poly1305."0.7.2" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" = overridableMkRustCrate (profileName: rec {
    name = "chrono";
    version = "0.4.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73"; };
    features = builtins.concatLists [
      [ "clock" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "libc" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "oldtime")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "time")
      [ "winapi" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "time" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.1.44" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cid."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "cid";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ff0e3bc0b6446b3f9663c1a6aba6ef06c5aeaa1bc92bd18077be337198ab9768"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "multibase" ]
      [ "std" ]
    ];
    dependencies = {
      multibase = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multibase."0.8.0" { inherit profileName; };
      multihash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.13.2" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "cipher";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ee52072ec15386f770805afd189a01c8841be8696bed250fa2f13c4c0d6dfb7"; };
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.3.1" = overridableMkRustCrate (profileName: rec {
    name = "clang-sys";
    version = "1.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4cc00842eed744b858222c4c9faf7243aafc6d33f92f96935263ef4d8a41ce21"; };
    features = builtins.concatLists [
      [ "clang_3_5" ]
      [ "clang_3_6" ]
      [ "clang_3_7" ]
      [ "clang_3_8" ]
      [ "clang_3_9" ]
      [ "clang_4_0" ]
      [ "clang_5_0" ]
      [ "clang_6_0" ]
      [ "libloading" ]
      [ "runtime" ]
    ];
    dependencies = {
      glob = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" { inherit profileName; };
    };
    buildDependencies = {
      glob = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" = overridableMkRustCrate (profileName: rec {
    name = "clap";
    version = "2.34.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c"; };
    features = builtins.concatLists [
      [ "ansi_term" ]
      [ "atty" ]
      [ "color" ]
      [ "default" ]
      [ "strsim" ]
      [ "suggestions" ]
      [ "vec_map" ]
    ];
    dependencies = {
      ${ if !hostPlatform.isWindows then "ansi_term" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      strsim = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.8.0" { inherit profileName; };
      textwrap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".textwrap."0.11.0" { inherit profileName; };
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.9" { inherit profileName; };
      vec_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" = overridableMkRustCrate (profileName: rec {
    name = "concurrent-queue";
    version = "1.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "30ed07550be01594c6026cff2a1d7fe9c8f683caa798e12b68694ac9e88286a3"; };
    dependencies = {
      cache_padded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cache-padded."1.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "constant_time_eq";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".convert_case."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "convert_case";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpp_demangle."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "cpp_demangle";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eeaa953eaad386a53111e47172c2fedba671e5684c8dd601a5f474f4f118710f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "cpufeatures";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "66c99696f6c9dd7f35d486b9d04d7e6e202aa3e8c40d553f2fdf5e7e0c6a71ef"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux" || hostPlatform.config == "aarch64-apple-darwin" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "cpufeatures";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95059428f66df56b63431fdb4e1947ed2190586af5c5a8a8b71122bdf5a7f469"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux" || hostPlatform.config == "aarch64-apple-darwin" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-bforest."0.78.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-bforest";
    version = "0.78.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc0cb7df82c8cf8f2e6a8dd394a0932a71369c160cc9b027dca414fced242513"; };
    dependencies = {
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.78.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.78.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-codegen";
    version = "0.78.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe4463c15fa42eee909e61e5eac4866b7c6d22d0d8c621e57a0c5380753bfa8c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "gimli" ]
      [ "std" ]
      [ "unwind" ]
    ];
    dependencies = {
      cranelift_bforest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-bforest."0.78.0" { inherit profileName; };
      cranelift_codegen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-shared."0.78.0" { inherit profileName; };
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.78.0" { inherit profileName; };
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regalloc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regalloc."0.0.32" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
    };
    buildDependencies = {
      cranelift_codegen_meta = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-meta."0.78.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-meta."0.78.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-codegen-meta";
    version = "0.78.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "793f6a94a053a55404ea16e1700202a88101672b8cd6b4df63e13cde950852bf"; };
    dependencies = {
      cranelift_codegen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-shared."0.78.0" { inherit profileName; };
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.78.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-shared."0.78.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-codegen-shared";
    version = "0.78.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44aa1846df275bce5eb30379d65964c7afc63c05a117076e62a119c25fe174be"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.78.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-entity";
    version = "0.78.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a3a45d8d6318bf8fc518154d9298eab2a8154ec068a8885ff113f6db8d69bb3a"; };
    features = builtins.concatLists [
      [ "enable-serde" ]
      [ "serde" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-frontend."0.78.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-frontend";
    version = "0.78.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e07339bd461766deb7605169de039e01954768ff730fa1254e149001884a8525"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cranelift_codegen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.78.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-native."0.78.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-native";
    version = "0.78.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03e2fca76ff57e0532936a71e3fc267eae6a19a86656716479c66e7f912e3d7b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cranelift_codegen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.78.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "s390x" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-wasm."0.78.0" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-wasm";
    version = "0.78.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f46fec547a1f8a32c54ea61c28be4f4ad234ad95342b718a9a9adcaadb0c778"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cranelift_codegen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.78.0" { inherit profileName; };
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.78.0" { inherit profileName; };
      cranelift_frontend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-frontend."0.78.0" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      wasmparser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.81.0" { inherit profileName; };
      wasmtime_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-types."0.31.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e54ea8bc3fb1ee042f5aace6e3c6e025d3874866da222930f70ce62aceba0bfa"; };
    features = builtins.concatLists [
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-deque";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6455c0ca19f0d2fbf751b908d5c55c1f5cbc65e03c4225427254b46890bdde1e"; };
    features = builtins.concatLists [
      [ "crossbeam-epoch" ]
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_epoch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.7" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.7" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-epoch";
    version = "0.9.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c00d6d2ea26e8b151d99093005cb442fb9a37aeaca582a03ec70946f49ab5ed9"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.7" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      memoffset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.7" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5e5bed1f1c269533fa816a0a5492b3545209a205ca1a54842be180eb63a16a6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "crunchy";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "limit_128" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "limit_256")
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "crypto-mac";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b584a330336237c1eecd3e94266efb216c56ed91225d634cb2991c5f3fd1aeab"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "crypto-mac";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1d1a86f49236c215f271d40892d5fc950490551400b02ef360692c29815c714"; };
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ct-logs."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "ct-logs";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1a816186fa68d9e426e3cb4ae4dff1fcd8e4a2c34b781bf7a822574a0d0aac8"; };
    dependencies = {
      sct = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sct."0.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ctor."0.1.21" = overridableMkRustCrate (profileName: rec {
    name = "ctor";
    version = "0.1.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ccc0a48a9b826acdf4028595adc9db92caea352f7af011a3034acd172a52a0aa"; };
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ctr."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "ctr";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "049bb91fb4aaf0e3c7efa6cd5ef877dbbbd15b39dad06d9948de4ec8a75761ea"; };
    dependencies = {
      cipher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cuckoofilter."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "cuckoofilter";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b810a8449931679f64cd7eef1bbd0fa315801b6d5d9cdc1ace2804d6529eee18"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "curve25519-dalek";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4a9b85542f99a2dfa2a1b8e192662741c9859a846b296bef1c92ef9b58b5a216"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" = overridableMkRustCrate (profileName: rec {
    name = "curve25519-dalek";
    version = "3.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b9fdf9972b2bd6af2d913799d9ebc165ea4d2e65878e329d9c6b372c4491b61"; };
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.3.2" = overridableMkRustCrate (profileName: rec {
    name = "data-encoding";
    version = "2.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3ee2393c4a91429dffb4bedf19f4d6abf27d8a732c8ce4980305d782e5426d57"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".data-encoding-macro."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "data-encoding-macro";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "86927b7cd2fe88fa698b87404b287ab98d1a0063a34071d92e575b72d3029aca"; };
    dependencies = {
      data_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.3.2" { inherit profileName; };
      data_encoding_macro_internal = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding-macro-internal."0.1.10" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".data-encoding-macro-internal."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "data-encoding-macro-internal";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a5bbed42daaa95e780b60a50546aa345b8413a1e46f9a40a12907d3598f038db"; };
    dependencies = {
      data_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.3.2" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "derivative";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" = overridableMkRustCrate (profileName: rec {
    name = "derive_more";
    version = "0.99.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321"; };
    features = builtins.concatLists [
      [ "add" ]
      [ "add_assign" ]
      [ "as_mut" ]
      [ "as_ref" ]
      [ "constructor" ]
      [ "convert_case" ]
      [ "default" ]
      [ "deref" ]
      [ "deref_mut" ]
      [ "display" ]
      [ "error" ]
      [ "from" ]
      [ "from_str" ]
      [ "index" ]
      [ "index_mut" ]
      [ "into" ]
      [ "into_iterator" ]
      [ "is_variant" ]
      [ "iterator" ]
      [ "mul" ]
      [ "mul_assign" ]
      [ "not" ]
      [ "rustc_version" ]
      [ "sum" ]
      [ "try_into" ]
      [ "unwrap" ]
    ];
    dependencies = {
      convert_case = rustPackages."registry+https://github.com/rust-lang/crates.io-index".convert_case."0.4.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
    buildDependencies = {
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".directories."4.0.1" = overridableMkRustCrate (profileName: rec {
    name = "directories";
    version = "4.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f51c5d4ddabd36886dd3e1438cb358cdcb0d7c499cb99cb4ac2e38e18b5cb210"; };
    dependencies = {
      dirs_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".directories-next."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "directories-next";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "339ee130d97a610ea5a5872d2bbb130fdf68884ff09d3028b81bec8a1ac23bbc"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      dirs_sys_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03d86534ed367a67548dc68113a0f5db55432fdfbb6e6f9d77704397d95d5780"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys-next";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dns-parser."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "dns-parser";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4d33be9473d06f75f58220f71f7a9317aca647dc061dbd3c361b0bef505fbea"; };
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      quick_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "downcast-rs";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dtoa."0.4.8" = overridableMkRustCrate (profileName: rec {
    name = "dtoa";
    version = "0.4.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56899898ce76aaf4a0f24d914c97ea6ed976d42fec6ad33fcbb0a1103e07b2b0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dyn-clonable."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "dyn-clonable";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e9232f0e607a262ceb9bd5141a3dfb3e4db6994b31989bbfd845878cba59fd4"; };
    dependencies = {
      dyn_clonable_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clonable-impl."0.9.0" { profileName = "__noProfile"; };
      dyn_clone = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clone."1.0.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dyn-clonable-impl."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "dyn-clonable-impl";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "558e40ea573c374cf53507fd240b7ee2f5477df7cfebdb97323ec61c719399c5"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dyn-clone."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "dyn-clone";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ee2626afccd7561a06cf1367e2950c4718ea04565e20fb5029b6c7d8ad09abcf"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ed25519";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "74e1069e39f1454367eb2de793ed062fac4c35c2934b76a81d90dd9abcd28816"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      signature = rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."1.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ed25519-dalek";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c762bae6dcaf24c4c84667b8579785430908723d5c889f469d76a41d59cc7a9d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "rand" ]
      [ "serde_crate" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      curve25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; };
      ed25519 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519."1.3.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      serde_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "use_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-as-inner."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "enum-as-inner";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c5f0096a91d210159eceb2ff5e1c4da18388a170e1e3ce948aac9c8fdbbf595"; };
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a19187fea3ac7e84da7dacf48de0c45d63c6a76f9490dae389aead16c243fce3"; };
    features = builtins.concatLists [
      [ "atty" ]
      [ "default" ]
      [ "humantime" ]
      [ "regex" ]
      [ "termcolor" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      humantime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b2cf0344971ee6c64c31be0d530793fba457d322dfec2810c453d0ef228f9c3"; };
    features = builtins.concatLists [
      [ "atty" ]
      [ "default" ]
      [ "humantime" ]
      [ "regex" ]
      [ "termcolor" ]
    ];
    dependencies = {
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      humantime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      termcolor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".environmental."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "environmental";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68b91989ae21441195d7d9b9993a2f9295c7e1a8c96255d8b729accddc124797"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "errno";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f639046355ee4f37944e44f60642c6f3a7efa3cf6b78c78a0d989a8ce6c396a1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "errno_dragonfly" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno-dragonfly."0.1.2" { inherit profileName; };
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "hermit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno-dragonfly."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "errno-dragonfly";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ethbloom."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "ethbloom";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfb684ac8fa8f6c5759f788862bb22ec6fe3cb392f6bfd08e3c64b603661e3f8"; };
    features = builtins.concatLists [
      [ "impl-rlp" ]
      [ "impl-serde" ]
      [ "rlp" ]
      [ "serialize" ]
      [ "std" ]
    ];
    dependencies = {
      crunchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; };
      fixed_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixed-hash."0.7.0" { inherit profileName; };
      impl_rlp = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-rlp."0.3.0" { inherit profileName; };
      impl_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.3.2" { inherit profileName; };
      tiny_keccak = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-keccak."2.0.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ethereum-types."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "ethereum-types";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05136f7057fe789f06e6d41d07b34e6f70d8c86e5693b60f97aaa6553553bdaf"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "impl-rlp" ]
      [ "impl-serde" ]
      [ "rlp" ]
      [ "serialize" ]
      [ "std" ]
    ];
    dependencies = {
      ethbloom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ethbloom."0.11.1" { inherit profileName; };
      fixed_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixed-hash."0.7.0" { inherit profileName; };
      impl_rlp = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-rlp."0.3.0" { inherit profileName; };
      impl_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.3.2" { inherit profileName; };
      primitive_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.10.1" { inherit profileName; };
      uint_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uint."0.9.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.2" = overridableMkRustCrate (profileName: rec {
    name = "event-listener";
    version = "2.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77f3309417938f28bf8228fcff79a4a37103981e3e186d2ccd19c74b38f4eb71"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".exit-future."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "exit-future";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e43f2f1833d64e33f15592464d6fdd70f349dda7b1a53088eb83cd94014008c5"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fake-simd."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "fake-simd";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fallible-iterator";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."1.7.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "1.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3fcf0cee53519c866c09b5de1f6c56ff9d647101f81c1964fa632e148896cdf"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "instant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fdlimit."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "fdlimit";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c4c9e43643f5a3be4ca5b67d26b98031ff9db6806c3440ae32e02e3ceac3f1b"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".file-per-thread-logger."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "file-per-thread-logger";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "21e16290574b39ee41c71aeb90ae960c504ebaf1e2a1c87bd52aa56ed6e1a02f"; };
    dependencies = {
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.9.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
    };
  });
  
  "unknown".finality-aleph."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "finality-aleph";
    version = "0.3.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/finality-aleph");
    dependencies = {
      aleph_bft = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft."0.8.4" { inherit profileName; };
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.8.4" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      ip_network = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ip_network."0.4.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      lru = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.6.6" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      aleph_primitives = rustPackages."unknown".primitives."0.3.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; };
      sc_network = rustPackages."git+https://github.com/paritytech/substrate.git".sc-network."0.10.0-dev" { inherit profileName; };
      sc_service = rustPackages."git+https://github.com/paritytech/substrate.git".sc-service."0.10.0-dev" { inherit profileName; };
      sc_telemetry = rustPackages."git+https://github.com/paritytech/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; };
      sc_utils = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      sp_trie = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
      prometheus_endpoint = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
    };
    devDependencies = {
      sc_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; };
      substrate_test_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-test-runtime."2.0.0" { inherit profileName; };
      substrate_test_runtime_client = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-test-runtime-client."2.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".finality-grandpa."0.14.4" = overridableMkRustCrate (profileName: rec {
    name = "finality-grandpa";
    version = "0.14.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e8ac3ff5224ef91f3c97e03eb1de2db82743427e91aaa5ac635f454f0b164f5a"; };
    features = builtins.concatLists [
      [ "derive-codec" ]
      [ "futures-timer" ]
      [ "log" ]
      [ "parity-scale-codec" ]
      [ "parking_lot" ]
      [ "scale-info" ]
      [ "std" ]
    ];
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      num = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      parity_scale_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixed-hash."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "fixed-hash";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cfcf0ed7fe52a17a03854ec54a9f76d6d84508d1c0e66bc1793301c73fc8493c"; };
    features = builtins.concatLists [
      [ "byteorder" ]
      [ "rand" ]
      [ "rustc-hex" ]
      [ "std" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      rustc_hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hex."2.1.0" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "279fb028e20b3c4c320317955b77c5e0c9701f05a1d309905d6fc702cdc5053e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.22" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e6988e897c1c9c485f43b47a529cef42fde0547f9d8d41a7062518f1d8fc53f"; };
    features = builtins.concatLists [
      [ "any_zlib" ]
      [ "default" ]
      [ "libz-sys" ]
      [ "miniz_oxide" ]
      [ "rust_backend" ]
      [ "zlib" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      libz_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.3" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.4.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "git+https://github.com/paritytech/substrate.git".fork-tree."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "fork-tree";
    version = "3.0.0";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "fork-tree";
      version = "3.0.0";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "form_urlencoded";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5fc25a87fa4fd2094bffb06925852034d90a17f0d1e05197d4956d3555752191"; };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".frame-benchmarking."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-benchmarking";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "frame-benchmarking";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "linregress" ]
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      linregress = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linregress."0.4.4" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      paste = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.6" { profileName = "__noProfile"; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_runtime_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime-interface."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_storage = rustPackages."git+https://github.com/paritytech/substrate.git".sp-storage."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".frame-election-provider-support."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-election-provider-support";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "frame-election-provider-support";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_arithmetic = rustPackages."git+https://github.com/paritytech/substrate.git".sp-arithmetic."4.0.0-dev" { inherit profileName; };
      sp_npos_elections = rustPackages."git+https://github.com/paritytech/substrate.git".sp-npos-elections."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".frame-executive."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-executive";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "frame-executive";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_tracing = rustPackages."git+https://github.com/paritytech/substrate.git".sp-tracing."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".frame-metadata."14.2.0" = overridableMkRustCrate (profileName: rec {
    name = "frame-metadata";
    version = "14.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "37ed5e5c346de62ca5c184b4325a6600d1eaca210666e4606fe4e449574978d0"; };
    features = builtins.concatLists [
      [ "scale-info" ]
      [ "serde" ]
      [ "std" ]
      [ "v14" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-support";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "frame-support";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "once_cell" ]
      [ "serde" ]
      [ "sp-state-machine" ]
      [ "std" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      frame_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".frame-metadata."14.2.0" { inherit profileName; };
      frame_support_procedural = buildRustPackages."git+https://github.com/paritytech/substrate.git".frame-support-procedural."4.0.0-dev" { profileName = "__noProfile"; };
      impl_trait_for_tuples = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      paste = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.6" { profileName = "__noProfile"; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      sp_arithmetic = rustPackages."git+https://github.com/paritytech/substrate.git".sp-arithmetic."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_core_hashing_proc_macro = buildRustPackages."git+https://github.com/paritytech/substrate.git".sp-core-hashing-proc-macro."4.0.0-dev" { profileName = "__noProfile"; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_staking = rustPackages."git+https://github.com/paritytech/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_tracing = rustPackages."git+https://github.com/paritytech/substrate.git".sp-tracing."4.0.0-dev" { inherit profileName; };
      tt_call = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tt-call."1.0.8" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".frame-support-procedural."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-support-procedural";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "frame-support-procedural";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      inflector = rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; };
      frame_support_procedural_tools = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support-procedural-tools."4.0.0-dev" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".frame-support-procedural-tools."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-support-procedural-tools";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "frame-support-procedural-tools";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      frame_support_procedural_tools_derive = buildRustPackages."git+https://github.com/paritytech/substrate.git".frame-support-procedural-tools-derive."3.0.0" { profileName = "__noProfile"; };
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".frame-support-procedural-tools-derive."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "frame-support-procedural-tools-derive";
    version = "3.0.0";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "frame-support-procedural-tools-derive";
      version = "3.0.0";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-system";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "frame-system";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_version = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".frame-system-rpc-runtime-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-system-rpc-runtime-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "frame-system-rpc-runtime-api";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fs-swap."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "fs-swap";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03d47dad3685eceed8488986cad3d5027165ea5edb164331770e2059555f10a5"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.5.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fs2."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "fs2";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "fuchsia-zircon";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      fuchsia_zircon_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon-sys."0.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon-sys."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "fuchsia-zircon-sys";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".funty."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "funty";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fed34cd105917e91daa4da6b3728c47b068749d6a62c59811f06ed2ac71d9da7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.1.31" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.1.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a471a38ef8ed83cd6e40aa59c1ffe17db6855c18e3604d9c4ed8c08ebc28678"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_std" ]
      [ "with-deprecated" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f73fe65f54d1e12b726f517d3e2135ca3125a437b6d998caf1962961f7172d9e"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "bilock")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "compat")
      [ "default" ]
      [ "executor" ]
      [ "futures-executor" ]
      [ "std" ]
      [ "thread-pool" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "unstable")
    ];
    dependencies = {
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.21" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-channel";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3083ce4b914124575708913bca19bfe887522d6e2e6d0952943f5eac4a74010"; };
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "futures-sink" ]
      [ "sink" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "unstable")
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c09fd04b7e4073ac7156a9539b57a484a8ea920f79c7c675d05d289ab6110d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "unstable")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-executor";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9420b90cfa29e327d0429f19be13e7ddb68fa1cccb09d65e5706b8c7a749b8a6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "num_cpus" ]
      [ "std" ]
      [ "thread-pool" ]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fc4045962a5a5e935ee2fdedaa4e08284547402885ab326734432bed5d12966b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "unstable")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" = overridableMkRustCrate (profileName: rec {
    name = "futures-lite";
    version = "1.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7694489acd39452c77daa48516b894c153f192c3578d5a839b62c58099fcbf48"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "fastrand" ]
      [ "futures-io" ]
      [ "memchr" ]
      [ "parking" ]
      [ "std" ]
      [ "waker-fn" ]
    ];
    dependencies = {
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.7.0" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      parking = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.0.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      waker_fn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-macro";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "33c1e13800337f4d4d7a316bf45a567dbcb6ffe087f16424852d97e97a91f512"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-rustls."0.21.1" = overridableMkRustCrate (profileName: rec {
    name = "futures-rustls";
    version = "0.21.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a1387e07917c711fb4ee4f48ea0adb04a3c9739e53ef85bf43ae1edc2937a8b"; };
    dependencies = {
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      rustls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.1" { inherit profileName; };
      webpki = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-sink";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "21163e139fa306126e6eedaf49ecdb4588f939600f0b1e770f4205ee4b7fa868"; };
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-task";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57c66a976bf5909d801bbef33416c41372779507e7a6b3a5e25e4749c58f776a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "unstable")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-timer."2.0.2" = overridableMkRustCrate (profileName: rec {
    name = "futures-timer";
    version = "2.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1de7508b218029b0f01662ed8f61b1c964b3ae99d6f25462d0f55a595109df6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" = overridableMkRustCrate (profileName: rec {
    name = "futures-timer";
    version = "3.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e64b03909df88034c26dc1547e8970b91f98bdb65165d6a4e9110d94263dbb2c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "futures-util";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d8b7abd5d659d9b90c8cba917f6ec750a74e2dc23902ef9cd4cc8c8b22e6036a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "async-await-macro" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "bilock")
      [ "channel" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "compat")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "futures-channel" ]
      [ "futures-io" ]
      [ "futures-macro" ]
      [ "futures-sink" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "futures_01")
      [ "io" ]
      [ "memchr" ]
      [ "sink" ]
      [ "slab" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "unstable")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "futures_01" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.1.31" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      futures_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.21" { profileName = "__noProfile"; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
      futures_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.21" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      pin_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffdf9f34f1447443d37393cc6c2b8313aebddcd96906caf34e54c68d8e57d7bd"; };
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.14.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd48d33ec7f05fbfa152300fdad764757cbded343c1aa1cff2fbaf4134851803"; };
    dependencies = {
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce"; };
    features = builtins.concatLists [
      [ "bindgen" ]
      [ "js-sys" ]
      [ "std" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.config == "wasm32-unknown-unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.56" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" { inherit profileName; };
      ${ if hostPlatform.config == "wasm32-unknown-unknown" then "bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d39cd93900197114fa1fcb7ae84ca742095eed9442088988ae74fa744e930e77"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.0+wasi-snapshot-preview1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ghash."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "ghash";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1583cc1656d7839fd3732b80cf4f38850336cdb9b8ded1cd399ca62958de3c99"; };
    dependencies = {
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
      polyval = rustPackages."registry+https://github.com/rust-lang/crates.io-index".polyval."0.5.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0a01e0497841a3b2db4f8afa483cce65f7e96a3498bd6c541734792aeac8fe7"; };
    features = builtins.concatLists [
      [ "fallible-iterator" ]
      [ "indexmap" ]
      [ "read" ]
      [ "stable_deref_trait" ]
      [ "std" ]
      [ "write" ]
    ];
    dependencies = {
      fallible_iterator = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      stable_deref_trait = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.26.1" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.26.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "78cc372d058dcf6d5ecd98510e7fbc9e5aec4d21de70f65fea8fecebcd881bd4"; };
    features = builtins.concatLists [
      [ "read" ]
      [ "read-core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "glob";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".globset."0.4.8" = overridableMkRustCrate (profileName: rec {
    name = "globset";
    version = "0.4.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10463d9ff00a2a068db14231982f5132edebad0d7660cd956a1c30292dbcbfbd"; };
    dependencies = {
      aho_corasick = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" { inherit profileName; };
      bstr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bstr."0.2.17" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gloo-timers."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "gloo-timers";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d12a7f4e95cfe710f1d624fb1210b7d961a5fb05c4fd942f4feab06e61f590e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "futures" ]
      [ "futures-channel" ]
      [ "futures-core" ]
    ];
    dependencies = {
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.56" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".h2."0.3.11" = overridableMkRustCrate (profileName: rec {
    name = "h2";
    version = "0.3.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9f1f717ddc7b2ba36df7e871fd88db79326551d3d6f1fc406fbfd28b582ff8e"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.6" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
      tokio_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.6.9" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "hash-db";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d23bd4e7b5eda0d0f3a307e8b381fdc8ba9000f26fbe912250c0a4cc3956364a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hash256-std-hasher."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "hash256-std-hasher";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "92c171d55b98633f4ed3860808f004099b36c1cc29c42cfc53aa8591b21efcf2"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      crunchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "default" ]
      [ "inline-more" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "raw")
    ];
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c"; };
    dependencies = {
      unicode_segmentation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"; };
    features = builtins.concatLists [
      [ "alloc" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex-literal."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "hex-literal";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ebdb29d2ea9ed0083cd8cece49bbd968021bd99b0849edb4a9a7ee0fdf6a4e0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex_fmt."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "hex_fmt";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b07f60793ff0a4d9cef0f18e63b5357e06209987153a64648c972c1e5aff336f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "hmac";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "126888268dcc288495a26bf004b38c5fdbb31682f992c84ceb046a1f0fe38840"; };
    dependencies = {
      crypto_mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.8.0" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "hmac";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2a2a2320eb7ec0ebe8da8f744d7812d9fc4cb4d09344ac01898dbcb6a20ae69b"; };
    dependencies = {
      crypto_mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.11.1" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac-drbg."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "hmac-drbg";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17ea0a1394df5b6574da6e0c1ade9e78868c9fb0a4e5ef4428e32da4676b85b1"; };
    dependencies = {
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
      hmac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.8.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hostname."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "hostname";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c731c3e10504cc8ed35cfe2f1db4c9274c3d35fa486e3b31df46f068ef3e867"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "redox" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      match_cfg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".match_cfg."0.1.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "http";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31f4c6746584866f0feabcc69893c5b51beef3831656a968ed7ae254cdc4fd03"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "http-body";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ff4f84919677303da5f147645dbea6b1881f368d03ac84e1dc09031ebd7b2c6"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.6" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".httparse."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "httparse";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9100414882e15fb7feccb4897e5f0ff0ff1ca7d1a86a23208ada4d7a18e6c6c4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "httpdate";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "humantime";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.17" = overridableMkRustCrate (profileName: rec {
    name = "hyper";
    version = "0.14.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "043f0e083e9901b6cc658a77d1eb86f4fc650bbb977a4337dd63192826aa85dd"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "default" ]
      [ "h2" ]
      [ "http1" ]
      [ "http2" ]
      [ "runtime" ]
      [ "server" ]
      [ "socket2" ]
      [ "stream" ]
      [ "tcp" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      h2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.3.11" { inherit profileName; };
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.6" { inherit profileName; };
      http_body = rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.4" { inherit profileName; };
      httparse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.6.0" { inherit profileName; };
      httpdate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.2" { inherit profileName; };
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.1" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.4" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
      tower_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.1" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
      want = rustPackages."registry+https://github.com/rust-lang/crates.io-index".want."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.22.1" = overridableMkRustCrate (profileName: rec {
    name = "hyper-rustls";
    version = "0.22.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f9f7a97316d44c0af9b0301e65010573a853a9fc97046d7331d7f6bc0fd5a64"; };
    features = builtins.concatLists [
      [ "ct-logs" ]
      [ "default" ]
      [ "native-tokio" ]
      [ "rustls-native-certs" ]
      [ "tokio-runtime" ]
    ];
    dependencies = {
      ct_logs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ct-logs."0.8.0" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      hyper = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.17" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rustls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.1" { inherit profileName; };
      rustls_native_certs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.5.0" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
      tokio_rustls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.22.0" { inherit profileName; };
      webpki = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e"; };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" { inherit profileName; };
      unicode_bidi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.7" { inherit profileName; };
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8"; };
    dependencies = {
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" { inherit profileName; };
      unicode_bidi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.7" { inherit profileName; };
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.19" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".if-addrs."0.6.7" = overridableMkRustCrate (profileName: rec {
    name = "if-addrs";
    version = "0.6.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2273e421f7c4f0fc99e1934fe4776f59d8df2972f4199d703fc0da9f2a9f73de"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "if_addrs_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-addrs-sys."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".if-addrs-sys."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "if-addrs-sys";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "de74b9dd780476e837e5eb5ab7c88b49ed304126e412030a0adba99c8efe79ea"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".if-watch."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "if-watch";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae8ab7f67bad3240049cb24fb9cb0b4c2c6af4c245840917fbbdededeee91179"; };
    dependencies = {
      ${ if !hostPlatform.isWindows then "async_io" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.6.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "linux") then "if_addrs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-addrs."0.6.7" { inherit profileName; };
      ipnet = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.3.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".impl-codec."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "impl-codec";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "161ebdfec3c8e3b52bf61c4f3550a1eea4f9579d10dc1b936f3171ebdcd6c443"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      parity_scale_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".impl-rlp."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "impl-rlp";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f28220f89297a075ddc7245cd538076ee98b01f2a9c23a53a4f1105d5a322808"; };
    dependencies = {
      rlp = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rlp."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "impl-serde";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4551f042f3438e64dbd6226b20527fc84a6e1fe65688b58746a2f53623f25f5c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "impl-trait-for-tuples";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "282a6247722caba404c065016bbfa522806e51714c34f5dfc3e4a3a46fcb4223"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node") "serde")
      (lib.optional (rootFeatures' ? "aleph-node") "serde-1")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "hashbrown" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "autocfg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".integer-sqrt."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "integer-sqrt";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "276ec31bcb4a9ee45f58bec6f9ec700ae4cf4f4f8f2fa7e06cb406bd5ffdd770"; };
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".intervalier."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "intervalier";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "64fa110ec7b8f493f416eed552740d10e7030ad5f63b2308f82c9608ec2df275"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."2.0.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "io-lifetimes";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "278e90d6f8a6c76a8334b336e306efa3c5f2b604048cbfd486d6f49878e3af14"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iovec."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "iovec";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ip_network."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "ip_network";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa2f047c0a98b2f299aa5d6d7088443570faae494e9ae1305e48be000c9e0eb1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ipconfig."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "ipconfig";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7e2f18aece9709094573a9f24f483c4f65caa4298e2f7ae1b71cc65d853fad7"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "socket2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.3.19" { inherit profileName; };
      ${ if hostPlatform.isWindows then "widestring" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".widestring."0.4.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winreg" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winreg."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ipnet."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "ipnet";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68f2d64f2edebec4ce84ad108148e67e1064789bee435edc5b60ad398714a3a9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.10.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a9a9d19fa1e79b6215ff29b9d6880b706147f16e9b1dbb1e4e5947b5b02bc5e3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_alloc" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.8" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "0.4.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" = overridableMkRustCrate (profileName: rec {
    name = "jobserver";
    version = "0.1.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af25a77299a7f711a01975c35a6a424eb6862092cc2d6c72c4ed6cbc56dfc1fa"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.56" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.56";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a38fc24e30fd564ce974c02bf1d337caddff65be6cc4735a1f7eab22a7440f04"; };
    dependencies = {
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-client-transports."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-client-transports";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2b99d4207e2a04fb4581746903c2bb7eb376f88de9c699d0f3e10feeac0cd3a"; };
    dependencies = {
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_pubsub = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-pubsub."18.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."1.7.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-core";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14f7f76aef2d054868398427f6c54943cf3d1caa9a7ec7d0c38d69df97a965eb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "futures" ]
      [ "futures-executor" ]
    ];
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.136" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core-client."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-core-client";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b51da17abecbdab3e3d4f26b01c5ec075e88d3abe3ab3b05dc9aa69392764ec0"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      jsonrpc_client_transports = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-client-transports."18.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-derive."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-derive";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b939a78fa820cdfcb7ee7484466746a7377760970f6f9c6fe19f9edcc8a38d2"; };
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-http-server."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-http-server";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1dea6e07251d9ce6a552abfb5d7ad6bc290a4596c8dcc3d795fae2bbdc1f3ff"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hyper = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.17" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_server_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-server-utils."18.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      net2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      unicase = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-ipc-server."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-ipc-server";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "382bb0206323ca7cda3dcd7e245cea86d37d02457a02a975e3378fb149a48845"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_server_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-server-utils."18.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parity_tokio_ipc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-tokio-ipc."0.9.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      tower_service = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-pubsub."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-pubsub";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "240f87695e6c6f62fb37f05c02c04953cf68d6408b8c1c89de85c7a0125b1011"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-server-utils."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-server-utils";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa4fdea130485b572c39a460d50888beb00afb3e35de23ccd7fad8ff19f0e0d4"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      globset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".globset."0.4.8" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
      tokio_stream = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.8" { inherit profileName; };
      tokio_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.6.9" { inherit profileName; };
      unicase = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpc-ws-server."18.0.0" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpc-ws-server";
    version = "18.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f892c7d766369475ab7b0669f417906302d7c0fb521285c0a0c92e52e7c8e946"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_server_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-server-utils."18.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parity_ws = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-ws."0.11.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".keccak."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "keccak";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67c21572b4949434e4fc1e1978b99c5f77064153c59d998bf13ecd96fb5ecba7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kernel32-sys."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "kernel32-sys";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
    };
    buildDependencies = {
      build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-build."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kv-log-macro."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "kv-log-macro";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0de8b303297635ad57c9f5059fd9cee7a47f8e8daa09df0fcd07dd39fb22977f"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kvdb."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "kvdb";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "45a3f58dc069ec0e205a27f5b45920722a46faed802a0541538241af6228f512"; };
    dependencies = {
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kvdb-memorydb."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "kvdb-memorydb";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3b6b85fc643f5acd0bffb2cc8a6d150209379267af0d41db72170021841f9f5"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      kvdb = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb."0.10.0" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kvdb-rocksdb."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "kvdb-rocksdb";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b1b6ea8f2536f504b645ad78419c8246550e19d2c3419a167080ce08edee35a"; };
    dependencies = {
      fs_swap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fs-swap."0.2.6" { inherit profileName; };
      kvdb = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb."0.10.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      owning_ref = rustPackages."registry+https://github.com/rust-lang/crates.io-index".owning_ref."0.4.1" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rocksdb = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rocksdb."0.17.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lazycell";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.119";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1bf2e165bb3457c8e098ea76f3e3bc9db55f87aa90d52d0e6be741470916aaa4"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "align")
      [ "default" ]
      (lib.optional (rootFeatures' ? "aleph-node") "extra_traits")
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f2b111a074963af1d37a139918ac6d49ad1d0d5e47f72fd55388619691a7d753"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "efbc0f03f9a775e9f6aed295c6a1ba2253c5757a9e03d55c6caa46a681abcddd"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libm."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "libm";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "33a33a362ce288760ec6a508b94caaec573ae7d3bbbd91b87aa0bad4456839db"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p."0.39.1" = overridableMkRustCrate (profileName: rec {
    name = "libp2p";
    version = "0.39.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9004c06878ef8f3b4b4067e69a140d87ed20bf777287f82223e49713b36ee433"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "deflate" ]
      [ "dns-async-std" ]
      [ "floodsub" ]
      [ "gossipsub" ]
      [ "identify" ]
      [ "kad" ]
      [ "libp2p-deflate" ]
      [ "libp2p-dns" ]
      [ "libp2p-floodsub" ]
      [ "libp2p-gossipsub" ]
      [ "libp2p-identify" ]
      [ "libp2p-kad" ]
      [ "libp2p-mdns" ]
      [ "libp2p-mplex" ]
      [ "libp2p-noise" ]
      [ "libp2p-ping" ]
      [ "libp2p-plaintext" ]
      [ "libp2p-pnet" ]
      [ "libp2p-relay" ]
      [ "libp2p-request-response" ]
      [ "libp2p-tcp" ]
      [ "libp2p-uds" ]
      [ "libp2p-wasm-ext" ]
      [ "libp2p-websocket" ]
      [ "libp2p-yamux" ]
      [ "mdns" ]
      [ "mplex" ]
      [ "noise" ]
      [ "ping" ]
      [ "plaintext" ]
      [ "pnet" ]
      [ "relay" ]
      [ "request-response" ]
      [ "secp256k1" ]
      [ "tcp-async-io" ]
      [ "uds" ]
      [ "wasm-ext" ]
      [ "websocket" ]
      [ "yamux" ]
    ];
    dependencies = {
      atomic = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic."0.5.1" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_deflate" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-deflate."0.29.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_dns" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-dns."0.29.0" { inherit profileName; };
      libp2p_floodsub = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-floodsub."0.30.0" { inherit profileName; };
      libp2p_gossipsub = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-gossipsub."0.32.0" { inherit profileName; };
      libp2p_identify = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identify."0.30.0" { inherit profileName; };
      libp2p_kad = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-kad."0.31.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_mdns" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-mdns."0.31.0" { inherit profileName; };
      libp2p_mplex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-mplex."0.29.0" { inherit profileName; };
      libp2p_noise = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-noise."0.32.0" { inherit profileName; };
      libp2p_ping = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-ping."0.30.0" { inherit profileName; };
      libp2p_plaintext = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-plaintext."0.29.0" { inherit profileName; };
      libp2p_pnet = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-pnet."0.21.0" { inherit profileName; };
      libp2p_relay = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-relay."0.3.0" { inherit profileName; };
      libp2p_request_response = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-request-response."0.12.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" { inherit profileName; };
      libp2p_swarm_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm-derive."0.24.0" { profileName = "__noProfile"; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_tcp" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-tcp."0.29.0" { inherit profileName; };
      libp2p_uds = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-uds."0.29.0" { inherit profileName; };
      libp2p_wasm_ext = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-wasm-ext."0.29.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_websocket" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-websocket."0.30.0" { inherit profileName; };
      libp2p_yamux = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-yamux."0.33.0" { inherit profileName; };
      multiaddr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.13.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p."0.40.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p";
    version = "0.40.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3bec54343492ba5940a6c555e512c6721139835d28c59bc22febece72dfd0d9d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "deflate" ]
      [ "dns-async-std" ]
      [ "floodsub" ]
      [ "gossipsub" ]
      [ "identify" ]
      [ "kad" ]
      [ "libp2p-deflate" ]
      [ "libp2p-dns" ]
      [ "libp2p-floodsub" ]
      [ "libp2p-gossipsub" ]
      [ "libp2p-identify" ]
      [ "libp2p-kad" ]
      [ "libp2p-mdns" ]
      [ "libp2p-metrics" ]
      [ "libp2p-mplex" ]
      [ "libp2p-noise" ]
      [ "libp2p-ping" ]
      [ "libp2p-plaintext" ]
      [ "libp2p-pnet" ]
      [ "libp2p-relay" ]
      [ "libp2p-rendezvous" ]
      [ "libp2p-request-response" ]
      [ "libp2p-tcp" ]
      [ "libp2p-uds" ]
      [ "libp2p-wasm-ext" ]
      [ "libp2p-websocket" ]
      [ "libp2p-yamux" ]
      [ "mdns" ]
      [ "mplex" ]
      [ "noise" ]
      [ "ping" ]
      [ "plaintext" ]
      [ "pnet" ]
      [ "relay" ]
      [ "rendezvous" ]
      [ "request-response" ]
      [ "secp256k1" ]
      [ "tcp-async-io" ]
      [ "uds" ]
      [ "wasm-ext" ]
      [ "websocket" ]
      [ "yamux" ]
    ];
    dependencies = {
      atomic = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic."0.5.1" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_deflate" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-deflate."0.30.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_dns" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-dns."0.30.0" { inherit profileName; };
      libp2p_floodsub = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-floodsub."0.31.0" { inherit profileName; };
      libp2p_gossipsub = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-gossipsub."0.33.0" { inherit profileName; };
      libp2p_identify = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identify."0.31.0" { inherit profileName; };
      libp2p_kad = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-kad."0.32.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_mdns" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-mdns."0.32.0" { inherit profileName; };
      libp2p_metrics = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-metrics."0.1.0" { inherit profileName; };
      libp2p_mplex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-mplex."0.30.0" { inherit profileName; };
      libp2p_noise = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-noise."0.33.0" { inherit profileName; };
      libp2p_ping = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-ping."0.31.0" { inherit profileName; };
      libp2p_plaintext = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-plaintext."0.30.0" { inherit profileName; };
      libp2p_pnet = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-pnet."0.22.0" { inherit profileName; };
      libp2p_relay = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-relay."0.4.0" { inherit profileName; };
      libp2p_rendezvous = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-rendezvous."0.1.0" { inherit profileName; };
      libp2p_request_response = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-request-response."0.13.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      libp2p_swarm_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm-derive."0.25.0" { profileName = "__noProfile"; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_tcp" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-tcp."0.30.0" { inherit profileName; };
      libp2p_uds = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-uds."0.30.0" { inherit profileName; };
      libp2p_wasm_ext = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-wasm-ext."0.30.0" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "libp2p_websocket" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-websocket."0.31.0" { inherit profileName; };
      libp2p_yamux = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-yamux."0.34.0" { inherit profileName; };
      multiaddr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.13.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-core";
    version = "0.29.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af9b4abdeaa420593a297c8592f63fad4234f4b88dc9343b8fd8e736c35faa59"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "libsecp256k1" ]
      [ "secp256k1" ]
    ];
    dependencies = {
      asn1_der = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1_der."0.7.5" { inherit profileName; };
      bs58 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bs58."0.4.0" { inherit profileName; };
      ed25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."1.0.1" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libsecp256k1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.5.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      multiaddr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.13.0" { inherit profileName; };
      multihash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.14.0" { inherit profileName; };
      multistream_select = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multistream-select."0.10.4" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "ring" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; };
      rw_stream_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rw-stream-sink."0.2.1" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.8.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-core";
    version = "0.30.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "86aad7d54df283db817becded03e611137698a6509d4237a96881976a162340c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "libsecp256k1" ]
      [ "secp256k1" ]
    ];
    dependencies = {
      asn1_der = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1_der."0.7.5" { inherit profileName; };
      bs58 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bs58."0.4.0" { inherit profileName; };
      ed25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."1.0.1" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libsecp256k1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.7.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      multiaddr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.13.0" { inherit profileName; };
      multihash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.14.0" { inherit profileName; };
      multistream_select = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multistream-select."0.10.4" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "ring" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; };
      rw_stream_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rw-stream-sink."0.2.1" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-deflate."0.29.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-deflate";
    version = "0.29.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "66097fccc0b7f8579f90a03ea76ba6196332ea049fd07fd969490a06819dcdc8"; };
    dependencies = {
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.22" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-deflate."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-deflate";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51a800adb195f33de63f4b17b63fe64cfc23bf2c6a0d3d0d5321328664e65197"; };
    dependencies = {
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.22" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-dns."0.29.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-dns";
    version = "0.29.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58ff08b3196b85a17f202d80589e93b1660a574af67275706657fdc762e42c32"; };
    features = builtins.concatLists [
      [ "async-std" ]
      [ "async-std-resolver" ]
    ];
    dependencies = {
      async_std_resolver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-std-resolver."0.20.4" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      trust_dns_resolver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-resolver."0.20.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-dns."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-dns";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb8f89d15cb6e3c5bc22afff7513b11bab7856f2872d3cfba86f7f63a06bc498"; };
    features = builtins.concatLists [
      [ "async-std" ]
      [ "async-std-resolver" ]
    ];
    dependencies = {
      async_std_resolver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-std-resolver."0.20.4" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      trust_dns_resolver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-resolver."0.20.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-floodsub."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-floodsub";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "404eca8720967179dac7a5b4275eb91f904a53859c69ca8d018560ad6beb214f"; };
    dependencies = {
      cuckoofilter = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cuckoofilter."0.5.0" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.8.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-floodsub."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-floodsub";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aab3d7210901ea51b7bae2b581aa34521797af8c4ec738c980bda4a06434067f"; };
    dependencies = {
      cuckoofilter = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cuckoofilter."0.5.0" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-gossipsub."0.32.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-gossipsub";
    version = "0.32.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1cc48709bcbc3a3321f08a73560b4bbb4166a7d56f6fdb615bc775f4f91058e"; };
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hex_fmt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex_fmt."0.3.0" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.8.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-gossipsub."0.33.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-gossipsub";
    version = "0.33.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfeead619eb5dac46e65acc78c535a60aaec803d1428cca6407c3a4fc74d698d"; };
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hex_fmt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex_fmt."0.3.0" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-identify."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-identify";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a7b61f6cf07664fb97016c318c4d4512b3dd4cc07238607f3f0163245f99008e"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.8.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-identify."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-identify";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cca1275574183f288ff8b72d535d5ffa5ea9292ef7829af8b47dcb197c7b0dcd"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      lru = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.6.6" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-kad."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-kad";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50ed78489c87924235665a0ab345b298ee34dff0f7ad62c0ba6608b2144fb75e"; };
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      uint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uint."0.9.3" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.8.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-kad."0.32.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-kad";
    version = "0.32.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2297dc0ca285f3a09d1368bde02449e539b46f94d32d53233f53f6625bcd3ba"; };
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      uint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uint."0.9.3" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-mdns."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-mdns";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a29e6cbc2a24b8471b6567e580a0e8e7b70a6d0f0ea2be0844d1e842d7d4fa33"; };
    dependencies = {
      async_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.6.0" { inherit profileName; };
      data_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.3.2" { inherit profileName; };
      dns_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dns-parser."0.8.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      if_watch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-watch."0.2.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.4" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-mdns."0.32.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-mdns";
    version = "0.32.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14c864b64bdc8a84ff3910a0df88e6535f256191a450870f1e7e10cbf8e64d45"; };
    dependencies = {
      async_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.6.0" { inherit profileName; };
      data_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.3.2" { inherit profileName; };
      dns_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dns-parser."0.8.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      if_watch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-watch."0.2.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.4" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-metrics."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-metrics";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4af432fcdd2f8ba4579b846489f8f0812cfd738ced2c0af39df9b1c48bbb6ab2"; };
    features = builtins.concatLists [
      [ "identify" ]
      [ "kad" ]
      [ "libp2p-identify" ]
      [ "libp2p-kad" ]
      [ "libp2p-ping" ]
      [ "ping" ]
    ];
    dependencies = {
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_identify = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identify."0.31.0" { inherit profileName; };
      libp2p_kad = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-kad."0.32.0" { inherit profileName; };
      libp2p_ping = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-ping."0.31.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      open_metrics_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".open-metrics-client."0.12.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-mplex."0.29.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-mplex";
    version = "0.29.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "313d9ea526c68df4425f580024e67a9d3ffd49f2c33de5154b1f5019816f7a99"; };
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      nohash_hasher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-mplex."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-mplex";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f2cd64ef597f40e14bfce0497f50ecb63dd6d201c61796daeb4227078834fbf"; };
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      nohash_hasher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-noise."0.32.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-noise";
    version = "0.32.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f1db7212f342b6ba7c981cc40e31f76e9e56cb48e65fa4c142ecaca5839523e"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      curve25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" || !(hostPlatform.parsed.cpu.name == "wasm32") then "snow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snow."0.8.0" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
      x25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."1.1.1" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.8.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-noise."0.33.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-noise";
    version = "0.33.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8772c7a99088221bb7ca9c5c0574bf55046a7ab4c319f3619b275f28c8fb87a"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      curve25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" || !(hostPlatform.parsed.cpu.name == "wasm32") then "snow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snow."0.8.0" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
      x25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."1.1.1" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-ping."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-ping";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2482cfd9eb0b7a0baaf3e7b329dc4f2785181a161b1a47b7192f8d758f54a439"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-ping."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-ping";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "80ef7b0ec5cf06530d9eb6cf59ae49d46a2c45663bde31c25a12f682664adbcf"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-plaintext."0.29.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-plaintext";
    version = "0.29.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "13b4783e5423870b9a5c199f65a7a3bc66d86ab56b2b9beebf3c338d889cf8e4"; };
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.8.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-plaintext."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-plaintext";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5fba1a6ff33e4a274c89a3b1d78b9f34f32af13265cc5c46c16938262d4e945a"; };
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-pnet."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-pnet";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "07cb4dd4b917e5b40ddefe49b96b07adcd8d342e0317011d175b7b2bb1dcc974"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      salsa20 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".salsa20."0.8.1" { inherit profileName; };
      sha3 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.9.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-pnet."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-pnet";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0f1a458bbda880107b5b36fcb9b5a1ef0c329685da0e203ed692a8ebe64cc92c"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      salsa20 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".salsa20."0.9.0" { inherit profileName; };
      sha3 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.9.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-relay."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-relay";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0133f6cfd81cdc16e716de2982e012c62e6b9d4f12e41967b3ee361051c622aa"; };
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.8.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-relay."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-relay";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2852b61c90fa8ce3c8fcc2aba76e6cefc20d648f9df29157d6b3a916278ef3e3"; };
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-rendezvous."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-rendezvous";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14a6d2b9e7677eff61dc3d2854876aaf3976d84a01ef6664b610c77a0c9407c5"; };
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bimap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bimap."0.6.2" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-request-response."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-request-response";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06cdae44b6821466123af93cbcdec7c9e6ba9534a8af9cdc296446d39416d241"; };
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      lru = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.6.6" { inherit profileName; };
      minicbor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minicbor."0.8.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-request-response."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-request-response";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a877a4ced6d46bf84677e1974e8cf61fb434af73b2e96fb48d6cb6223a4634d8"; };
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      libp2p_swarm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      lru = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.7.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-swarm";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7083861341e1555467863b4cd802bea1e8c4787c0f7b5110097d0f1f3248f9a9"; };
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-swarm";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f5184a508f223bc100a12665517773fb8730e9f36fc09eefb670bf01b107ae9"; };
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm-derive."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-swarm-derive";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ab8cb308d4fc854869f5abb54fdab0833d2cf670d407c745849dc47e6e08d79c"; };
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm-derive."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-swarm-derive";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "072c290f727d39bdc4e9d6d1c847978693d25a673bd757813681e33e5f6c00c2"; };
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-tcp."0.29.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-tcp";
    version = "0.29.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79edd26b6b4bb5feee210dcda562dca186940dfecb0024b979c3f50824b3bf28"; };
    features = builtins.concatLists [
      [ "async-io" ]
      [ "async-io-crate" ]
      [ "if-watch" ]
    ];
    dependencies = {
      async_io_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.6.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      if_watch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-watch."0.2.2" { inherit profileName; };
      ipnet = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.3.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-tcp."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-tcp";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7399c5b6361ef525d41c11fcf51635724f832baf5819b30d3d873eabb4fbae4b"; };
    features = builtins.concatLists [
      [ "async-io" ]
      [ "async-io-crate" ]
      [ "if-watch" ]
    ];
    dependencies = {
      async_io_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.6.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      if_watch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-watch."0.2.2" { inherit profileName; };
      ipnet = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.3.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      socket2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-uds."0.29.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-uds";
    version = "0.29.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "280e793440dd4e9f273d714f4497325c72cddb0fe85a49f9a03c88f41dd20182"; };
    features = builtins.concatLists [
      [ "async-std" ]
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "emscripten") then "async_std" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-std."1.10.0" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "emscripten") then "futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "emscripten") then "libp2p_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "emscripten") then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-uds."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-uds";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8b7563e46218165dfd60f64b96f7ce84590d75f53ecbdc74a7dd01450dc5973"; };
    features = builtins.concatLists [
      [ "async-std" ]
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "emscripten") then "async_std" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-std."1.10.0" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "emscripten") then "futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "emscripten") then "libp2p_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "emscripten") then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-wasm-ext."0.29.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-wasm-ext";
    version = "0.29.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f553b7140fad3d7a76f50497b0ea591e26737d9607428a75509fc191e4d1b1f6"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.56" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      parity_send_wrapper = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-send-wrapper."0.1.0" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" { inherit profileName; };
      wasm_bindgen_futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-wasm-ext."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-wasm-ext";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1008a302b73c5020251f9708c653f5ed08368e530e247cc9cd2f109ff30042cf"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.56" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      parity_send_wrapper = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-send-wrapper."0.1.0" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" { inherit profileName; };
      wasm_bindgen_futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-websocket."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-websocket";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ddf99dcbf5063e9d59087f61b1e85c686ceab2f5abedb472d32288065c0e5e27"; };
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_rustls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-rustls."0.21.1" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      quicksink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quicksink."0.1.2" { inherit profileName; };
      rw_stream_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rw-stream-sink."0.2.1" { inherit profileName; };
      soketto = rustPackages."registry+https://github.com/rust-lang/crates.io-index".soketto."0.4.2" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
      webpki_roots = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.21.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-websocket."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-websocket";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "22e12df82d1ed64969371a9e65ea92b91064658604cc2576c2757f18ead9a1cf"; };
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_rustls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-rustls."0.21.1" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      quicksink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quicksink."0.1.2" { inherit profileName; };
      rw_stream_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rw-stream-sink."0.2.1" { inherit profileName; };
      soketto = rustPackages."registry+https://github.com/rust-lang/crates.io-index".soketto."0.7.1" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
      webpki_roots = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.21.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-yamux."0.33.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-yamux";
    version = "0.33.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "214cc0dd9c37cbed27f0bb1eba0c41bbafdb93a8be5e9d6ae1e6b4b42cd044bf"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.29.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      yamux = rustPackages."registry+https://github.com/rust-lang/crates.io-index".yamux."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-yamux."0.34.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-yamux";
    version = "0.34.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e7362abb8867d7187e7e93df17f460d554c997fc5c8ac57dc1259057f6889af"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.30.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      yamux = rustPackages."registry+https://github.com/rust-lang/crates.io-index".yamux."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".librocksdb-sys."6.20.3" = overridableMkRustCrate (profileName: rec {
    name = "librocksdb-sys";
    version = "6.20.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c309a9d2470844aceb9a4a098cf5286154d20596868b75a6b36357d2bb9ca25d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "snappy" ]
      [ "static" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
    buildDependencies = {
      bindgen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.59.2" { profileName = "__noProfile"; };
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
      glob = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd1137239ab33b41aa9637a88a28249e5e70c40a42ccc92db7f12cc356c1fcd7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "hmac" ]
      [ "hmac-drbg" ]
      [ "sha2" ]
      [ "static-context" ]
      [ "std" ]
      [ "typenum" ]
    ];
    dependencies = {
      arrayref = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.6" { inherit profileName; };
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.12.3" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      hmac_drbg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac-drbg."0.3.0" { inherit profileName; };
      libsecp256k1_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.2.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
    buildDependencies = {
      libsecp256k1_gen_ecmult = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-ecmult."0.2.1" { profileName = "__noProfile"; };
      libsecp256k1_gen_genmult = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-genmult."0.2.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b0452aac8bab02242429380e9b2f94ea20cea2b37e2c1777a1358799bbe97f37"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "hmac" ]
      [ "hmac-drbg" ]
      [ "sha2" ]
      [ "static-context" ]
      [ "std" ]
      [ "typenum" ]
    ];
    dependencies = {
      arrayref = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.6" { inherit profileName; };
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      hmac_drbg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac-drbg."0.3.0" { inherit profileName; };
      libsecp256k1_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.3.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
    buildDependencies = {
      libsecp256k1_gen_ecmult = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-ecmult."0.3.0" { profileName = "__noProfile"; };
      libsecp256k1_gen_genmult = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-genmult."0.3.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1-core";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d0f6ab710cec28cef759c5f18671a27dae2a5f952cdaaee1d8e2908cb2478a80"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crunchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1-core";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5be9b9bb642d8522a44d533eab56c16c738301965504753b03ad1de3425d5451"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crunchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-ecmult."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1-gen-ecmult";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ccab96b584d38fac86a83f07e659f0deafd0253dc096dab5a36d53efe653c5c3"; };
    dependencies = {
      libsecp256k1_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-ecmult."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1-gen-ecmult";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3038c808c55c87e8a172643a7d87187fc6c4174468159cb3090659d55bcb4809"; };
    dependencies = {
      libsecp256k1_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-genmult."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1-gen-genmult";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67abfe149395e3aa1c48a2beb32b068e2334402df8181f818d3aee2b304c4f5d"; };
    dependencies = {
      libsecp256k1_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-genmult."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1-gen-genmult";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3db8d6ba2cec9eacc40e6e8ccc98931840301f1006e95647ceb2dd5c3aa06f7c"; };
    dependencies = {
      libsecp256k1_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "libz-sys";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "de5435b8549c16d423ed0c03dbaafe57cf6c3344744f1242520d59c9d8ecec66"; };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.24" { profileName = "__noProfile"; };
      ${ if hostPlatform.parsed.abi.name == "msvc" then "vcpkg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "linked-hash-map";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fb9b38af92608140b86b693604b9ffcc5824240a484d1ecd4795bacb2fe88f3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linked_hash_set."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "linked_hash_set";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "47186c6da4d81ca383c7c47c1bfc80f4b95f4720514d860a5407aaf4233f9588"; };
    dependencies = {
      linked_hash_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linregress."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "linregress";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d6c601a85f5ecd1aba625247bca0031585fb1c446461b142878a16f8245ddeb8"; };
    dependencies = {
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.27.1" { inherit profileName; };
      statrs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".statrs."0.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.0.28" = overridableMkRustCrate (profileName: rec {
    name = "linux-raw-sys";
    version = "0.0.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "687387ff42ec7ea4f2149035a5675fedb675d26f98db90a1846ac63d3addb5f5"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "errno" ]
      [ "general" ]
      [ "std" ]
      [ "v5_11" ]
      [ "v5_4" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.6" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "88943dd7ef4a2e5a4bfa2753aaab3013e34ce2533d1996fb18ef591e315e2b3b"; };
    dependencies = {
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "kv_unstable")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "value-bag")
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "value_bag" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".value-bag."1.0.0-alpha.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lru."0.6.6" = overridableMkRustCrate (profileName: rec {
    name = "lru";
    version = "0.6.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ea2d928b485416e8908cff2d97d621db22b27f7b3b6729e438bcf42c671ba91"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "hashbrown" ]
    ];
    dependencies = {
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lru."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "lru";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "274353858935c992b13c0ca408752e2121da852d07dec7ce5f108c77dfa14d1f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "hashbrown" ]
    ];
    dependencies = {
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "lru-cache";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31e24f1ad8321ca0e8a1e0ac13f23cb668e6f5466c2c57319f6a5cf1cc8e3b1c"; };
    dependencies = {
      linked_hash_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lz4."1.23.2" = overridableMkRustCrate (profileName: rec {
    name = "lz4";
    version = "1.23.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aac20ed6991e01bf6a2e68cc73df2b389707403662a8ba89f68511fb340f724c"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      lz4_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lz4-sys."1.9.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lz4-sys."1.9.2" = overridableMkRustCrate (profileName: rec {
    name = "lz4-sys";
    version = "1.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dca79aa95d8b3226213ad454d328369853be3a1382d89532a854f4d69640acae"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "mach";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".match_cfg."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "match_cfg";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffbee8634e0d45d258acb448e7eaab3fce7a0a467395d4d9f228e3c1f01fb2e4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "matchers";
    version = "0.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1"; };
    dependencies = {
      regex_automata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "matches";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a3e378b66a060d48947b590737b30a1be76706c8dd7b8ba0f2fe3989c68a853f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matrixmultiply."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "matrixmultiply";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "add85d4dd35074e6fedc608f8c8f513a3548619a9024b751949ef0e8e45a4d84"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      rawpointer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rawpointer."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "723e3ebdcdc5c023db1df315364573789f8857c11b631a2fdfad7c00f5c046b4"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "057a3db23999c867821a7a59feb06a578fcb03685e983dff90daf9e7d24ac08f"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memory-db."0.27.0" = overridableMkRustCrate (profileName: rec {
    name = "memory-db";
    version = "0.27.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "de006e09d04fc301a5f7e817b75aa49801c4479a8af753764416b085337ddcc5"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memory_units."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "memory_units";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71d96e3f3c0b6325d8ccd83c33b28acb183edcb6c67938ba104ec546854b0882"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".merlin."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "merlin";
    version = "2.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e261cf0f8b3c42ded9f7d2bb59dea03aa52bc8a1cbc7482f9fc3fd1229d3b42"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      keccak = rustPackages."registry+https://github.com/rust-lang/crates.io-index".keccak."0.1.0" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minicbor."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "minicbor";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51aa5bb0ca22415daca596a227b507f880ad1b2318a87fa9325312a5d285ca0d"; };
    features = builtins.concatLists [
      [ "derive" ]
      [ "minicbor-derive" ]
      [ "std" ]
    ];
    dependencies = {
      minicbor_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".minicbor-derive."0.6.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minicbor-derive."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "minicbor-derive";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54999f917cd092b13904737e26631aa2b2b88d625db68e4bab461dcd8006c788"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a92518e98c078586bc6c934028adcca4c92a53d6a958196de835170a01d84e4b"; };
    dependencies = {
      adler = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.6.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4afd66f5b91bf2a3bc13fad0e21caedac168ca4c707504e75585648ae80e4cc4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "with-deprecated" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "fuchsia" then "fuchsia_zircon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon."0.3.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "fuchsia" then "fuchsia_zircon_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon-sys."0.3.3" { inherit profileName; };
      iovec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".iovec."0.1.4" { inherit profileName; };
      ${ if hostPlatform.isWindows then "kernel32" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kernel32-sys."0.2.2" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.2.2" { inherit profileName; };
      net2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba272f85fa0b41fc91872be579b3bbe0f56b792aa361a380eb669469f68dafb2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "net" ]
      [ "os-ext" ]
      [ "os-poll" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" { inherit profileName; };
      ${ if hostPlatform.isWindows then "ntapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ntapi."0.3.7" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio-extras."2.0.6" = overridableMkRustCrate (profileName: rec {
    name = "mio-extras";
    version = "2.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52403fe290012ce777c4626790c8951324a2b9e3316b3143779c72b029742f19"; };
    dependencies = {
      lazycell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miow."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "miow";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ebd808424166322d4a38da87083bfddd3ac4c131334ed55856112eb06d46944d"; };
    dependencies = {
      kernel32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kernel32-sys."0.2.2" { inherit profileName; };
      net2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
      ws2_32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ws2_32-sys."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "miow";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9f1c5b025cda876f66ef43a113f91ebc9f4ccef34843000e0adf6ebbab84e21"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "more-asserts";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7843ec2de400bcbc6a6328c958dc38e5359da6e93e72e37bc5246bf1ae776389"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "multiaddr";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "48ee4ea82141951ac6379f964f71b20876d43712bea8faf6dd1a375e08a46499"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "url" ]
    ];
    dependencies = {
      arrayref = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.6" { inherit profileName; };
      bs58 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bs58."0.4.0" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      data_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.3.2" { inherit profileName; };
      multihash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.14.0" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multibase."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "multibase";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b78c60039650ff12e140ae867ef5299a58e19dded4d334c849dc7177083667e2"; };
    dependencies = {
      base_x = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.8" { inherit profileName; };
      data_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.3.2" { inherit profileName; };
      data_encoding_macro = rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding-macro."0.1.12" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multihash."0.13.2" = overridableMkRustCrate (profileName: rec {
    name = "multihash";
    version = "0.13.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4dac63698b887d2d929306ea48b63760431ff8a24fac40ddb22f9c7f49fb7cab"; };
    features = builtins.concatLists [
      [ "blake2b" ]
      [ "blake2b_simd" ]
      [ "blake2s" ]
      [ "blake2s_simd" ]
      [ "blake3" ]
      [ "default" ]
      [ "derive" ]
      [ "digest" ]
      [ "multihash-derive" ]
      [ "multihash-impl" ]
      [ "secure-hashes" ]
      [ "sha-2" ]
      [ "sha-3" ]
      [ "sha2" ]
      [ "sha3" ]
      [ "std" ]
    ];
    dependencies = {
      blake2b_simd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2b_simd."0.5.11" { inherit profileName; };
      blake2s_simd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2s_simd."0.5.11" { inherit profileName; };
      blake3 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake3."0.3.8" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
      multihash_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash-derive."0.7.2" { profileName = "__noProfile"; };
      sha_2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      sha_3 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.9.1" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multihash."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "multihash";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "752a61cd890ff691b4411423d23816d5866dd5621e4d1c5687a53b94b5a979d8"; };
    features = builtins.concatLists [
      [ "derive" ]
      [ "digest" ]
      [ "identity" ]
      [ "multihash-derive" ]
      [ "multihash-impl" ]
      [ "sha-2" ]
      [ "sha2" ]
      [ "std" ]
    ];
    dependencies = {
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
      multihash_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash-derive."0.7.2" { profileName = "__noProfile"; };
      sha_2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multihash-derive."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "multihash-derive";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "424f6e86263cd5294cbd7f1e95746b95aca0e0d66bff31e5a40d6baa87b4aa99"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
      synstructure = rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multimap."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "multimap";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5ce46fe64a9d73be07dcbe690a38ce1b293be448fd8ce1e6c1b8062c9f72c6a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multistream-select."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "multistream-select";
    version = "0.10.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56a336acba8bc87c8876f6425407dbbe6c417bf478b22015f8fb0994ef3bc0ab"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.27.1" = overridableMkRustCrate (profileName: rec {
    name = "nalgebra";
    version = "0.27.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "462fffe4002f4f2e1f6a9dcf12cc1a6fc0e15989014efc02a941d3e0f5dc2120"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "macros" ]
      [ "matrixmultiply" ]
      [ "nalgebra-macros" ]
      [ "rand" ]
      [ "rand-no-std" ]
      [ "rand-package" ]
      [ "rand_distr" ]
      [ "std" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      matrixmultiply = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matrixmultiply."0.3.2" { inherit profileName; };
      nalgebra_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra-macros."0.1.0" { profileName = "__noProfile"; };
      num_complex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.0" { inherit profileName; };
      num_rational = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      rand_package = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      rand_distr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_distr."0.4.3" { inherit profileName; };
      simba = rustPackages."registry+https://github.com/rust-lang/crates.io-index".simba."0.5.1" { inherit profileName; };
      typenum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nalgebra-macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "nalgebra-macros";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "01fcc0b8149b4632adc89ac3b7b31a12fb6099a0317a4eb2ebff574ef7de7218"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".names."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "names";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10a8690bf09abf659851e58cd666c3d37ac6af07c2bd7a9e332cfba471715775"; };
    dependencies = {
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" = overridableMkRustCrate (profileName: rec {
    name = "net2";
    version = "0.2.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "391630d12b68002ae1e25e8f974306474966550ad82dac6886fb8910c19568ae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "duration" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" || hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nodrop."0.1.14" = overridableMkRustCrate (profileName: rec {
    name = "nodrop";
    version = "0.1.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "nohash-hasher";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.0" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b1d11e1ef389c76fe5b81bcaf2ea32cf88b62bc494e19f493d0b30e7a930109"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      minimal_lexical = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ntapi."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "ntapi";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c28774a7fd2fbb4f0babd8237ce554b73af68021b5f695a3cebd6c59bac0980f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "user" ]
    ];
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.2.6" = overridableMkRustCrate (profileName: rec {
    name = "num-bigint";
    version = "0.2.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "090c7f9998ee0ff65aa5b723e4009f7b217707f1fb5ea551329cc4d6231fb304"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "num-complex";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26873667bbbb7c5182d4a37c1add32cdf09f841af72da53318fdb81543c15085"; };
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.44";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "i128")
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-rational."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "num-rational";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c000134b5dbf44adc5cb772486d335293351644b801551abe8f75c84cfa4aef"; };
    features = builtins.concatLists [
      [ "bigint" ]
      [ "bigint-std" ]
      [ "num-bigint" ]
      [ "std" ]
    ];
    dependencies = {
      num_bigint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.2.6" { inherit profileName; };
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "num-rational";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d41702bd167c2df5520b384281bc111a4b5efcf7fbc4c9c222c815b07e0a6a6a"; };
    dependencies = {
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "i128")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "libm")
      [ "std" ]
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "libm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.2" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19e64526ebdee182341572e50e9ad03965aa510cd94427a4549448f285e957a1"; };
    dependencies = {
      ${ if (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "aarch64") && hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" { inherit profileName; };
      ${ if !hostPlatform.isWindows then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.27.1" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.27.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67ac1d3f9a1d3616fd9a60c8d74296f22406a238b6a72f5cc1e6f314df4ffbf9"; };
    features = builtins.concatLists [
      [ "archive" ]
      [ "coff" ]
      (lib.optional (rootFeatures' ? "aleph-node") "crc32fast")
      [ "elf" ]
      (lib.optional (rootFeatures' ? "aleph-node") "indexmap")
      [ "macho" ]
      [ "pe" ]
      [ "read_core" ]
      (lib.optional (rootFeatures' ? "aleph-node") "std")
      [ "unaligned" ]
      (lib.optional (rootFeatures' ? "aleph-node") "write")
      (lib.optional (rootFeatures' ? "aleph-node") "write_core")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" then "crc32fast" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" then "indexmap" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da32515d9f6e6e489d7bc9d84c71b060db7247dc035bbe44eac88cf87486d8d5"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "race" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".open-metrics-client."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "open-metrics-client";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7337d80c23c2d8b1349563981bc4fb531220733743ba8115454a67b181173f0d"; };
    dependencies = {
      dtoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dtoa."0.4.8" { inherit profileName; };
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.8" { inherit profileName; };
      open_metrics_client_derive_text_encode = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".open-metrics-client-derive-text-encode."0.1.1" { profileName = "__noProfile"; };
      owning_ref = rustPackages."registry+https://github.com/rust-lang/crates.io-index".owning_ref."0.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".open-metrics-client-derive-text-encode."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "open-metrics-client-derive-text-encode";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a15c83b586f00268c619c1cb3340ec1a6f59dd9ba1d9833a273a68e6d5cd8ffc"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "openssl-probe";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".owning_ref."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "owning_ref";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6ff55baddef9e4ad00f88b6c743a2a8062d4c6ade126c2a528644b8e444d52ce"; };
    dependencies = {
      stable_deref_trait = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" { inherit profileName; };
    };
  });
  
  "unknown".pallet-aleph."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "pallet-aleph";
    version = "0.2.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/pallets/aleph");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "pallet-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "frame_support" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "frame_system" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "pallet_balances" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-balances."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "pallet_session" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "primitives" else null } = rustPackages."unknown".primitives."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "scale_info" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "sp_io" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-aleph" then "sp_std" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
    devDependencies = {
      pallet_timestamp = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-aura."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-aura";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-aura";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      pallet_timestamp = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_consensus_aura = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-authorship."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-authorship";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-authorship";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      impl_trait_for_tuples = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_authorship = rustPackages."git+https://github.com/paritytech/substrate.git".sp-authorship."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-babe."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-babe";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-babe";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "frame-benchmarking" ]
      [ "std" ]
    ];
    dependencies = {
      frame_benchmarking = rustPackages."git+https://github.com/paritytech/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; };
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pallet_authorship = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-authorship."4.0.0-dev" { inherit profileName; };
      pallet_session = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; };
      pallet_timestamp = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_consensus_babe = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-babe."0.10.0-dev" { inherit profileName; };
      sp_consensus_vrf = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-vrf."0.10.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_session = rustPackages."git+https://github.com/paritytech/substrate.git".sp-session."4.0.0-dev" { inherit profileName; };
      sp_staking = rustPackages."git+https://github.com/paritytech/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-balances."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-balances";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-balances";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "frame-benchmarking" ]
      [ "std" ]
    ];
    dependencies = {
      frame_benchmarking = rustPackages."git+https://github.com/paritytech/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; };
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "unknown".pallet-elections."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pallet-elections";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/pallets/elections");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "pallet-elections") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "frame_election_provider_support" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-election-provider-support."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "frame_support" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "frame_system" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "pallet_balances" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-balances."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "pallet_session" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "primitives" else null } = rustPackages."unknown".primitives."0.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "scale_info" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "sp_core" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "pallet-elections" then "sp_std" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
    devDependencies = {
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-multisig."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-multisig";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-multisig";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-randomness-collective-flip."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-randomness-collective-flip";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-randomness-collective-flip";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      safe_mix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".safe-mix."1.0.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-scheduler."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-scheduler";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-scheduler";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-session."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-session";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-session";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime") "historical")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "sp-trie")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "frame_support" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "frame_system" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "impl_trait_for_tuples" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "pallet_timestamp" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "scale_info" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_core" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_io" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_session" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-session."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_staking" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_std" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_trie" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-staking."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-staking";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-staking";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime") "serde")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "frame_election_provider_support" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-election-provider-support."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "frame_support" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "frame_system" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "pallet_authorship" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-authorship."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "pallet_session" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "scale_info" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "sp_application_crypto" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "sp_io" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "sp_staking" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "sp_std" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-sudo."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-sudo";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-sudo";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-timestamp."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-timestamp";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-timestamp";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "frame-benchmarking" ]
      [ "std" ]
    ];
    dependencies = {
      frame_benchmarking = rustPackages."git+https://github.com/paritytech/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; };
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_timestamp = rustPackages."git+https://github.com/paritytech/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-transaction-payment."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-transaction-payment";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-transaction-payment";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-transaction-payment-rpc."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-transaction-payment-rpc";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-transaction-payment-rpc";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_core_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core-client."18.0.0" { inherit profileName; };
      jsonrpc_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-derive."18.0.0" { profileName = "__noProfile"; };
      pallet_transaction_payment_rpc_runtime_api = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-transaction-payment-rpc-runtime-api."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_rpc = rustPackages."git+https://github.com/paritytech/substrate.git".sp-rpc."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-transaction-payment-rpc-runtime-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-transaction-payment-rpc-runtime-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-transaction-payment-rpc-runtime-api";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "pallet_transaction_payment" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-transaction-payment."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-treasury."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-treasury";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-treasury";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      impl_trait_for_tuples = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      pallet_balances = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-balances."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-utility."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-utility";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-utility";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".pallet-vesting."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-vesting";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "pallet-vesting";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-db."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "parity-db";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "09aa6c5bb8070cf0456d9fc228b3022e900aae9092c48c9c45facf97422efc1d"; };
    dependencies = {
      blake2_rfc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2-rfc."0.2.18" { inherit profileName; };
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; };
      fs2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fs2."0.4.3" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      lz4 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lz4."1.23.2" { inherit profileName; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.2.3" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      snap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".snap."1.0.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "parity-scale-codec";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "373b1a4c1338d9cd3d1fa53b3a11bdab5ab6bd80a20f7f7becd76953ae2be909"; };
    features = builtins.concatLists [
      [ "bitvec" ]
      [ "chain-error" ]
      [ "default" ]
      [ "derive" ]
      [ "full" ]
      [ "max-encoded-len" ]
      [ "parity-scale-codec-derive" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.2" { inherit profileName; };
      bitvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."0.20.4" { inherit profileName; };
      byte_slice_cast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-slice-cast."1.2.0" { inherit profileName; };
      impl_trait_for_tuples = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      parity_scale_codec_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec-derive."2.3.1" { profileName = "__noProfile"; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec-derive."2.3.1" = overridableMkRustCrate (profileName: rec {
    name = "parity-scale-codec-derive";
    version = "2.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1557010476e0595c9b568d16dcfb81b93cdeb157612726f5170d31aa707bed27"; };
    features = builtins.concatLists [
      [ "max-encoded-len" ]
    ];
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-send-wrapper."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "parity-send-wrapper";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa9777aa91b8ad9dd5aaa04a9b6bcb02c7f1deb952fca5a66034d5e63afc5c6f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-tokio-ipc."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "parity-tokio-ipc";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9981e32fb75e004cc148f5fb70342f393830e0a4aa62e3cc93b50976218d42b6"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "parity-util-mem";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f4cb4e169446179cbc6b8b6320cc9fca49bd2e94e8db25f25f200a8ea774770"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "ethereum-impls")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "ethereum-types")
      [ "hashbrown" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "lru")
      [ "parking_lot" ]
      [ "primitive-types" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "smallvec")
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "ethereum_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ethereum-types."0.12.1" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      impl_trait_for_tuples = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "lru" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.6.6" { inherit profileName; };
      parity_util_mem_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem-derive."0.1.0" { profileName = "__noProfile"; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      primitive_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.10.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-util-mem-derive."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "parity-util-mem-derive";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f557c32c6d268a07c921471619c0295f5efad3a0e76d4f97a05c091a51d110b2"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
      synstructure = rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.32.0" = overridableMkRustCrate (profileName: rec {
    name = "parity-wasm";
    version = "0.32.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "16ad52817c4d343339b3bc2e26861bd21478eda0b7509acf83505727000512ac"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "parity-wasm";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be5e13c266502aadf83426d87d81a0f5d1ef45b8027f5a471c360abfe4bfae92"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-ws."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "parity-ws";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5983d3929ad50f12c3eb9a6743f19d691866ecd44da74c0a3308c3f8a56df0c6"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.4.12" { inherit profileName; };
      httparse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.6.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
      mio_extras = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio-extras."2.0.6" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      sha1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.8.2" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "parking";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "427c3892f9e783d91cc128285287e70a59e206ca452770ece88a76f7a3eddd72"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.6" { inherit profileName; };
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d76e8e1493bcac0d2766c42737f34458f1c8c50c0d23bcb24ea953affb273216"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".paste."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "paste";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0744126afe1a6dd7f394cb50a716dbe086cb06e255e53d8d0185d82828358fb5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "pbkdf2";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "216eaa586a190f0a738f2f918511eecfa90f13295abec0e457cdebcceda80cbd"; };
    dependencies = {
      crypto_mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "pbkdf2";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d95f5254224e617595d2cc3cc73ff0a5eaf2637519e25f03388154e9378b6ffa"; };
    dependencies = {
      crypto_mac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.11.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "peeking_take_while";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "pest";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10f4872ae94d7b90ae48754df22fd42ad52ce740b8f370b03da4835417403e53"; };
    dependencies = {
      ucd_trie = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ucd-trie."0.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".petgraph."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "petgraph";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "467d164a6de56270bd7c4d070df81d07beace25012d5103ced4e9ff08d6afdb7"; };
    dependencies = {
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.2.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".petgraph."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "petgraph";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4a13a2fa9d0b63e5f22328828741e523766fff0ee9e779316902290dff3f824f"; };
    dependencies = {
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.1" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project."0.4.29" = overridableMkRustCrate (profileName: rec {
    name = "pin-project";
    version = "0.4.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9615c18d31137579e9ff063499264ddc1278e7b1982757ebc111028c4d1dc909"; };
    dependencies = {
      pin_project_internal = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."0.4.29" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" = overridableMkRustCrate (profileName: rec {
    name = "pin-project";
    version = "1.0.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58ad3879ad3baf4e44784bc6a718a8698867bb991f8ce24d1bcbe2cfb4c3a75e"; };
    dependencies = {
      pin_project_internal = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.0.10" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."0.4.29" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-internal";
    version = "0.4.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "044964427019eed9d49d9d5bbce6047ef18f37100ea400912a9fa4a3523ab12a"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.0.10" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-internal";
    version = "1.0.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "744b6f092ba29c3650faf274db506afd39944f48420f6c86b17cfe0ee1cb36bb"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "257b64915a082f7811703966789728173279bdebb956b143dbcd23f6f970a777"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e280fbe77cc62c91527259e9442153f4688736748d24660126286329742b4c6c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-utils";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.24" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58893f751c9b0412871a09abd62ecd2a00298c6c83befa223ef98c52aef40cbe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".platforms."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "platforms";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e8d0eef3571242013a0d5dc84861c3ae4a652e56e12adf8bdc26ff5f8cb34c94"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".polling."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "polling";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "685404d509889fade3e86fe3a5803bca2ec09b0c0778d5ada6ec8bf7a8de5259"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "vxworks" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "wepoll_ffi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wepoll-ffi."0.1.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".poly1305."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "poly1305";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "048aeb476be11a4b6ca432ca569e375810de9294ae78f4774e78ea98a9246ede"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.1" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
      universal_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".polyval."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "polyval";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8419d2b623c7c0896ff2d5d96e2cb4ede590fed28fcc34934f4c33c036e620a1"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.1" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
      universal_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.16" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "primitive-types";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05e4722c697a58a99d5d06a08c30821d7c082a4632198de1eaa5a6c22ef42373"; };
    features = builtins.concatLists [
      [ "byteorder" ]
      [ "codec" ]
      [ "impl-codec" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "impl-rlp")
      [ "impl-serde" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "rlp")
      [ "rustc-hex" ]
      [ "scale-info" ]
      [ "scale-info-crate" ]
      [ "serde" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "serde_no_std")
      [ "std" ]
    ];
    dependencies = {
      fixed_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixed-hash."0.7.0" { inherit profileName; };
      impl_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-codec."0.5.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "impl_rlp" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-rlp."0.3.0" { inherit profileName; };
      impl_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.3.2" { inherit profileName; };
      scale_info_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      uint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uint."0.9.3" { inherit profileName; };
    };
  });
  
  "unknown".primitives."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "primitives";
    version = "0.3.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/primitives");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "primitives") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "primitives") "short_session")
      [ "std" ]
    ];
    dependencies = {
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_staking = rustPackages."git+https://github.com/paritytech/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785"; };
    dependencies = {
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e17d47ce914bf4de440332250b0edd23ce48c005f59fab39d3335866b114f11a"; };
    dependencies = {
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "syn" ]
      [ "syn-error" ]
    ];
    dependencies = {
      proc_macro_error_attr = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" { profileName = "__noProfile"; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error-attr";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.36";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c7342d5883fbccae1cc37a2353b09c87c9b0f3afd73f5fb9bba687a1f733b029"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "span-locations")
    ];
    dependencies = {
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "prometheus";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b7f64969ffd5dd8f39bd57a68ac53c163a095ed9d0fb707146da1b27025a3504"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "prost";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "de5e2533f59d08fcf364fd374ebda0692a70bd6d7e66ef97f306f45c6c5d8020"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "prost-derive" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      prost_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-derive."0.8.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "prost";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "444879275cb4fd84958b1a1d5420d15e6fcf7c235fe47f053c9c2a80aceb6001"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "prost-derive" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      prost_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-derive."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-build."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "prost-build";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "355f634b43cdd80724ee7848f95770e7e70eefa6dcf14fea676216573b8fd603"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.3" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      multimap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multimap."0.8.3" { inherit profileName; };
      petgraph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".petgraph."0.5.1" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
      prost_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-types."0.8.0" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
    };
    buildDependencies = {
      which = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".which."4.2.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "prost-build";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62941722fb675d463659e49c4f3fe1fe792ff24fe5bbaa9c08cd3b98a1c354f5"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.3" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      multimap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".multimap."0.8.3" { inherit profileName; };
      petgraph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".petgraph."0.6.0" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      prost_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-types."0.9.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
    };
    buildDependencies = {
      which = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".which."4.2.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-derive."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "prost-derive";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "600d2f334aa05acb02a755e217ef1ab6dea4d51b58b7846588b747edec04efba"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-derive."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "prost-derive";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f9cc1a3263e07e0bf68e96268f37665207b49560d98739662cdfaae215c720fe"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" { inherit profileName; };
      itertools = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-types."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "prost-types";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "603bbd6394701d13f3f25aada59c7de9d35a6a5887cfc156181234a44002771b"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-types."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "prost-types";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "534b7a0e836e3c482d2693070f982e39e7611da9695d4d1f5a4b186b51faef0a"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".psm."0.1.17" = overridableMkRustCrate (profileName: rec {
    name = "psm";
    version = "0.1.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6eca0fa5dd7c4c96e184cec588f0b1db1ee3165e678db21c09793105acb17e6f"; };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pwasm-utils."0.18.2" = overridableMkRustCrate (profileName: rec {
    name = "pwasm-utils";
    version = "0.18.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "880b3384fb00b8f6ecccd5d358b93bd2201900ae3daad213791d1864f6441f5c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parity_wasm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.42.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" = overridableMkRustCrate (profileName: rec {
    name = "quick-error";
    version = "1.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quicksink."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "quicksink";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77de3c815e5a160b1539c6592796801df2043ae35e123b46d73380cfa57af858"; };
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.1.12" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "864d3e96a899863136fc6e99f3d7cae289dafe43bf2c5ac19b70df7210c0a145"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".radium."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "radium";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "643f8f41a8ebc4c5dc4515c82bb8abd397b527fc20fd681b7c011c2aee5d44fb"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "getrandom_package" ]
      [ "libc" ]
      [ "rand_pcg" ]
      [ "small_rng" ]
      [ "std" ]
      [ "wasm-bindgen" ]
    ];
    dependencies = {
      getrandom_package = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten") then "rand_chacha" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "rand_hc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" { inherit profileName; };
      rand_pcg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      rand_chacha = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.16" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.16" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_distr."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "rand_distr";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "32cb0b9bc82b0a0876c2dd994a7e7a2683d3e7390ca40e6886785ef0c7e3ee31"; };
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_hc";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_pcg";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "16abd0c1b639e9eb4d7c50c0b8100b0d0f849be2349829c740fe8e6eb4816429"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rawpointer."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "rawpointer";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60a357793950651c4ed0f3f52338f53b2f809f32d83a07f72909fa13e4c6c1e3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "rayon";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c06aca804d41dbc8ba42dfd964f0d01334eceb64314b9ecf7c5fad5188a06d90"; };
    dependencies = {
      crossbeam_deque = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      rayon_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.9.1" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.9.1" = overridableMkRustCrate (profileName: rec {
    name = "rayon-core";
    version = "1.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d78120e2c850279833f1dd3582f730c4ab53ed95aeaaaa862a2a5c71b1656d8e"; };
    dependencies = {
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.2" { inherit profileName; };
      crossbeam_deque = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.1" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.7" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "redox_users";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "528532f3d801c87aec9def2add9ca802fe569e44a544afe633765267840abe64"; };
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.5" { inherit profileName; };
      syscall = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ref-cast."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "ref-cast";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "300f2a835d808734ee295d45007adacb9ebb29dd3ae2424acfa17930cae541da"; };
    dependencies = {
      ref_cast_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ref-cast-impl."1.0.6" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ref-cast-impl."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "ref-cast-impl";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c38e3aecd2b21cb3959637b883bb3714bc7e43f0268b9a29d3743ee3e55cdd2"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regalloc."0.0.32" = overridableMkRustCrate (profileName: rec {
    name = "regalloc";
    version = "0.0.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a6304468554ed921da3d32c355ea107b8d13d7b8996c3adfb7aab48d3bc321f4"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461"; };
    features = builtins.concatLists [
      [ "aho-corasick" ]
      [ "default" ]
      [ "memchr" ]
      [ "perf" ]
      [ "perf-cache" ]
      [ "perf-dfa" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
    dependencies = {
      aho_corasick = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "regex-syntax" ]
      [ "std" ]
    ];
    dependencies = {
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.6.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".region."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "region";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "877e54ea2adcd70d80e9179344c97f93ef0dffd6b03e1f4529e6e83ab2fa9ae0"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "remove_dir_all";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".resolv-conf."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "resolv-conf";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52e44394d2086d010551b14b53b1f24e31647570cd1deb0379e2c21b329aba00"; };
    features = builtins.concatLists [
      [ "hostname" ]
      [ "system" ]
    ];
    dependencies = {
      hostname = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hostname."0.3.1" { inherit profileName; };
      quick_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".retain_mut."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "retain_mut";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51dd4445360338dab5116712bee1388dc727991d51969558a8882ab552e6db30"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" = overridableMkRustCrate (profileName: rec {
    name = "ring";
    version = "0.16.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "dev_urandom_fallback" ]
      [ "once_cell" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" || (hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "linux") then "spin" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.5.2" { inherit profileName; };
      untrusted = rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.vendor.name == "unknown" && hostPlatform.parsed.kernel.name == "unknown" && hostPlatform.parsed.abi.name == "" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.56" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rlp."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "rlp";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "999508abb0ae792aabed2460c45b89106d97fe4adac593bdaef433c2605847b5"; };
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      rustc_hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hex."2.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rocksdb."0.17.0" = overridableMkRustCrate (profileName: rec {
    name = "rocksdb";
    version = "0.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a62eca5cacf2c8261128631bed9f045598d40bfbe4b29f5163f0f802f8f44a7"; };
    features = builtins.concatLists [
      [ "snappy" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      librocksdb_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".librocksdb-sys."6.20.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rpassword."5.0.1" = overridableMkRustCrate (profileName: rec {
    name = "rpassword";
    version = "5.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffc936cf8a7ea60c58f030fd36a612a48f440610214dc54bc36431f9ea0c3efb"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rsix."0.23.9" = overridableMkRustCrate (profileName: rec {
    name = "rsix";
    version = "0.23.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f64c5788d5aab8b75441499d99576a24eb09f76fb267b36fec7e3d970c66431"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && !(hostPlatform.parsed.cpu.bits == 32) || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "riscv64")) then "errno" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.2.8" { inherit profileName; };
      io_lifetimes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."0.3.3" { inherit profileName; };
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.8" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && !(hostPlatform.parsed.cpu.bits == 32) || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "riscv64")) then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && !(hostPlatform.parsed.cpu.bits == 32) || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "riscv64") then "linux_raw_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.0.28" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" = overridableMkRustCrate (profileName: rec {
    name = "rustc-demangle";
    version = "0.1.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hex."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hex";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a"; };
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0dfe2087c51c460008730de8b57e6a320782fbfb312e1f4d520e6c6fae155ee"; };
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.11.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366"; };
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.1" = overridableMkRustCrate (profileName: rec {
    name = "rustls";
    version = "0.19.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "35edb675feee39aec9c99fa5ff985081995a06d594114ae14cbe797ad7b7a6d7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
      [ "logging" ]
    ];
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; };
      sct = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sct."0.6.1" { inherit profileName; };
      webpki = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "rustls-native-certs";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a07b7c1885bd8ed3831c289b7870b13ef46fe0e856d288c30d9cc17d75a2092"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "rustls" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then "openssl_probe" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" { inherit profileName; };
      rustls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "schannel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.19" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "security_framework" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework."2.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rw-stream-sink."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "rw-stream-sink";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4da5fcb054c46f5a5dff833b129285a93d3f0179531735e6c866e8cc307d2020"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."0.4.29" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".safe-mix."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "safe-mix";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d3d055a2582e6b00ed7a31c1524040aa391092bf636328350813f3a0605215c"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    buildDependencies = {
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".salsa20."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "salsa20";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ecbd2eb639fd7cab5804a0837fe373cc2172d15437e804c054a9fb885cb923b0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "xsalsa20" ]
    ];
    dependencies = {
      cipher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".salsa20."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "salsa20";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c0fbb5f676da676c260ba276a8f43a8dc67cf02d1438423aeb1c677a7212686"; };
    dependencies = {
      cipher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-allocator."4.1.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-allocator";
    version = "4.1.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-allocator";
      version = "4.1.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_wasm_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-wasm-interface."4.0.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-basic-authorship."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-basic-authorship";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-basic-authorship";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sc_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_proposer_metrics = rustPackages."git+https://github.com/paritytech/substrate.git".sc-proposer-metrics."0.10.0-dev" { inherit profileName; };
      sc_telemetry = rustPackages."git+https://github.com/paritytech/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; };
      sc_transaction_pool_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      prometheus_endpoint = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-block-builder."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-block-builder";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-block-builder";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-chain-spec."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-chain-spec";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-chain-spec";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      impl_trait_for_tuples = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.3" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sc_chain_spec_derive = buildRustPackages."git+https://github.com/paritytech/substrate.git".sc-chain-spec-derive."4.0.0-dev" { profileName = "__noProfile"; };
      sc_network = rustPackages."git+https://github.com/paritytech/substrate.git".sc-network."0.10.0-dev" { inherit profileName; };
      sc_telemetry = rustPackages."git+https://github.com/paritytech/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-chain-spec-derive."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-chain-spec-derive";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-chain-spec-derive";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-cli."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-cli";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-cli";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "wasmtime" ]
    ];
    dependencies = {
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" { inherit profileName; };
      fdlimit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fdlimit."0.2.1" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      libp2p = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.40.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      names = rustPackages."registry+https://github.com/rust-lang/crates.io-index".names."0.12.0" { inherit profileName; };
      parity_scale_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rpassword = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rpassword."5.0.1" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sc-keystore."4.0.0-dev" { inherit profileName; };
      sc_network = rustPackages."git+https://github.com/paritytech/substrate.git".sc-network."0.10.0-dev" { inherit profileName; };
      sc_service = rustPackages."git+https://github.com/paritytech/substrate.git".sc-service."0.10.0-dev" { inherit profileName; };
      sc_telemetry = rustPackages."git+https://github.com/paritytech/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; };
      sc_tracing = rustPackages."git+https://github.com/paritytech/substrate.git".sc-tracing."4.0.0-dev" { inherit profileName; };
      sc_utils = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_keyring = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keyring."4.0.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_panic_handler = rustPackages."git+https://github.com/paritytech/substrate.git".sp-panic-handler."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_version = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
      structopt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".structopt."0.3.26" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      bip39 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-bip39."0.8.2" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-client-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-client-api";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      sc_executor = rustPackages."git+https://github.com/paritytech/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; };
      sc_transaction_pool_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; };
      sc_utils = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_database = rustPackages."git+https://github.com/paritytech/substrate.git".sp-database."4.0.0-dev" { inherit profileName; };
      sp_externalities = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      sp_storage = rustPackages."git+https://github.com/paritytech/substrate.git".sp-storage."4.0.0-dev" { inherit profileName; };
      sp_trie = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
      prometheus_endpoint = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-client-db."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-client-db";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-client-db";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "kvdb-rocksdb")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "parity-db")
      (lib.optional (rootFeatures' ? "finality-aleph") "test-helpers")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "with-kvdb-rocksdb")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "with-parity-db")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "hash_db" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "kvdb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb."0.10.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "kvdb_memorydb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb-memorydb."0.10.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "kvdb_rocksdb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb-rocksdb."0.14.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "linked_hash_map" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "parity_db" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-db."0.3.7" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_client_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_state_db" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-state-db."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_arithmetic" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-arithmetic."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_blockchain" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_core" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_database" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-database."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_state_machine" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_trie" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-consensus."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-consensus";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-consensus";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      libp2p = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.40.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_utils = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      prometheus_endpoint = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-consensus-aura."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-consensus-aura";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-consensus-aura";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sc_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; };
      sc_consensus_slots = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus-slots."0.10.0-dev" { inherit profileName; };
      sc_telemetry = rustPackages."git+https://github.com/paritytech/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_consensus_aura = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; };
      sp_consensus_slots = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-slots."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      prometheus_endpoint = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-consensus-slots."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-consensus-slots";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-consensus-slots";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; };
      sc_telemetry = rustPackages."git+https://github.com/paritytech/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_arithmetic = rustPackages."git+https://github.com/paritytech/substrate.git".sp-arithmetic."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_consensus_slots = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-slots."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      sp_timestamp = rustPackages."git+https://github.com/paritytech/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-executor."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-executor";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-executor";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node") "sc-executor-wasmtime")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "std")
      (lib.optional (rootFeatures' ? "aleph-node") "wasmtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "libsecp256k1" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_executor_common" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-executor-common."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_executor_wasmi" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-executor-wasmi."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" then "sc_executor_wasmtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-executor-wasmtime."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_core" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_core_hashing_proc_macro" else null } = buildRustPackages."git+https://github.com/paritytech/substrate.git".sp-core-hashing-proc-macro."4.0.0-dev" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_externalities" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_io" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_panic_handler" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-panic-handler."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_runtime_interface" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime-interface."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_tasks" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-tasks."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_trie" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_version" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_wasm_interface" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-wasm-interface."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "wasmi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi."0.9.1" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-executor-common."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-executor-common";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-executor-common";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      environmental = rustPackages."registry+https://github.com/rust-lang/crates.io-index".environmental."1.1.3" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      pwasm_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pwasm-utils."0.18.2" { inherit profileName; };
      sc_allocator = rustPackages."git+https://github.com/paritytech/substrate.git".sc-allocator."4.1.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_maybe_compressed_blob = rustPackages."git+https://github.com/paritytech/substrate.git".sp-maybe-compressed-blob."4.1.0-dev" { inherit profileName; };
      sp_serializer = rustPackages."git+https://github.com/paritytech/substrate.git".sp-serializer."4.0.0-dev" { inherit profileName; };
      sp_wasm_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-wasm-interface."4.0.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      wasmi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi."0.9.1" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-executor-wasmi."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-executor-wasmi";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-executor-wasmi";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sc_allocator = rustPackages."git+https://github.com/paritytech/substrate.git".sc-allocator."4.1.0-dev" { inherit profileName; };
      sc_executor_common = rustPackages."git+https://github.com/paritytech/substrate.git".sc-executor-common."0.10.0-dev" { inherit profileName; };
      scoped_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime-interface."4.0.0-dev" { inherit profileName; };
      sp_wasm_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-wasm-interface."4.0.0-dev" { inherit profileName; };
      wasmi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi."0.9.1" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-executor-wasmtime."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-executor-wasmtime";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-executor-wasmtime";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parity_wasm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.42.2" { inherit profileName; };
      sc_allocator = rustPackages."git+https://github.com/paritytech/substrate.git".sc-allocator."4.1.0-dev" { inherit profileName; };
      sc_executor_common = rustPackages."git+https://github.com/paritytech/substrate.git".sc-executor-common."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime-interface."4.0.0-dev" { inherit profileName; };
      sp_wasm_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-wasm-interface."4.0.0-dev" { inherit profileName; };
      wasmtime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime."0.31.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-informant."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-informant";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-informant";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_network = rustPackages."git+https://github.com/paritytech/substrate.git".sc-network."0.10.0-dev" { inherit profileName; };
      sc_transaction_pool_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-keystore."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-keystore";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-keystore";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-network."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-network";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-network";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      async_std = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-std."1.10.0" { inherit profileName; };
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.5.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      cid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cid."0.6.1" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      fork_tree = rustPackages."git+https://github.com/paritytech/substrate.git".fork-tree."3.0.0" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      ip_network = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ip_network."0.4.1" { inherit profileName; };
      libp2p = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.40.0" { inherit profileName; };
      linked_hash_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" { inherit profileName; };
      linked_hash_set = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked_hash_set."0.1.4" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      lru = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.7.2" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      prost = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.9.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      sc_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; };
      sc_peerset = rustPackages."git+https://github.com/paritytech/substrate.git".sc-peerset."4.0.0-dev" { inherit profileName; };
      sc_utils = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      sp_arithmetic = rustPackages."git+https://github.com/paritytech/substrate.git".sp-arithmetic."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_finality_grandpa = rustPackages."git+https://github.com/paritytech/substrate.git".sp-finality-grandpa."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      prometheus_endpoint = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      unsigned_varint = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.6.0" { inherit profileName; };
      void = rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
    buildDependencies = {
      prost_build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.9.0" { profileName = "__noProfile"; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-offchain."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-offchain";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-offchain";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      hyper = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.17" { inherit profileName; };
      hyper_rustls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.22.1" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_network = rustPackages."git+https://github.com/paritytech/substrate.git".sc-network."0.10.0-dev" { inherit profileName; };
      sc_utils = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_offchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-offchain."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      threadpool = rustPackages."registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-peerset."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-peerset";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-peerset";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.40.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      sc_utils = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-proposer-metrics."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-proposer-metrics";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-proposer-metrics";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prometheus_endpoint = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-rpc."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-rpc";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-rpc";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      rpc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_pubsub = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-pubsub."18.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      sc_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; };
      sc_chain_spec = rustPackages."git+https://github.com/paritytech/substrate.git".sc-chain-spec."4.0.0-dev" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_rpc_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-rpc-api."0.10.0-dev" { inherit profileName; };
      sc_tracing = rustPackages."git+https://github.com/paritytech/substrate.git".sc-tracing."4.0.0-dev" { inherit profileName; };
      sc_transaction_pool_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; };
      sc_utils = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_offchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-offchain."4.0.0-dev" { inherit profileName; };
      sp_rpc = rustPackages."git+https://github.com/paritytech/substrate.git".sp-rpc."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_session = rustPackages."git+https://github.com/paritytech/substrate.git".sp-session."4.0.0-dev" { inherit profileName; };
      sp_version = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-rpc-api."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-rpc-api";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-rpc-api";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_core_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core-client."18.0.0" { inherit profileName; };
      jsonrpc_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-derive."18.0.0" { profileName = "__noProfile"; };
      jsonrpc_pubsub = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-pubsub."18.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      sc_chain_spec = rustPackages."git+https://github.com/paritytech/substrate.git".sc-chain-spec."4.0.0-dev" { inherit profileName; };
      sc_transaction_pool_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_rpc = rustPackages."git+https://github.com/paritytech/substrate.git".sp-rpc."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_tracing = rustPackages."git+https://github.com/paritytech/substrate.git".sp-tracing."4.0.0-dev" { inherit profileName; };
      sp_version = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-rpc-server."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-rpc-server";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-rpc-server";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      http = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-http-server."18.0.0" { inherit profileName; };
      ipc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-ipc-server."18.0.0" { inherit profileName; };
      pubsub = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-pubsub."18.0.0" { inherit profileName; };
      ws = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-ws-server."18.0.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      prometheus_endpoint = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-service."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-service";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-service";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "db")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "finality-aleph") "test-helpers")
      (lib.optional (rootFeatures' ? "aleph-node") "wasmtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "async_trait" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "directories" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".directories."4.0.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "exit_future" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".exit-future."0.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "futures_timer" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "hash_db" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "jsonrpc_core" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "jsonrpc_pubsub" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-pubsub."18.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "parity_util_mem" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "pin_project" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "rand" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_block_builder" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_chain_spec" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-chain-spec."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_client_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_client_db" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-db."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_consensus" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_executor" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_informant" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-informant."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_keystore" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-keystore."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_network" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-network."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_offchain" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-offchain."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_rpc" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-rpc."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_rpc_server" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-rpc-server."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_telemetry" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_tracing" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-tracing."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_transaction_pool" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_transaction_pool_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sc_utils" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "serde_json" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_application_crypto" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_block_builder" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_blockchain" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_consensus" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_core" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_externalities" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_inherents" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_keystore" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_session" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-session."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_state_machine" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_storage" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-storage."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_tracing" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-tracing."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_transaction_pool" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_transaction_storage_proof" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-transaction-storage-proof."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_trie" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "sp_version" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "prometheus_endpoint" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "tempfile" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "tokio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "tracing" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "tracing_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-futures."0.2.5" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-state-db."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-state-db";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-state-db";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      parity_util_mem_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem-derive."0.1.0" { profileName = "__noProfile"; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-telemetry."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-telemetry";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-telemetry";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      libp2p = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.40.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      wasm_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-tracing."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-tracing";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-tracing";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_rpc_server = rustPackages."git+https://github.com/paritytech/substrate.git".sc-rpc-server."4.0.0-dev" { inherit profileName; };
      sc_tracing_proc_macro = buildRustPackages."git+https://github.com/paritytech/substrate.git".sc-tracing-proc-macro."4.0.0-dev" { profileName = "__noProfile"; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_rpc = rustPackages."git+https://github.com/paritytech/substrate.git".sp-rpc."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_tracing = rustPackages."git+https://github.com/paritytech/substrate.git".sp-tracing."4.0.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.2" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.25" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-tracing-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-tracing-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-tracing-proc-macro";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-transaction-pool."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-transaction-pool";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-transaction-pool";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      intervalier = rustPackages."registry+https://github.com/rust-lang/crates.io-index".intervalier."0.4.0" { inherit profileName; };
      linked_hash_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.4" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      retain_mut = rustPackages."registry+https://github.com/rust-lang/crates.io-index".retain_mut."0.1.6" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_transaction_pool_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; };
      sc_utils = rustPackages."git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_tracing = rustPackages."git+https://github.com/paritytech/substrate.git".sp-tracing."4.0.0-dev" { inherit profileName; };
      sp_transaction_pool = rustPackages."git+https://github.com/paritytech/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; };
      prometheus_endpoint = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-transaction-pool-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-transaction-pool-api";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sc-utils."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-utils";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sc-utils";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
      [ "metered" ]
    ];
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      prometheus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "scale-info";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c55b744399c25532d63a0d2789b109df8d46fc93752d46b0782991a931a782f"; };
    features = builtins.concatLists [
      [ "bitvec" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "decode")
      [ "derive" ]
      [ "scale-info-derive" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "serde")
      [ "std" ]
    ];
    dependencies = {
      bitvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."0.20.4" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      scale = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info-derive."1.0.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scale-info-derive."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "scale-info-derive";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baeb2780690380592f86205aa4ee49815feb2acad8c2f59e6dd207148c3f1fcd"; };
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "schannel";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f05ba609c234e60bee0d547fe94a4c7e9da733d1c962cf6e59efa4cd9c8bc75"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".schnorrkel."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "schnorrkel";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "021b403afe70d81eea68f6ea12f6b3c9588e5d536a94c3bf80f15e7faa267862"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "getrandom" ]
      [ "preaudit_deprecated" ]
      [ "rand" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      arrayref = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.6" { inherit profileName; };
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      curve25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."2.1.3" { inherit profileName; };
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" { inherit profileName; };
      merlin = rustPackages."registry+https://github.com/rust-lang/crates.io-index".merlin."2.0.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.8.2" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "scoped-tls";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sct."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "sct";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b362b83898e0e69f38515b82ee15aa80636befe47c3b6d3d89a911e78fc228ce"; };
    dependencies = {
      ring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; };
      untrusted = rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".secrecy."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "secrecy";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9bd1c54ea06cfd2f6b63219704de0b9b4f72dcc2b8fdef820be6cd799780e91e"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework."2.6.1" = overridableMkRustCrate (profileName: rec {
    name = "security-framework";
    version = "2.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2dc14f172faf8a0194a3aded622712b0de276821addc574fa54fc0a1167e10dc"; };
    features = builtins.concatLists [
      [ "OSX_10_9" ]
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; };
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      security_framework_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.6.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.6.1" = overridableMkRustCrate (profileName: rec {
    name = "security-framework-sys";
    version = "2.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0160a13a177a45bfb43ce71c01580998474f556ad854dcbca936dd2841a5c556"; };
    features = builtins.concatLists [
      [ "OSX_10_9" ]
    ];
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.3" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "semver_parser" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.10.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4a3381e03edd24287172047536f20cabde766e2cd3e65e6b00fb3af51c4f38d"; };
    features = builtins.concatLists [
      [ "default" ]
      (lib.optional (rootFeatures' ? "finality-aleph") "serde")
      [ "std" ]
    ];
    dependencies = {
      ${ if rootFeatures' ? "finality-aleph" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "semver-parser";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "semver-parser";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7"; };
    dependencies = {
      pest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.136";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce31e24b01e1e524df96f1c2fdd054405f8d7376249a5110886fb4b658484789"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "derive" ]
      [ "serde_derive" ]
      [ "std" ]
    ];
    dependencies = {
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.136" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.136" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.136";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08597e7152fcd306f41838ed3e37be9eaeed2b61c42e2117266a554fab4662f9"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.79";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e8d9fa5c3b304765ce1fd9c4c8a3de2c8db365a5b91be52f186efc675681d95"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "unbounded_depth")
    ];
    dependencies = {
      itoa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.1" { inherit profileName; };
      ryu = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha-1."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "sha-1";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.7.3" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" { inherit profileName; };
      fake_simd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fake-simd."0.1.2" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.8" = overridableMkRustCrate (profileName: rec {
    name = "sha-1";
    version = "0.9.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "99cd6713db3cf16b6c84e06321e049a9b9f699826e16096d23bbcc44d15d51a6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node") "default")
      (lib.optional (rootFeatures' ? "aleph-node") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "block_buffer" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") && (hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64") then "cpufeatures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "digest" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "opaque_debug" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a256f46ea78a0c0d9ff00077504903ac881a1dafdc20da66545699e7776b3e69"; };
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.7.3" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" { inherit profileName; };
      fake_simd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fake-simd."0.1.2" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.9.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.1" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha3."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "sha3";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f81199417d4e5de3f04b1e871023acea7389672c4135918f05aa9cbf2f2fa809"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; };
      digest = rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; };
      keccak = rustPackages."registry+https://github.com/rust-lang/crates.io-index".keccak."0.1.0" { inherit profileName; };
      opaque_debug = rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "sharded-slab";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shlex."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "shlex";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "43b2853a4d09f215c24cc5489c992ce46052d359b5109343cbafbf26bc62f8a3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signal-hook."0.3.13" = overridableMkRustCrate (profileName: rec {
    name = "signal-hook";
    version = "0.3.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "647c97df271007dcea485bb74ffdb57f2e683f1306c854f468a0c244badabf2d"; };
    features = builtins.concatLists [
      [ "channel" ]
      [ "iterator" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      signal_hook_registry = rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "signal-hook-registry";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e51e73328dc4ac0c7ccbda3a494dfa03df1de2f46018127f60c693f2648455b0"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signature."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "signature";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f054c6c1a6e95179d6f23ed974060dcefb2d9388bb7256900badad682c499de4"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simba."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "simba";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e82063457853d00243beda9952e910b82593e4b07ae9f721b9278a99a0d3d5c"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      num_complex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.0" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      paste = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.6" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9def91fd1e018fe007022791f865d0ccc9b3a0d5001e01aabb8b40e46000afb5"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f2dd574626839106c320a323308629dcb1acfc96e32a8cba364ddc61ac23ee83"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snap."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "snap";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "45456094d1983e2ee2a18fdfebce3189fa451699d0502cb8e3b49dba5ba41451"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snow."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "snow";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6142f7c25e94f6fd25a32c3348ec230df9109b463f59c8c7acc4bd34936babb7"; };
    features = builtins.concatLists [
      [ "aes-gcm" ]
      [ "blake2" ]
      [ "chacha20poly1305" ]
      [ "default-resolver" ]
      [ "rand" ]
      [ "ring" ]
      [ "ring-resolver" ]
      [ "sha2" ]
      [ "x25519-dalek" ]
    ];
    dependencies = {
      aes_gcm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.9.4" { inherit profileName; };
      blake2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.9.2" { inherit profileName; };
      chacha20poly1305 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chacha20poly1305."0.8.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
      ring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
      x25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."1.1.1" { inherit profileName; };
    };
    buildDependencies = {
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.3.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.3.19" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.3.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "122e570113d28d773067fab24266b66753f6ea915758651696b6e35e49f88d6e"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "66d72b759436ae32898a2af0a14218dbf55efde3feeb170eb623637db85ee1e0"; };
    features = builtins.concatLists [
      [ "all" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".soketto."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "soketto";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5c71ed3d54db0a699f4948e1bb3e45b450fa31fe602621dee6680361d569c88"; };
    features = builtins.concatLists [
      [ "deflate" ]
      [ "flate2" ]
    ];
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.12.3" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."0.5.6" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.22" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      httparse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.6.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      sha1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".soketto."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "soketto";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "41d1c5305e39e09653383c2c7244f2f78b3bcae37cf50c64cb4789c9f5096ec2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "deflate" ]
      [ "flate2" ]
    ];
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      flate2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.22" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      httparse = rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.6.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      sha1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.8" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-api";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "hash-db" ]
      [ "sp-state-machine" ]
      [ "std" ]
      [ "thiserror" ]
    ];
    dependencies = {
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sp_api_proc_macro = buildRustPackages."git+https://github.com/paritytech/substrate.git".sp-api-proc-macro."4.0.0-dev" { profileName = "__noProfile"; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_version = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-api-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-api-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-api-proc-macro";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      blake2_rfc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2-rfc."0.2.18" { inherit profileName; };
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-application-crypto";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-application-crypto";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "full_crypto" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-arithmetic."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-arithmetic";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-arithmetic";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      integer_sqrt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".integer-sqrt."0.1.5" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_debug_derive = buildRustPackages."git+https://github.com/paritytech/substrate.git".sp-debug-derive."4.0.0-dev" { profileName = "__noProfile"; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-authorship."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-authorship";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-authorship";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "async-trait" ]
      [ "std" ]
    ];
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-block-builder."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-block-builder";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-block-builder";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_inherents" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_std" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-blockchain";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-blockchain";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      lru = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.7.2" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_database = rustPackages."git+https://github.com/paritytech/substrate.git".sp-database."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-consensus";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      futures_timer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_version = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-consensus-aura."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus-aura";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-consensus-aura";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "async-trait")
      (lib.optional (rootFeatures' ? "aleph-node") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "sp-consensus")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "async_trait" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "scale_info" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_application_crypto" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_consensus" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_consensus_slots" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-slots."0.10.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_inherents" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_std" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_timestamp" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-consensus-babe."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus-babe";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-consensus-babe";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "async-trait" ]
      [ "serde" ]
      [ "sp-consensus" ]
      [ "sp-keystore" ]
      [ "sp-timestamp" ]
      [ "std" ]
    ];
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      merlin = rustPackages."registry+https://github.com/rust-lang/crates.io-index".merlin."2.0.1" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_consensus_slots = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-slots."0.10.0-dev" { inherit profileName; };
      sp_consensus_vrf = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-vrf."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_timestamp = rustPackages."git+https://github.com/paritytech/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-consensus-slots."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus-slots";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-consensus-slots";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "serde")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "scale_info" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_arithmetic" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-arithmetic."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-consensus-vrf."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus-vrf";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-consensus-vrf";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      schnorrkel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnorrkel."0.9.1" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-core";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-core";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "base58" ]
      [ "blake2-rfc" ]
      [ "default" ]
      [ "dyn-clonable" ]
      [ "ed25519-dalek" ]
      [ "full_crypto" ]
      [ "futures" ]
      [ "hex" ]
      [ "impl-serde" ]
      [ "lazy_static" ]
      [ "libsecp256k1" ]
      [ "merlin" ]
      [ "parking_lot" ]
      [ "rand" ]
      [ "regex" ]
      [ "schnorrkel" ]
      [ "serde" ]
      [ "sha2" ]
      [ "sp-core-hashing" ]
      [ "sp-externalities" ]
      [ "std" ]
      [ "substrate-bip39" ]
      [ "thiserror" ]
      [ "tiny-bip39" ]
      [ "tiny-keccak" ]
      [ "twox-hash" ]
      [ "wasmi" ]
    ];
    dependencies = {
      base58 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base58."0.2.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; };
      blake2_rfc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2-rfc."0.2.18" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      dyn_clonable = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clonable."0.9.0" { inherit profileName; };
      ed25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."1.0.1" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      hash256_std_hasher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash256-std-hasher."0.15.2" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      impl_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.3.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libsecp256k1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.7.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      merlin = rustPackages."registry+https://github.com/rust-lang/crates.io-index".merlin."2.0.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      primitive_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.10.1" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      schnorrkel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnorrkel."0.9.1" { inherit profileName; };
      secrecy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".secrecy."0.8.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      sp_core_hashing = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core-hashing."4.0.0-dev" { inherit profileName; };
      sp_debug_derive = buildRustPackages."git+https://github.com/paritytech/substrate.git".sp-debug-derive."4.0.0-dev" { profileName = "__noProfile"; };
      sp_externalities = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
      sp_runtime_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime-interface."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_storage = rustPackages."git+https://github.com/paritytech/substrate.git".sp-storage."4.0.0-dev" { inherit profileName; };
      ss58_registry = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ss58-registry."1.15.0" { inherit profileName; };
      substrate_bip39 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".substrate-bip39."0.4.4" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      bip39 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-bip39."0.8.2" { inherit profileName; };
      tiny_keccak = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-keccak."2.0.2" { inherit profileName; };
      twox_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.2" { inherit profileName; };
      wasmi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi."0.9.1" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-core-hashing."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-core-hashing";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-core-hashing";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      blake2_rfc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2-rfc."0.2.18" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      tiny_keccak = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-keccak."2.0.2" { inherit profileName; };
      twox_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.2" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-core-hashing-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-core-hashing-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-core-hashing-proc-macro";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      sp_core_hashing = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core-hashing."4.0.0-dev" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-database."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-database";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-database";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      kvdb = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb."0.10.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-debug-derive."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-debug-derive";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-debug-derive";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-externalities";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-externalities";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      environmental = rustPackages."registry+https://github.com/rust-lang/crates.io-index".environmental."1.1.3" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_storage = rustPackages."git+https://github.com/paritytech/substrate.git".sp-storage."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-finality-grandpa."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-finality-grandpa";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-finality-grandpa";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
      [ "serde" ]
      [ "sp-keystore" ]
      [ "std" ]
    ];
    dependencies = {
      grandpa = rustPackages."registry+https://github.com/rust-lang/crates.io-index".finality-grandpa."0.14.4" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-inherents";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-inherents";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "async-trait")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "sp-runtime")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "std")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "thiserror")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "async_trait" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "impl_trait_for_tuples" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_core" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_std" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-io";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-io";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "disable_oom" ]
      [ "disable_panic_handler" ]
      [ "futures" ]
      [ "libsecp256k1" ]
      [ "log" ]
      [ "parking_lot" ]
      [ "sp-externalities" ]
      [ "sp-keystore" ]
      [ "sp-state-machine" ]
      [ "sp-trie" ]
      [ "std" ]
    ];
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      libsecp256k1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.7.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_externalities = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_runtime_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime-interface."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_tracing = rustPackages."git+https://github.com/paritytech/substrate.git".sp-tracing."4.0.0-dev" { inherit profileName; };
      sp_trie = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
      sp_wasm_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-wasm-interface."4.0.0-dev" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.22" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-keyring."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-keyring";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-keyring";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      strum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strum."0.22.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-keystore";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-keystore";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "serde")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      merlin = rustPackages."registry+https://github.com/rust-lang/crates.io-index".merlin."2.0.1" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      schnorrkel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnorrkel."0.9.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_externalities = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-maybe-compressed-blob."4.1.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-maybe-compressed-blob";
    version = "4.1.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-maybe-compressed-blob";
      version = "4.1.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      zstd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd."0.9.2+zstd.1.5.1" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-npos-elections."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-npos-elections";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-npos-elections";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_arithmetic = rustPackages."git+https://github.com/paritytech/substrate.git".sp-arithmetic."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_npos_elections_solution_type = buildRustPackages."git+https://github.com/paritytech/substrate.git".sp-npos-elections-solution-type."4.0.0-dev" { profileName = "__noProfile"; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-npos-elections-solution-type."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-npos-elections-solution-type";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-npos-elections-solution-type";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-offchain."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-offchain";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-offchain";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_core" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-panic-handler."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-panic-handler";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-panic-handler";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      backtrace = rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.64" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-rpc."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-rpc";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-rpc";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-runtime";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-runtime";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "default")
      [ "rand" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      hash256_std_hasher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash256-std-hasher."0.15.2" { inherit profileName; };
      impl_trait_for_tuples = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      paste = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.6" { profileName = "__noProfile"; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_arithmetic = rustPackages."git+https://github.com/paritytech/substrate.git".sp-arithmetic."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-runtime-interface."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-runtime-interface";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-runtime-interface";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "disable_target_static_assertions" ]
      [ "sp-externalities" ]
      [ "std" ]
    ];
    dependencies = {
      impl_trait_for_tuples = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      primitive_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.10.1" { inherit profileName; };
      sp_externalities = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
      sp_runtime_interface_proc_macro = buildRustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime-interface-proc-macro."4.0.0-dev" { profileName = "__noProfile"; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_storage = rustPackages."git+https://github.com/paritytech/substrate.git".sp-storage."4.0.0-dev" { inherit profileName; };
      sp_tracing = rustPackages."git+https://github.com/paritytech/substrate.git".sp-tracing."4.0.0-dev" { inherit profileName; };
      sp_wasm_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-wasm-interface."4.0.0-dev" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-runtime-interface-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-runtime-interface-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-runtime-interface-proc-macro";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      inflector = rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; };
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-serializer."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-serializer";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-serializer";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-session."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-session";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-session";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "sp-runtime")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "scale_info" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_core" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_staking" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_std" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-staking."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-staking";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-staking";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-state-machine";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-state-machine";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
      [ "parking_lot" ]
      [ "rand" ]
      [ "sp-panic-handler" ]
      [ "std" ]
      [ "thiserror" ]
      [ "tracing" ]
    ];
    dependencies = {
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_externalities = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
      sp_panic_handler = rustPackages."git+https://github.com/paritytech/substrate.git".sp-panic-handler."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_trie = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
      trie_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trie-db."0.22.6" { inherit profileName; };
      trie_root = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trie-root."0.16.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-std";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-std";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
    ];
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-storage."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-storage";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-storage";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "impl-serde" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      impl_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.3.2" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ref_cast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ref-cast."1.0.6" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_debug_derive = buildRustPackages."git+https://github.com/paritytech/substrate.git".sp-debug-derive."4.0.0-dev" { profileName = "__noProfile"; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-tasks."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-tasks";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-tasks";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
      [ "sp-externalities" ]
      [ "std" ]
    ];
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_externalities = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_runtime_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime-interface."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-timestamp."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-timestamp";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-timestamp";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "async-trait")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "futures-timer")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "log")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "std")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections") "thiserror")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "async_trait" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "futures_timer" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "codec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_inherents" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "sp_std" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" || rootFeatures' ? "pallet-aleph" || rootFeatures' ? "pallet-elections" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-tracing."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-tracing";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-tracing";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
      [ "tracing-subscriber" ]
      [ "with-tracing" ]
    ];
    dependencies = {
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.22" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.25" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-transaction-pool."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-transaction-pool";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-transaction-pool";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_api" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph" then "sp_runtime" else null } = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-transaction-storage-proof."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-transaction-storage-proof";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-transaction-storage-proof";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "async-trait" ]
      [ "default" ]
      [ "log" ]
      [ "sp-core" ]
      [ "sp-trie" ]
      [ "std" ]
    ];
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_trie = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-trie";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-trie";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      memory_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memory-db."0.27.0" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      trie_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trie-db."0.22.6" { inherit profileName; };
      trie_root = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trie-root."0.16.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-version";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-version";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "default")
      [ "impl-serde" ]
      [ "parity-wasm" ]
      [ "serde" ]
      [ "std" ]
      [ "thiserror" ]
    ];
    dependencies = {
      impl_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.3.2" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parity_wasm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.42.2" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_version_proc_macro = buildRustPackages."git+https://github.com/paritytech/substrate.git".sp-version-proc-macro."4.0.0-dev" { profileName = "__noProfile"; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-version-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-version-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-version-proc-macro";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".sp-wasm-interface."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-wasm-interface";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "sp-wasm-interface";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
      [ "wasmi" ]
    ];
    dependencies = {
      impl_trait_for_tuples = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      wasmi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi."0.9.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spin."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "spin";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ss58-registry."1.15.0" = overridableMkRustCrate (profileName: rec {
    name = "ss58-registry";
    version = "1.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2f9799e6d412271cb2414597581128b03f3285f260ea49f5363d07df6a332b3e"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    buildDependencies = {
      inflector = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { profileName = "__noProfile"; };
      proc_macro2 = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { profileName = "__noProfile"; };
      quote = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { profileName = "__noProfile"; };
      serde = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { profileName = "__noProfile"; };
      serde_json = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { profileName = "__noProfile"; };
      unicode_xid = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "stable_deref_trait";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "static_assertions";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".statrs."0.15.0" = overridableMkRustCrate (profileName: rec {
    name = "statrs";
    version = "0.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05bdbb8e4e78216a85785a85d3ec3183144f98d0097b9281802c019bb07a6f05"; };
    dependencies = {
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      nalgebra = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.27.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".structopt."0.3.26" = overridableMkRustCrate (profileName: rec {
    name = "structopt";
    version = "0.3.26";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c6b5c64445ba8094a6ab0c3cd2ad323e07171012d9c98b0b15651daf1787a10"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      clap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."2.34.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      structopt_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".structopt-derive."0.4.18" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".structopt-derive."0.4.18" = overridableMkRustCrate (profileName: rec {
    name = "structopt-derive";
    version = "0.4.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dcb5ae327f9cc13b68763b5749770cb9e048a99bd9dfdfa58d0cf05d5f64afe0"; };
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.3" { inherit profileName; };
      proc_macro_error = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "strum";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7ac893c7d471c8a21f31cfe213ec4f6d9afeed25537c772e08ef3f005f8729e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      [ "std" ]
      [ "strum_macros" ]
    ];
    dependencies = {
      strum_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.22.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "strum_macros";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "339f799d8b549e3744c7ac7feb216383e4005d94bdb22561b3ab8f3b808ae9fb"; };
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".substrate-bip39."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "substrate-bip39";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49eee6965196b32f882dd2ee85a92b1dbead41b04e53907f269de3b0dc04733c"; };
    dependencies = {
      hmac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.11.0" { inherit profileName; };
      pbkdf2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.8.0" { inherit profileName; };
      schnorrkel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnorrkel."0.9.1" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".substrate-build-script-utils."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "substrate-build-script-utils";
    version = "3.0.0";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "substrate-build-script-utils";
      version = "3.0.0";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      platforms = rustPackages."registry+https://github.com/rust-lang/crates.io-index".platforms."2.0.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".substrate-frame-rpc-system."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "substrate-frame-rpc-system";
    version = "4.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "substrate-frame-rpc-system";
      version = "4.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      frame_system_rpc_runtime_api = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system-rpc-runtime-api."4.0.0-dev" { inherit profileName; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      jsonrpc_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core."18.0.0" { inherit profileName; };
      jsonrpc_core_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-core-client."18.0.0" { inherit profileName; };
      jsonrpc_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpc-derive."18.0.0" { profileName = "__noProfile"; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_rpc_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-rpc-api."0.10.0-dev" { inherit profileName; };
      sc_transaction_pool_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "substrate-prometheus-endpoint";
    version = "0.10.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "substrate-prometheus-endpoint";
      version = "0.10.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      async_std = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-std."1.10.0" { inherit profileName; };
      derive_more = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      hyper = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.17" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      prometheus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.0" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".substrate-test-client."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "substrate-test-client";
    version = "2.0.1";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "substrate-test-client";
      version = "2.0.1";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_client_db = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-db."0.10.0-dev" { inherit profileName; };
      sc_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; };
      sc_executor = rustPackages."git+https://github.com/paritytech/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; };
      sc_offchain = rustPackages."git+https://github.com/paritytech/substrate.git".sc-offchain."4.0.0-dev" { inherit profileName; };
      sc_service = rustPackages."git+https://github.com/paritytech/substrate.git".sc-service."0.10.0-dev" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_keyring = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keyring."4.0.0-dev" { inherit profileName; };
      sp_keystore = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keystore."0.10.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".substrate-test-runtime."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "substrate-test-runtime";
    version = "2.0.0";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "substrate-test-runtime";
      version = "2.0.0";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    features = builtins.concatLists [
      [ "default" ]
      [ "sc-service" ]
      [ "serde" ]
      [ "sp-keyring" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      frame_support = rustPackages."git+https://github.com/paritytech/substrate.git".frame-support."4.0.0-dev" { inherit profileName; };
      frame_system = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system."4.0.0-dev" { inherit profileName; };
      frame_system_rpc_runtime_api = rustPackages."git+https://github.com/paritytech/substrate.git".frame-system-rpc-runtime-api."4.0.0-dev" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      memory_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memory-db."0.27.0" { inherit profileName; };
      pallet_babe = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-babe."4.0.0-dev" { inherit profileName; };
      pallet_timestamp = rustPackages."git+https://github.com/paritytech/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      parity_util_mem = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-util-mem."0.10.2" { inherit profileName; };
      sc_service = rustPackages."git+https://github.com/paritytech/substrate.git".sc-service."0.10.0-dev" { inherit profileName; };
      scale_info = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."1.0.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_application_crypto = rustPackages."git+https://github.com/paritytech/substrate.git".sp-application-crypto."4.0.0-dev" { inherit profileName; };
      sp_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; };
      sp_consensus_aura = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; };
      sp_consensus_babe = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus-babe."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_externalities = rustPackages."git+https://github.com/paritytech/substrate.git".sp-externalities."0.10.0-dev" { inherit profileName; };
      sp_finality_grandpa = rustPackages."git+https://github.com/paritytech/substrate.git".sp-finality-grandpa."4.0.0-dev" { inherit profileName; };
      sp_inherents = rustPackages."git+https://github.com/paritytech/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; };
      sp_io = rustPackages."git+https://github.com/paritytech/substrate.git".sp-io."4.0.0-dev" { inherit profileName; };
      sp_keyring = rustPackages."git+https://github.com/paritytech/substrate.git".sp-keyring."4.0.0-dev" { inherit profileName; };
      sp_offchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-offchain."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      sp_runtime_interface = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime-interface."4.0.0-dev" { inherit profileName; };
      sp_session = rustPackages."git+https://github.com/paritytech/substrate.git".sp-session."4.0.0-dev" { inherit profileName; };
      sp_state_machine = rustPackages."git+https://github.com/paritytech/substrate.git".sp-state-machine."0.10.0-dev" { inherit profileName; };
      sp_std = rustPackages."git+https://github.com/paritytech/substrate.git".sp-std."4.0.0-dev" { inherit profileName; };
      sp_transaction_pool = rustPackages."git+https://github.com/paritytech/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; };
      sp_trie = rustPackages."git+https://github.com/paritytech/substrate.git".sp-trie."4.0.0-dev" { inherit profileName; };
      sp_version = rustPackages."git+https://github.com/paritytech/substrate.git".sp-version."4.0.0-dev" { inherit profileName; };
      trie_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trie-db."0.22.6" { inherit profileName; };
    };
    buildDependencies = {
      substrate_wasm_builder = buildRustPackages."git+https://github.com/paritytech/substrate.git".substrate-wasm-builder."5.0.0-dev" { profileName = "__noProfile"; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".substrate-test-runtime-client."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "substrate-test-runtime-client";
    version = "2.0.0";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "substrate-test-runtime-client";
      version = "2.0.0";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."2.3.1" { inherit profileName; };
      sc_block_builder = rustPackages."git+https://github.com/paritytech/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; };
      sc_client_api = rustPackages."git+https://github.com/paritytech/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; };
      sc_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; };
      sp_api = rustPackages."git+https://github.com/paritytech/substrate.git".sp-api."4.0.0-dev" { inherit profileName; };
      sp_blockchain = rustPackages."git+https://github.com/paritytech/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; };
      sp_consensus = rustPackages."git+https://github.com/paritytech/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; };
      sp_core = rustPackages."git+https://github.com/paritytech/substrate.git".sp-core."4.0.0-dev" { inherit profileName; };
      sp_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".sp-runtime."4.0.0-dev" { inherit profileName; };
      substrate_test_client = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-test-client."2.0.1" { inherit profileName; };
      substrate_test_runtime = rustPackages."git+https://github.com/paritytech/substrate.git".substrate-test-runtime."2.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".substrate-wasm-builder."4.0.0" = overridableMkRustCrate (profileName: rec {
    name = "substrate-wasm-builder";
    version = "4.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93a3d51ad6abbc408b03ea962062bfcc959b438a318d7d4bedd181e1effd0610"; };
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      atty = rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; };
      build_helper = rustPackages."registry+https://github.com/rust-lang/crates.io-index".build-helper."0.1.1" { inherit profileName; };
      cargo_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.12.3" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { inherit profileName; };
      wasm_gc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-gc-api."0.1.11" { inherit profileName; };
    };
  });
  
  "git+https://github.com/paritytech/substrate.git".substrate-wasm-builder."5.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "substrate-wasm-builder";
    version = "5.0.0-dev";
    registry = "git+https://github.com/paritytech/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/paritytech/substrate.git;
      name = "substrate-wasm-builder";
      version = "5.0.0-dev";
      rev = "afb74de23dfe2994e7ce38c0870efb9734e966f7";
      ref = "polkadot-v0.9.13";};
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      build_helper = rustPackages."registry+https://github.com/rust-lang/crates.io-index".build-helper."0.1.1" { inherit profileName; };
      cargo_metadata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.14.2" { inherit profileName; };
      sp_maybe_compressed_blob = rustPackages."git+https://github.com/paritytech/substrate.git".sp-maybe-compressed-blob."4.1.0-dev" { inherit profileName; };
      tempfile = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { inherit profileName; };
      wasm_gc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-gc-api."0.1.11" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" = overridableMkRustCrate (profileName: rec {
    name = "subtle";
    version = "2.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6bdef32e8150c2a081110b42772ffe7d7c9032b606bc226c8260fd97e0976601"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "i128")
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.86";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a65b3f4ffa0092e9887669db0eae07941f023991ab58ea44da8fe8e2d511c6b"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "fold" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      [ "visit" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" = overridableMkRustCrate (profileName: rec {
    name = "synstructure";
    version = "0.12.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "tap";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "target-lexicon";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d7fa7e55043acb85fca6b3c01485a2eeb6b69c5d21002e273c79e465f43b7ac1"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.3.0" = overridableMkRustCrate (profileName: rec {
    name = "tempfile";
    version = "3.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.7.0" { inherit profileName; };
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" { inherit profileName; };
      remove_dir_all = rustPackages."registry+https://github.com/rust-lang/crates.io-index".remove_dir_all."0.5.3" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".termcolor."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "termcolor";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".textwrap."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "textwrap";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060"; };
    dependencies = {
      unicode_width = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "854babe52e4df1653706b98fcfc05843010039b406875930a70e4d9644e5c417"; };
    dependencies = {
      thiserror_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.30" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.30" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa32fd3f627f367fe16f893e2597ae3c05020f8bba2666a4e6ea73d377e5714b"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" = overridableMkRustCrate (profileName: rec {
    name = "thread_local";
    version = "1.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180"; };
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "threadpool";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa"; };
    dependencies = {
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time."0.1.44" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.1.44";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6db9e6914ab8b1ae1c260a4ae7a49b6c5611b40328a735b21862567685e73255"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.0+wasi-snapshot-preview1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiny-bip39."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "tiny-bip39";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffc59cb9dfc85bb312c3a78fd6aa8a8582e310b0fa885d5bb877f6dcc601839d"; };
    features = builtins.concatLists [
      [ "chinese-simplified" ]
      [ "chinese-traditional" ]
      [ "default" ]
      [ "french" ]
      [ "italian" ]
      [ "japanese" ]
      [ "korean" ]
      [ "spanish" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" { inherit profileName; };
      hmac = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.8.1" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      pbkdf2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.4.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      unicode_normalization = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.19" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiny-keccak."2.0.2" = overridableMkRustCrate (profileName: rec {
    name = "tiny-keccak";
    version = "2.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c9d3793400a45f954c52e73d068316d76b6f4e36977e3fcebb13a2721e80237"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "keccak" ]
    ];
    dependencies = {
      crunchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c1c1d5a42b6245520c249549ec267180beaffcc0615401ac8e31853d4b6d8d2"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "tinyvec_macros" ]
    ];
    dependencies = {
      tinyvec_macros = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio";
    version = "1.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2af73ac49756f3f7c01172e34a23e5d0216f6c32333757c2c61feb2bbff5a5ee"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "bytes")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "io-util")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "libc")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "macros")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "memchr")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "mio")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "net")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "num_cpus")
      (lib.optional (rootFeatures' ? "aleph-node") "once_cell")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "rt")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "rt-multi-thread")
      (lib.optional (rootFeatures' ? "aleph-node") "signal")
      (lib.optional (rootFeatures' ? "aleph-node") "signal-hook-registry")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "socket2")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "sync")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "time")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "tokio-macros")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "winapi")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "bytes" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      ${ if (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") && hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "memchr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "num_cpus" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.9.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "pin_project_lite" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" && hostPlatform.isUnix then "signal_hook_registry" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "socket2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.4" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "tokio_macros" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-macros."1.7.0" { profileName = "__noProfile"; };
      ${ if (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") && hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-macros."1.7.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-macros";
    version = "1.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b557f72f448c511a979e2564e55d74e6c4432fc96ff4f6241bc6bded342643b7"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-rustls";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc6844de72e57df1980054b38be3a9f4702aba4858be64dd700181a8a6d0e1b6"; };
    dependencies = {
      rustls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.1" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
      webpki = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.8" = overridableMkRustCrate (profileName: rec {
    name = "tokio-stream";
    version = "0.1.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50145484efff8818b5ccd256697f36863f587da82cf8b409c53adf1e840798e3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "net" ]
      [ "time" ]
    ];
    dependencies = {
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.6.9" = overridableMkRustCrate (profileName: rec {
    name = "tokio-util";
    version = "0.6.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e99e1983e5d376cd8eb4b66604d2e99e79f5bd988c3055891dcd8c9e2604cc0"; };
    features = builtins.concatLists [
      [ "codec" ]
      [ "default" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.21" { inherit profileName; };
      futures_sink = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.21" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      tokio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.17.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.5.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a31142970826733df8241ef35dc040ef98c679ab14d7c3e54d827099b3acecaa"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "tower-service";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "360dfd1d6d30e05fda32ace2c8c70e9c0a9da713275777f5a4dbb8a1893930c6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6c650a8ef0cd2dd93736f033d21cbd1224c5a967aa0c258d00fcf7dafef9b9f"; };
    features = builtins.concatLists [
      [ "attributes" ]
      [ "default" ]
      [ "std" ]
      [ "tracing-attributes" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.8" { inherit profileName; };
      tracing_attributes = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.19" { profileName = "__noProfile"; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.22" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8276d9a4a3a558d7b7ad5303ad50b53d58264641b82914b7ada36bd762e7a716"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.22" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03cfcb51380632a72d3111cb8d3447a8d908e577d31beeac006f836383d29a23"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "lazy_static" ]
      [ "std" ]
      [ "valuable" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if false then "valuable" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-futures."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "tracing-futures";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "pin-project" ]
      [ "std" ]
      [ "std-future" ]
    ];
    dependencies = {
      pin_project = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.0.10" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "tracing-log";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a6923477a48e41c1951f1999ef8bb5a3023eb723ceadafe78ffb65dc366761e3"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "log-tracer" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "trace-logger")
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.22" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "tracing-serde";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc6b213177105856957181934e4920de57730fc69bf42c37ee5bb664d406d9e1"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.22" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.25" = overridableMkRustCrate (profileName: rec {
    name = "tracing-subscriber";
    version = "0.2.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e0d2eaa99c3c2e41547cfa109e910a68ea03823cccad4a0525dcbc9b01e8c71"; };
    features = builtins.concatLists [
      [ "ansi" ]
      [ "ansi_term" ]
      [ "chrono" ]
      [ "default" ]
      [ "env-filter" ]
      [ "fmt" ]
      [ "json" ]
      [ "lazy_static" ]
      [ "matchers" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "parking_lot")
      [ "regex" ]
      [ "registry" ]
      [ "serde" ]
      [ "serde_json" ]
      [ "sharded-slab" ]
      [ "smallvec" ]
      [ "thread_local" ]
      [ "tracing" ]
      [ "tracing-log" ]
      [ "tracing-serde" ]
    ];
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      matchers = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" { inherit profileName; };
      ${ if rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.79" { inherit profileName; };
      sharded_slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.4" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.4" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.31" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.22" { inherit profileName; };
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.2" { inherit profileName; };
      tracing_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trie-db."0.22.6" = overridableMkRustCrate (profileName: rec {
    name = "trie-db";
    version = "0.22.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9eac131e334e81b6b3be07399482042838adcd7957aa0010231d0813e39e02fa"; };
    features = builtins.concatLists [
      [ "rustc-hex" ]
      [ "std" ]
    ];
    dependencies = {
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rustc_hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hex."2.1.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trie-root."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "trie-root";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "652931506d2c1244d7217a70b99f56718a7b4161b37f04e7cd868072a99f68cd"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      hash_db = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trust-dns-proto."0.20.4" = overridableMkRustCrate (profileName: rec {
    name = "trust-dns-proto";
    version = "0.20.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca94d4e9feb6a181c690c4040d7a24ef34018d8313ac5044a61d21222ae24e31"; };
    dependencies = {
      async_trait = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.52" { profileName = "__noProfile"; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      data_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.3.2" { inherit profileName; };
      enum_as_inner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-as-inner."0.3.3" { profileName = "__noProfile"; };
      futures_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.21" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.2.3" { inherit profileName; };
      ipnet = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.3.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      tinyvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.5.1" { inherit profileName; };
      url = rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trust-dns-resolver."0.20.4" = overridableMkRustCrate (profileName: rec {
    name = "trust-dns-resolver";
    version = "0.20.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ecae383baad9995efaa34ce8e57d12c3f305e545887472a492b838f4b5cfb77a"; };
    features = builtins.concatLists [
      [ "ipconfig" ]
      [ "resolv-conf" ]
      [ "system-config" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
      ${ if hostPlatform.isWindows then "ipconfig" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipconfig."0.2.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      lru_cache = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      resolv_conf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".resolv-conf."0.7.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.8.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      trust_dns_proto = rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-proto."0.20.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "try-lock";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59547bce71d9c38b83d9c0e92b6066c4253371f15005def0c30d9657f50c7642"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tt-call."1.0.8" = overridableMkRustCrate (profileName: rec {
    name = "tt-call";
    version = "1.0.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e66dcbec4290c69dd03c57e76c2469ea5c7ce109c6dd4351c13055cf71ea055"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.2" = overridableMkRustCrate (profileName: rec {
    name = "twox-hash";
    version = "1.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ee73e6e4924fe940354b8d4d98cad5231175d615cd855b758adc658c0aac6a0"; };
    features = builtins.concatLists [
      [ "rand" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.15.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.15.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dcf81ac59edc17cc8697ff311e8f5ef2d99fcbd9817b34cec66f90b6c3dfd987"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ucd-trie."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "ucd-trie";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".uint."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "uint";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12f03af7ccf01dd611cc450a0d10dbc9b745770d096473e2faf0ca6e2d66d1e0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "default")
      [ "std" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      crunchy = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; };
      hex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicase."2.6.0" = overridableMkRustCrate (profileName: rec {
    name = "unicase";
    version = "2.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6"; };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bidi";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a01404663e3db436ed2746d9fefef640d868edae3cceb81c3b8d5732fda678f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "unicode-normalization";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d54590932941a9e9266f0832deed84ebe1bf2e4c9e4a3554d393d18f5e854bf9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      tinyvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "unicode-segmentation";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e8820f5d777f6224dc4be3632222971ac30164d4a258d595640799554ebfd99"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "unicode-width";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3ed742d4ea2bd1176e236172c8429aaf54486e7ac098db29ffe6529e0ce50973"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "unicode-xid";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "universal-hash";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f214e8f697e925001e66ec2c6e37a4ef93f0f78c2eed7814394e10c62025b05"; };
    dependencies = {
      generic_array = rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.5" { inherit profileName; };
      subtle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "unsigned-varint";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7fdeedbf205afadfe39ae559b75c3240f24e257d0ca27e85f85cb82aa19ac35"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "unsigned-varint";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "35581ff83d4101e58b582e607120c7f5ffb17e632a980b1f38334d76b36908b2"; };
    features = builtins.concatLists [
      [ "asynchronous-codec" ]
      [ "asynchronous_codec" ]
      [ "bytes" ]
      [ "futures" ]
      [ "futures-io" ]
      [ "futures-util" ]
      [ "std" ]
    ];
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.5.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "unsigned-varint";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d86a8dc7f45e4c1b0d30e43038c38f274e77af056aa5f74b93c2cf9eb3c1c836"; };
    features = builtins.concatLists [
      [ "asynchronous-codec" ]
      [ "asynchronous_codec" ]
      [ "bytes" ]
      [ "futures" ]
      [ "futures-io" ]
      [ "futures-util" ]
      [ "std" ]
    ];
    dependencies = {
      asynchronous_codec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.0" { inherit profileName; };
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.21" { inherit profileName; };
      futures_util = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "untrusted";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."1.7.2" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "1.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd4e7c0d531266369519a4aa4f399d748bd37043b00bde1e4ff1f60a120b355a"; };
    dependencies = {
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.1.5" { inherit profileName; };
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."1.0.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."2.2.2" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "2.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a507c383b2d33b5fc35d1861e77e6b383d158b2da5e14fe51b83dfedf6fd578c"; };
    dependencies = {
      form_urlencoded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.0.1" { inherit profileName; };
      idna = rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.2.3" { inherit profileName; };
      matches = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.9" { inherit profileName; };
      percent_encoding = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "valuable";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".value-bag."1.0.0-alpha.8" = overridableMkRustCrate (profileName: rec {
    name = "value-bag";
    version = "1.0.0-alpha.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79923f7731dc61ebfba3633098bf3ac533bbd35ccd8c57e7088d9a5eebe0263f"; };
    dependencies = {
      ctor = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ctor."0.1.21" { profileName = "__noProfile"; };
    };
    buildDependencies = {
      rustc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "vcpkg";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "vec_map";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "void";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "waker-fn";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d5b2c62b4012a3e1eca5a7e077d13b3bf498c4073e33ccd58626607748ceeca"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56"; };
    dependencies = {
      same_file = rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".want."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "want";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      try_lock = rustPackages."registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.9.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.10.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a143597ca7c7793eff794def352d41792a93c481eb1042423ff7ff72ba2c31f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.79";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "25f1af7423d8588a3d840681122e72e6a24ddbcb3f0ec385cac0d12d24256c06"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "spans" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      wasm_bindgen_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.79" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.79" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.79";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b21c0df030f5a177f3cba22e9bc4322695ec43e7257d865302900290bcdedca"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.9.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.29" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2eb6ec270a31b1d3c7e266b999739109abce8b6c87e4b31fcfcd788b65267395"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.56" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" { inherit profileName; };
      ${ if builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.56" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.79" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.79";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2f4203d69e40a52ee523b2529a773d5ffc1dc0071801c87b3d270b471b80ed01"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      wasm_bindgen_macro_support = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.79" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.79";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfa8a30d46208db204854cadbb5d4baf5fcf8071ba5bf48190c3e59937962ebc"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
      wasm_bindgen_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.79" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.79" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.79";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d958d035c4438e28c70e4321a2911302f10135ce78a9c7834c0cab4123d06a2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-gc-api."0.1.11" = overridableMkRustCrate (profileName: rec {
    name = "wasm-gc-api";
    version = "0.1.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d0c32691b6c7e6c14e7f8fd55361a9088b507aa49620fcd06c09b3a1082186b9"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parity_wasm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.32.0" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "wasm-timer";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be0ecb0db480561e9a7642b5d3e4187c128914e58aa84330b9493e3eb68c5e7f"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.56" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      pin_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.29" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.56" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmi."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmi";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca00c5147c319a8ec91ec1a0edbec31e566ce2c9cc93b3f9bb86a9efd0eb795d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "libc" ]
      [ "std" ]
    ];
    dependencies = {
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      memory_units = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memory_units."0.3.0" { inherit profileName; };
      num_rational = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.2.4" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      parity_wasm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.42.2" { inherit profileName; };
      validation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi-validation."0.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmi-validation."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmi-validation";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "165343ecd6c018fc09ebcae280752702c9a2ef3e6f8d02f1cfcbdb53ef6d7937"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      parity_wasm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.42.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.81.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmparser";
    version = "0.81.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "98930446519f63d00a836efdc22f67766ceae8dbcc1571379f2bcabc6b2b9abc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "311d06b0c49346d1fbf48a17052e844036b95a7753c1afb34e8c0af3f6b5bb13"; };
    features = builtins.concatLists [
      [ "cache" ]
      [ "cranelift" ]
      [ "jitdump" ]
      [ "parallel-compilation" ]
      [ "rayon" ]
      [ "wasmtime-cache" ]
      [ "wasmtime-cranelift" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" { inherit profileName; };
      backtrace = rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.64" { inherit profileName; };
      bincode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      cpp_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpp_demangle."0.3.5" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.27.1" { inherit profileName; };
      paste = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.6" { profileName = "__noProfile"; };
      psm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".psm."0.1.17" { inherit profileName; };
      rayon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.5.1" { inherit profileName; };
      region = rustPackages."registry+https://github.com/rust-lang/crates.io-index".region."2.2.0" { inherit profileName; };
      rustc_demangle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.21" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      wasmparser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.81.0" { inherit profileName; };
      wasmtime_cache = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-cache."0.31.0" { inherit profileName; };
      wasmtime_cranelift = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-cranelift."0.31.0" { inherit profileName; };
      wasmtime_environ = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."0.31.0" { inherit profileName; };
      wasmtime_jit = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-jit."0.31.0" { inherit profileName; };
      wasmtime_runtime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-runtime."0.31.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-cache."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-cache";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "36147930a4995137dc096e5b17a573b446799be2bbaea433e821ce6a80abe2c5"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" { inherit profileName; };
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      bincode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; };
      directories_next = rustPackages."registry+https://github.com/rust-lang/crates.io-index".directories-next."2.0.0" { inherit profileName; };
      file_per_thread_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".file-per-thread-logger."0.1.5" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "windows") then "rsix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rsix."0.23.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      sha2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      zstd = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd."0.9.2+zstd.1.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-cranelift."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-cranelift";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ab3083a47e1ede38aac06a1d9831640d673f9aeda0b82a64e4ce002f3432e2e7"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" { inherit profileName; };
      cranelift_codegen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.78.0" { inherit profileName; };
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.78.0" { inherit profileName; };
      cranelift_frontend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-frontend."0.78.0" { inherit profileName; };
      cranelift_native = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-native."0.78.0" { inherit profileName; };
      cranelift_wasm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-wasm."0.78.0" { inherit profileName; };
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      more_asserts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.27.1" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      wasmparser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.81.0" { inherit profileName; };
      wasmtime_environ = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."0.31.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-environ";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1c2d194b655321053bc4111a1aa4ead552655c8a17d17264bc97766e70073510"; };
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.78.0" { inherit profileName; };
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      more_asserts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.27.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      wasmparser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.81.0" { inherit profileName; };
      wasmtime_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-types."0.31.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-jit."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-jit";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "864ac8dfe4ce310ac59f16fdbd560c257389cb009ee5d030ac6e30523b023d11"; };
    features = builtins.concatLists [
      [ "jitdump" ]
      [ "rsix" ]
    ];
    dependencies = {
      addr2line = rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.16.0" { inherit profileName; };
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" { inherit profileName; };
      bincode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      gimli = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.25.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      more_asserts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" { inherit profileName; };
      object = rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.27.1" { inherit profileName; };
      region = rustPackages."registry+https://github.com/rust-lang/crates.io-index".region."2.2.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" then "rsix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rsix."0.23.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      target_lexicon = rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      wasmparser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.81.0" { inherit profileName; };
      wasmtime_environ = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."0.31.0" { inherit profileName; };
      wasmtime_runtime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-runtime."0.31.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-runtime."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-runtime";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ab97da813a26b98c9abfd3b0c2d99e42f6b78b749c0646344e2e262d212d8c8b"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.55" { inherit profileName; };
      backtrace = rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.64" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.8.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; };
      memoffset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; };
      more_asserts = rustPackages."registry+https://github.com/rust-lang/crates.io-index".more-asserts."0.2.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      region = rustPackages."registry+https://github.com/rust-lang/crates.io-index".region."2.2.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "rsix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rsix."0.23.9" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      wasmtime_environ = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."0.31.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-types."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-types";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ff94409cc3557bfbbcce6b14520ccd6bd3727e965c0fe68d63ef2c185bf379c6"; };
    dependencies = {
      cranelift_entity = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.78.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.136" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.30" { inherit profileName; };
      wasmparser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.81.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.56" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.56";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c060b319f29dd25724f09a2ba1418f142f539b2be99fbf4d2d5a8f7330afb8eb"; };
    features = builtins.concatLists [
      [ "Crypto" ]
      [ "Event" ]
      [ "EventTarget" ]
      [ "MessageEvent" ]
      [ "Performance" ]
      [ "Window" ]
      [ "Worker" ]
    ];
    dependencies = {
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.56" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.79" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" = overridableMkRustCrate (profileName: rec {
    name = "webpki";
    version = "0.21.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8e38c0608262c46d4a56202ebabdeb094cef7e560ca7a226c6bf055188aa4ea"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "trust_anchor_util" ]
    ];
    dependencies = {
      ring = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; };
      untrusted = rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.21.1" = overridableMkRustCrate (profileName: rec {
    name = "webpki-roots";
    version = "0.21.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aabe153544e473b775453675851ecc86863d2a81d786d741f6b76778f2a48940"; };
    dependencies = {
      webpki = rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wepoll-ffi."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "wepoll-ffi";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d743fdedc5c64377b5fc2bc036b01c7fd642205a0d96356034ae3404d49eb7fb"; };
    features = builtins.concatLists [
      [ "null-overlapped-wakeups-patch" ]
    ];
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".which."4.2.4" = overridableMkRustCrate (profileName: rec {
    name = "which";
    version = "4.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2a5a7e487e921cf220206864a94a89b6c6905bfc19f1057fa26a4cb360e5c1d2"; };
    dependencies = {
      either = rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.6.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".widestring."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "widestring";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c168940144dd21fd8046987c16a46a33d5fc84eec29ef9dcddc2ac9e31526b7c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "accctrl")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "aclapi")
      (lib.optional (rootFeatures' ? "aleph-node") "basetsd")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "cfg")
      [ "consoleapi" ]
      [ "errhandlingapi" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "evntrace")
      [ "fileapi" ]
      [ "handleapi" ]
      [ "heapapi" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "impl-debug")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "impl-default")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "in6addr")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "inaddr")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "ioapiset")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "knownfolders")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "ktmw32")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "libloaderapi")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "lmcons")
      (lib.optional (rootFeatures' ? "aleph-node") "memoryapi")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "minschannel")
      [ "minwinbase" ]
      [ "minwindef" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "mswsock")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "namedpipeapi")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "netioapi")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "ntdef")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "ntsecapi")
      [ "ntstatus" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "objbase")
      [ "processenv" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "processthreadsapi")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "profileapi")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "schannel")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "securitybaseapi")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "shlobj")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "sspi")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "synchapi")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "sysinfoapi")
      [ "timezoneapi" ]
      [ "winbase" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "aleph-runtime" || rootFeatures' ? "finality-aleph") "wincon")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "wincrypt")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "windef")
      [ "winerror" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "winioctl")
      [ "winnt" ]
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "winreg")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "winsock2")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "ws2def")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "ws2ipdef")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "ws2tcpip")
      (lib.optional (rootFeatures' ? "aleph-node" || rootFeatures' ? "finality-aleph") "wtypesbase")
    ];
    dependencies = {
      ${ if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; };
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-build."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "winapi-build";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winreg."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "winreg";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ws2_32-sys."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "ws2_32-sys";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
    };
    buildDependencies = {
      build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-build."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wyz."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "wyz";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85e60b0d1b5f99db2556934e21937020776a5d31520bf169e851ac44e6420214"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "x25519-dalek";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a0c105152107e3b96f6a00a65e86ce82d9b125230e1c4302940eca58ff71f4f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      curve25519_dalek = rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; };
      zeroize = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yamux."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "yamux";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7d9028f208dd5e63c614be69f115c1b53cacc1111437d4c765185856666c107"; };
    dependencies = {
      futures = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.21" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      nohash_hasher = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; };
      static_assertions = rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zeroize."1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "zeroize";
    version = "1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c88870063c39ee00ec285a2f8d6a966e5b6fb2becc4e8dac77ed0d370ed6006"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "zeroize_derive" ]
    ];
    dependencies = {
      zeroize_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.3.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "zeroize_derive";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f8f187641dad4f680d25c4bfc4225b418165984179f26ca76ec4fb6441d3a17"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.36" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.15" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.86" { inherit profileName; };
      synstructure = rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd."0.9.2+zstd.1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "zstd";
    version = "0.9.2+zstd.1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2390ea1bf6c038c39674f22d95f0564725fc06034a47129179810b2fc58caa54"; };
    dependencies = {
      zstd_safe = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-safe."4.1.3+zstd.1.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd-safe."4.1.3+zstd.1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "zstd-safe";
    version = "4.1.3+zstd.1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e99d81b99fb3c2c2c794e3fe56c305c63d5173a16a46b5850b07c935ffc7db79"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
      zstd_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-sys."1.6.2+zstd.1.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd-sys."1.6.2+zstd.1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "zstd-sys";
    version = "1.6.2+zstd.1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2daf2f248d9ea44454bfcb2516534e8b8ad2fc91bf818a1885495fc42bc8ac9f"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.119" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.73" { profileName = "__noProfile"; };
    };
  });
  
}

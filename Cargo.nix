# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "aggregator/default"
    "aleph-node/default"
    "aleph-runtime/default"
    "pallet-aleph/default"
    "primitives/default"
    "pallet-committee-management/default"
    "pallets-support/default"
    "pallet-elections/default"
    "finality-aleph/default"
    "network-clique/default"
    "rate-limiter/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  cargoUnstableFlags ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
  ignoreLockHash,
}:
let
  nixifiedLockHash = "7bdfe6cbccb930cc0e0237f8a5dd8179d6695d0b5a76aa0e146400257adc82f7";
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
  currentLockHash = builtins.hashFile "sha256" (workspaceSrc + /Cargo.lock);
  lockHashIgnored = if ignoreLockHash
                  then builtins.trace "Ignoring lock hash" ignoreLockHash
                  else ignoreLockHash;
in if !lockHashIgnored && (nixifiedLockHash != currentLockHash) then
  throw ("Cargo.nix ${nixifiedLockHash} is out of sync with Cargo.lock ${currentLockHash}")
else let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
    production = builtins.fromTOML "codegen-units = 1\ninherits = \"release\"\nlto = true\n";
    release = builtins.fromTOML "panic = \"unwind\"\n";
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts cargoUnstableFlags rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.11.0";
  workspace = {
    aggregator = rustPackages.unknown.aggregator."0.4.0";
    aleph-node = rustPackages.unknown.aleph-node."0.12.1";
    aleph-runtime = rustPackages.unknown.aleph-runtime."0.12.0";
    pallet-aleph = rustPackages.unknown.pallet-aleph."0.6.0";
    primitives = rustPackages.unknown.primitives."0.7.0";
    pallet-committee-management = rustPackages.unknown.pallet-committee-management."0.2.0";
    pallets-support = rustPackages.unknown.pallets-support."0.1.4";
    pallet-elections = rustPackages.unknown.pallet-elections."0.6.0";
    finality-aleph = rustPackages.unknown.finality-aleph."0.8.0";
    network-clique = rustPackages.unknown.network-clique."0.5.0";
    rate-limiter = rustPackages.unknown.rate-limiter."0.1.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" = overridableMkRustCrate (profileName: rec {
    name = "Inflector";
    version = "0.11.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "heavyweight" ]
      [ "lazy_static" ]
      [ "regex" ]
    ];
    dependencies = {
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97"; };
    dependencies = {
      gimli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.27.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "addr2line";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb"; };
    dependencies = {
      gimli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.28.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "adler";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aead."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "aead";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fc95d1bdb8e6666b2b217308eeeb09f2d6728d104be3e31916cc74d15420331"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aead."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "aead";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b613b8e1e3cf911a086f53f03bf286f52fd7a7258e4fa606f0ef220d39d8877"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "rand_core" ]
      [ "std" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aead."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "aead";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "rand_core" ]
    ];
    dependencies = {
      crypto_common = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "aes";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "884391ef1066acaa41e766ba8f596341b96e93ce34f9a43e7d24bf0a0eaf0561"; };
    dependencies = {
      ${ if !(builtins.elem "aes" hostPlatformFeatures && builtins.elem "sse2" hostPlatformFeatures && (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686")) then "aes_soft" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes-soft."0.6.4" { inherit profileName; }).out;
      ${ if builtins.elem "aes" hostPlatformFeatures && builtins.elem "sse2" hostPlatformFeatures && (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686") then "aesni" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aesni."0.10.0" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.2.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes."0.7.5" = overridableMkRustCrate (profileName: rec {
    name = "aes";
    version = "0.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e8b47f52ea9bae42228d07ec09eb676433d7c4ed1ebdf0f1d1c29ed446f1ab8"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "aes";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac1f845298e95f983ff1944b728ae08b8cebab80d684f0a832ed0fc74dfa27e2"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "aes-gcm";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df5f85a83a7d8b0442b6aa7b504b8212c1733da07b98aae43d4bc21b2cb3cdf6"; };
    features = builtins.concatLists [
      [ "aes" ]
      [ "alloc" ]
      [ "default" ]
    ];
    dependencies = {
      aead = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.4.3" { inherit profileName; }).out;
      aes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.7.5" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; }).out;
      ctr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ctr."0.8.0" { inherit profileName; }).out;
      ghash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ghash."0.4.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.10.3" = overridableMkRustCrate (profileName: rec {
    name = "aes-gcm";
    version = "0.10.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "831010a0f742e1209b3bcea8fab6a8e149051ba6099432c8cb2cc117dec3ead1"; };
    features = builtins.concatLists [
      [ "aes" ]
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "rand_core" ]
    ];
    dependencies = {
      aead = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.5.2" { inherit profileName; }).out;
      aes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.8.3" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      ctr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ctr."0.9.2" { inherit profileName; }).out;
      ghash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ghash."0.5.0" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aes-soft."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "aes-soft";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be14c7498ea50828a38d0e24a765ed2effe92a705885b57d029cd67d45744072"; };
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.2.5" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aesni."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "aesni";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea2e11f5e94c2f7d386164cc2aa1f97823fed6f259e486940a71c174dd01b0ce"; };
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.2.5" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/aleph-node.git".aggregator."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "aggregator";
    version = "0.2.1";
    registry = "git+https://github.com/Cardinal-Cryptography/aleph-node.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/aleph-node.git;
      name = "aggregator";
      version = "0.2.1";
      rev = "95a6b02ccd2295f9d4c21ece2b0721a4b99e1ee5";};
    dependencies = {
      aleph_bft_rmc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-rmc."0.5.2" { inherit profileName; }).out;
      aleph_bft_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-types."0.7.2" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".aggregator."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "aggregator";
    version = "0.4.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      aleph_bft_rmc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-rmc."0.6.1" { inherit profileName; }).out;
      aleph_bft_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-types."0.8.1" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.7" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.7.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a824f2aa7e75a0c98c5a504fceb80649e9c35265d44525b5f94de4771a395cd"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "getrandom" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; }).out;
      ${ if !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91429305e9f0a25f6205c5b8e0d2db09e0708a7a6df0f42212bb56c32c8ac97a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "getrandom" ]
      [ "runtime-rng" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; }).out;
      ${ if !((hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && hostPlatform.parsed.kernel.name == "none") then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      zerocopy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.25" { inherit profileName; }).out;
    };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "perf-literal" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft."0.19.3" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft";
    version = "0.19.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9cc671f15e05082b6ae350d40d83964fa92e26ead5d1b739f83ce130bd733e2d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "initial_unit_collection" ]
    ];
    dependencies = {
      aleph_bft_rmc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-rmc."0.5.2" { inherit profileName; }).out;
      aleph_bft_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-types."0.7.2" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      derivative = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft."0.20.5" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft";
    version = "0.20.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a3e70117d5481f1194ceafcf71d027377717d6fc738fc10a1433f412bb5bdc4d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "initial_unit_collection" ]
    ];
    dependencies = {
      aleph_bft_rmc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-rmc."0.6.1" { inherit profileName; }).out;
      aleph_bft_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-types."0.8.1" { inherit profileName; }).out;
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      derivative = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft-crypto."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft-crypto";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcc63efe80dacbfe53bc008aab6a24e864142198355b1a9a4f31543246e3d63f"; };
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bit_vec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; }).out;
      derive_more = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft-crypto."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft-crypto";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39ef65bb0b342d411e32789cdf722cbf163667e1656577ef356221c5aebf75c9"; };
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bit_vec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; }).out;
      derive_more = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft-mock."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft-mock";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e9a27e8a6a071f4707b2a8f67034d6f55bec43dbf6f9d91782fb386859f8625b"; };
    dependencies = {
      aleph_bft_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-types."0.8.1" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft-rmc."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft-rmc";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38c317cd1a7c5b9208fd02c8f33ea7a89b55be1181ccc42da45e12dbefb66209"; };
    dependencies = {
      aleph_bft_crypto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-crypto."0.5.2" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft-rmc."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft-rmc";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1a34546c3d75df640c0224294be256fd0c17ed3f7191367124ece4d93753061"; };
    dependencies = {
      aleph_bft_crypto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-crypto."0.6.0" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft-types."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft-types";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14c0995c7a6709cec7dc62ef8316426442ea4756b34182c21d6549a1c6bfb904"; };
    dependencies = {
      aleph_bft_crypto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-crypto."0.5.2" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aleph-bft-types."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "aleph-bft-types";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4b39893b3cb3670ade7d8fe3cb807f9b032cd2a2937df88a64b53ad927fc1510"; };
    dependencies = {
      aleph_bft_crypto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-crypto."0.6.0" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
    };
  });
  
  "unknown".aleph-node."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "aleph-node";
    version = "0.12.1";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/default") "default")
      (lib.optional (rootFeatures' ? "aleph-node/enable_treasury_proposals") "enable_treasury_proposals")
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "frame-benchmarking")
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "frame-benchmarking-cli")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime") "liminal")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks") "liminal-runtime-benchmarks")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime") "liminal-try-runtime")
      (lib.optional (rootFeatures' ? "aleph-node/only_legacy") "only_legacy")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "runtime-benchmarks")
      (lib.optional (rootFeatures' ? "aleph-node/short_session") "short_session")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime") "try-runtime")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "try-runtime-cli")
    ];
    dependencies = {
      aleph_runtime = (rustPackages."unknown".aleph-runtime."0.12.0" { inherit profileName; }).out;
      finality_aleph = (rustPackages."unknown".finality-aleph."0.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "frame_benchmarking" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "frame_benchmarking_cli" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking-cli."4.0.0-dev" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      hex_literal = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".hex-literal."0.3.4" { profileName = "__noProfile"; }).out;
      jsonrpsee = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      libp2p = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.50.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      pallet_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-staking."4.0.0-dev" { inherit profileName; }).out;
      pallet_transaction_payment_rpc = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-transaction-payment-rpc."4.0.0-dev" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      primitives = (rustPackages."unknown".primitives."0.7.0" { inherit profileName; }).out;
      sc_basic_authorship = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-basic-authorship."0.10.0-dev" { inherit profileName; }).out;
      sc_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; }).out;
      sc_chain_spec = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-chain-spec."4.0.0-dev" { inherit profileName; }).out;
      sc_cli = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-cli."0.10.0-dev" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; }).out;
      sc_consensus_aura = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus-aura."0.10.0-dev" { inherit profileName; }).out;
      sc_consensus_slots = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus-slots."0.10.0-dev" { inherit profileName; }).out;
      sc_executor = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; }).out;
      sc_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-keystore."4.0.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sc_network_sync = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-sync."0.10.0-dev" { inherit profileName; }).out;
      sc_rpc = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc."4.0.0-dev" { inherit profileName; }).out;
      sc_rpc_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc-api."0.10.0-dev" { inherit profileName; }).out;
      sc_service = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-service."0.10.0-dev" { inherit profileName; }).out;
      sc_telemetry = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; }).out;
      sc_transaction_pool = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool."4.0.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_consensus_aura = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; }).out;
      sp_transaction_pool = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; }).out;
      substrate_frame_rpc_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-frame-rpc-system."4.0.0-dev" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "try_runtime_cli" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".try-runtime-cli."0.10.0-dev" { inherit profileName; }).out;
    };
    buildDependencies = {
      substrate_build_script_utils = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-build-script-utils."3.0.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "unknown".aleph-runtime."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "aleph-runtime";
    version = "0.12.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "baby-liminal-extension")
      [ "default" ]
      (lib.optional (rootFeatures' ? "aleph-node/enable_treasury_proposals" || rootFeatures' ? "aleph-runtime/enable_treasury_proposals") "enable_treasury_proposals")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" || rootFeatures' ? "aleph-runtime/frame-benchmarking" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/runtime-benchmarks") "frame-benchmarking")
      [ "frame-try-runtime" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime") "liminal")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks") "liminal-runtime-benchmarks")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "liminal-std")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime") "liminal-try-runtime")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "pallet-baby-liminal")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/runtime-benchmarks") "runtime-benchmarks")
      (lib.optional (rootFeatures' ? "aleph-node/short_session" || rootFeatures' ? "aleph-runtime/short_session") "short_session")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "baby_liminal_extension" else null } = (rustPackages."unknown".baby-liminal-extension."0.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" || rootFeatures' ? "aleph-runtime/frame-benchmarking" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/runtime-benchmarks" then "frame_benchmarking" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_executive = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-executive."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      frame_system_rpc_runtime_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system-rpc-runtime-api."4.0.0-dev" { inherit profileName; }).out;
      frame_try_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-try-runtime."0.10.0-dev" { inherit profileName; }).out;
      pallet_aleph = (rustPackages."unknown".pallet-aleph."0.6.0" { inherit profileName; }).out;
      pallet_aura = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-aura."4.0.0-dev" { inherit profileName; }).out;
      pallet_authorship = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-authorship."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "pallet_baby_liminal" else null } = (rustPackages."unknown".pallet-baby-liminal."0.1.0" { inherit profileName; }).out;
      pallet_balances = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-balances."4.0.0-dev" { inherit profileName; }).out;
      pallet_committee_management = (rustPackages."unknown".pallet-committee-management."0.2.0" { inherit profileName; }).out;
      pallet_contracts = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-contracts."4.0.0-dev" { inherit profileName; }).out;
      pallet_contracts_primitives = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-contracts-primitives."24.0.0" { inherit profileName; }).out;
      pallet_elections = (rustPackages."unknown".pallet-elections."0.6.0" { inherit profileName; }).out;
      pallet_identity = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-identity."4.0.0-dev" { inherit profileName; }).out;
      pallet_insecure_randomness_collective_flip = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-insecure-randomness-collective-flip."4.0.0-dev" { inherit profileName; }).out;
      pallet_multisig = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-multisig."4.0.0-dev" { inherit profileName; }).out;
      pallet_nomination_pools = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-nomination-pools."1.0.0" { inherit profileName; }).out;
      pallet_nomination_pools_runtime_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-nomination-pools-runtime-api."1.0.0-dev" { inherit profileName; }).out;
      pallet_scheduler = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-scheduler."4.0.0-dev" { inherit profileName; }).out;
      pallet_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; }).out;
      pallet_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-staking."4.0.0-dev" { inherit profileName; }).out;
      pallet_sudo = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-sudo."4.0.0-dev" { inherit profileName; }).out;
      pallet_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; }).out;
      pallet_transaction_payment = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-transaction-payment."4.0.0-dev" { inherit profileName; }).out;
      pallet_transaction_payment_rpc_runtime_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-transaction-payment-rpc-runtime-api."4.0.0-dev" { inherit profileName; }).out;
      pallet_treasury = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-treasury."4.0.0-dev" { inherit profileName; }).out;
      pallet_utility = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-utility."4.0.0-dev" { inherit profileName; }).out;
      pallet_vesting = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-vesting."4.0.0-dev" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      primitives = (rustPackages."unknown".primitives."0.7.0" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus_aura = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_offchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-offchain."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-session."4.0.0-dev" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_transaction_pool = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
    };
    devDependencies = {
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      substrate_wasm_builder = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-wasm-builder."5.0.0-dev" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android-tzdata."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "android-tzdata";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "android_system_properties";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "ansi_term";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "anstream";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2ab91ebe16eb252986481c5b62f6098f3b698a45e34b5b98200cf20dd2484a44"; };
    features = builtins.concatLists [
      [ "auto" ]
      [ "default" ]
      [ "wincon" ]
    ];
    dependencies = {
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.4" { inherit profileName; }).out;
      anstyle_parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.2" { inherit profileName; }).out;
      anstyle_query = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "anstyle_wincon" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.1" { inherit profileName; }).out;
      colorchoice = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.0" { inherit profileName; }).out;
      utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "anstyle";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7079075b41f533b8c61d2a4d073c4676e1f8b249ff94a393b0595db304e0dd87"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-parse";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "317b9a89c1868f5ea6ff1d9539a69f45dffc21ce321ac1fd1160dfa48c8e2140"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "utf8" ]
    ];
    dependencies = {
      utf8parse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-query";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5ca11d4be1bab0c8bc8734a9aa7bf4ee8316d462a08c6ac5052f888fef5b494b"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.1" = overridableMkRustCrate (profileName: rec {
    name = "anstyle-wincon";
    version = "3.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0699d10d2f4d628a98ee7b57b289abbc98ff3bad977cb3152709d4bf2330628"; };
    dependencies = {
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.4" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" = overridableMkRustCrate (profileName: rec {
    name = "anyhow";
    version = "1.0.75";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4668cab20f66d8d020e1fbc0ebe47217433c1b6c8f2040faf858554e394ace6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6"; };
    dependencies = {
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "arc-swap";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bddcadddf5e9015d310179a59bb28c4d4b9920ad0f11e8e14dbadf654890c9a6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-bls12-377."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-bls12-377";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb00293ba84f51ce3bd026bd0de55899c4e68f0a39a5728cebae3a73ffdc0a4f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "base_field")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "curve")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "scalar_field")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-bls12-381."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-bls12-381";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c775f0d12169cba7aae4caeb547bb6a50781c7449a8aa53793827c9ec4abf488"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "curve")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "scalar_field")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-bn254."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-bn254";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a22f4561524cd949590d78d7d4c5df8f592430d221f7f3c9497bbafd8972120f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "curve")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "scalar_field")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-bw6-761."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-bw6-761";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e0605daf0cc5aa2034b78d008aaf159f56901d92a52ee4f6ecdfdac4f426700"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bls12_377" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bls12-377."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-crypto-primitives."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-crypto-primitives";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f3a13b34da09176a8baba701233fdffbaa7c1b1192ce031a3da4e55ce1f1a56"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "sponge")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_relations" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-relations."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_snark" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-snark."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "blake2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "derivative" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "digest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "sha2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "ark-ec";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "defd9a439d56ac24968cca0571f598a61bc8c55f71d50a89cda591cb750670ba"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_poly" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-poly."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "derivative" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "itertools" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-ed-on-bls12-377."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-ed-on-bls12-377";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b10d901b9ac4b38f9c32beacedfadcdd64e46f8d7f8e88c1ae1060022cf6f6c6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bls12_377" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bls12-377."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-ed-on-bls12-381."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-ed-on-bls12-381";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba6d678bb98a7e4f825bd4e332e93ac4f5a114ce2e3340dee4d7dc1c7ab5b323"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bls12_381" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bls12-381."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-ed-on-bn254."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-ed-on-bn254";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71892f265d01650e34988a546b37ea1d2ba1da162a639597a03d1550f26004d8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bn254" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bn254."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "ark-ff";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec847af850f44ad29048935519032c33da8aa03340876d351dfab5660d2966ba"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "asm")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff_asm" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff-asm."0.4.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff_macros" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff-macros."0.4.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "derivative" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "digest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "itertools" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "paste" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "rustc_version" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-ff-asm."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "ark-ff-asm";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3ed4aa4fe255d0bc6d79373f7e31d2ea147bcf486cba1be5ba7ea85abdb92348"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-ff-macros."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "ark-ff-macros";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7abe79b0e4288889c4574159ab790824d0033b9fdcb2a112a3182fac2e514565"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-poly."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "ark-poly";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d320bfc44ee185d899ccbadfa8bc31aab923ce1558716e1997a1e74057fe86bf"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "derivative" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-relations."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-relations";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00796b6efc05a3f48225e59cb6a2cda78881e7c390872d5786aaf112f31fb4f0"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "tracing-subscriber")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/liminal-std" then "tracing_subscriber" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.25" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "ark-serialize";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "adb7b85a02b83d2f22f89bd5cac66c9c89474240cb6207cb1efc16d098e822a5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "ark-serialize-derive")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "derive")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize-derive."0.4.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "digest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-serialize-derive."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "ark-serialize-derive";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae3281bc6d0fd7e549af32b52511e1302185bd688fd3359fa36423346ff682ea"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-snark."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-snark";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "84d3cc6833a335bb8a600241889ead68ee89a3cf8448081fb7694c0fe503da63"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_relations" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-relations."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ark-std";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "94893f1e0c6eeab764ade8dc4c0db24caf4fe7cbbaafc0eba0a9030f447b5185"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" = overridableMkRustCrate (profileName: rec {
    name = "array-bytes";
    version = "6.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b1c5a481ec30a5abd8dfbd94ab5cf1bb4e9a66be7f1b3b322f2f1170c200fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "arrayref";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6b4930d2cb77ce62f89ee5d5289b4ac049559b1c45539271f5ed4fdc7db34545"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "30ff05a702273012438132f449575dbc804e27b2f3cbe3069aa237d26c98fa33"; };
    features = builtins.concatLists [
      [ "datetime" ]
      [ "default" ]
      [ "std" ]
      [ "time" ]
    ];
    dependencies = {
      asn1_rs_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs-derive."0.1.0" { profileName = "__noProfile"; }).out;
      asn1_rs_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs-impl."0.1.0" { profileName = "__noProfile"; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" { profileName = "__noProfile"; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f6fd5ddaf0351dff5b8da21b2fb4ff8e08ddd02857f0bf69c47639106c0fff0"; };
    features = builtins.concatLists [
      [ "datetime" ]
      [ "default" ]
      [ "std" ]
      [ "time" ]
    ];
    dependencies = {
      asn1_rs_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs-derive."0.4.0" { profileName = "__noProfile"; }).out;
      asn1_rs_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs-impl."0.1.0" { profileName = "__noProfile"; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" { profileName = "__noProfile"; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs-derive."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs-derive";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "db8b7511298d5b7784b40b092d9e9dcd3a627a5707e4b5e507931ab0d44eeebf"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      synstructure = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs-derive."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs-derive";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "726535892e8eae7e70657b4c8ea93d26b8553afb1ce617caee529ef96d7dee6c"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      synstructure = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1-rs-impl."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "asn1-rs-impl";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2777730b2039ac0f95f093556e61b6d26cebed5393ca6f152717777cec3a42ed"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asn1_der."0.7.6" = overridableMkRustCrate (profileName: rec {
    name = "asn1_der";
    version = "0.7.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "155a5a185e42c6b77ac7b88a15143d930a9e9727a5b7b77eed417404ab15c247"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "native_types" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-channel."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "async-channel";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "81953c529336010edd6d8e358f886d9581267795c61b19475b71314bffa46d35"; };
    dependencies = {
      concurrent_queue = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.3.0" { inherit profileName; }).out;
      event_listener = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-io."1.13.0" = overridableMkRustCrate (profileName: rec {
    name = "async-io";
    version = "1.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0fc5b45d93ef0529756f812ca52e44c221b35341892d3dcc34132ac02f3dd2af"; };
    dependencies = {
      async_lock = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."2.8.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      concurrent_queue = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.3.0" { inherit profileName; }).out;
      futures_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      parking = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" { inherit profileName; }).out;
      polling = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".polling."2.8.0" { inherit profileName; }).out;
      rustix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.37.27" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.10" { inherit profileName; }).out;
      waker_fn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-lock."2.8.0" = overridableMkRustCrate (profileName: rec {
    name = "async-lock";
    version = "2.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "287272293e9d8c41773cec55e365490fe034813a2f172f502d6ddcf75b2f582b"; };
    dependencies = {
      event_listener = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-recursion."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "async-recursion";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5fd55a5ba1179988837d24ab4c7cc8ed6efdeff578ede0416b4225a5fca35bd0"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" = overridableMkRustCrate (profileName: rec {
    name = "async-trait";
    version = "0.1.74";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a66537f1bb974b254c98ed142ff995236e81b9d0fe4db0575f46612cb15eb0f9"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "asynchronous-codec";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4057f2c32adbb2fc158e22fb38433c8e9bbf76b75a4732c7c0cbaf695fb65568"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" = overridableMkRustCrate (profileName: rec {
    name = "atomic-waker";
    version = "1.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "atty";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"; };
  });
  
  "unknown".baby-liminal-extension."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "baby-liminal-extension";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "pallet-baby-liminal")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "substrate")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "obce" else null } = (rustPackages."git+https://github.com/727-Ventures/obce".obce."0.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "pallet_baby_liminal" else null } = (rustPackages."unknown".pallet-baby-liminal."0.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_io" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.69" = overridableMkRustCrate (profileName: rec {
    name = "backtrace";
    version = "0.3.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2089b7e3f35b9dd2d0ed921ead4f6d318c27680d4a5bd167b3ee120edb105837"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "addr2line" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.21.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "miniz_oxide" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows && hostPlatform.parsed.abi.name == "msvc" && !(hostPlatform.parsed.vendor.name == "uwp")) then "object" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.32.1" { inherit profileName; }).out;
      rustc_demangle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.23" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.11" = overridableMkRustCrate (profileName: rec {
    name = "base-x";
    version = "0.2.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4cbbc9d0964165b47557570cce6c952866c2678457aca742aafc9fb771d30270"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base16ct."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "base16ct";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "349a06037c7bf932dd7e7d1f653678b2038b9ad46a74102f1fc7bd7872678cce"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base16ct."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "base16ct";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c7f02d4ea65f2c1853089ffd8d2787bdbc63de2f0d29dedbcf8ccdfa0ccd4cf"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.21.5" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.21.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "35636a1494ede3b646cc98f74f8e62c773a38a659ebc777a2cf26b9b74171df9"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64ct."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "base64ct";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".beef."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "beef";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a8241f3ebb85c056b509d4327ad0358fbbba6ffb340bf388f26350aeda225b1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "impl_serde" ]
      [ "serde" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" = overridableMkRustCrate (profileName: rec {
    name = "bincode";
    version = "1.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad"; };
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bindgen."0.65.1" = overridableMkRustCrate (profileName: rec {
    name = "bindgen";
    version = "0.65.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cfdf7b466f9a4903edc73f95d6d2bcd5baf8ae620638762244d3f60143643cc5"; };
    features = builtins.concatLists [
      [ "runtime" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      cexpr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" { inherit profileName; }).out;
      clang_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.6.1" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      lazycell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; }).out;
      peeking_take_while = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" { inherit profileName; }).out;
      prettyplease = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prettyplease."0.2.15" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      rustc_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      shlex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.2.0" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-vec";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.1" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "2.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "327762f6e5a765692301e5bb513e0d9fef63be86bbc14528052b1cd3e6f03e07"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "bitvec";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      funty = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".funty."2.0.0" { inherit profileName; }).out;
      radium = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".radium."0.7.0" { inherit profileName; }).out;
      tap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" { inherit profileName; }).out;
      wyz = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wyz."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "blake2";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake2b_simd."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "blake2b_simd";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23285ad32269793932e830392f2fe2f83e26488fd3ec778883a93c8323735780"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      arrayref = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      constant_time_eq = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake2s_simd."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "blake2s_simd";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "94230421e395b9920d23df13ea5d77a20e1725331f90fbbf6df6040b33f756ae"; };
    dependencies = {
      arrayref = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      constant_time_eq = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".blake3."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "blake3";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0231f06152bf547e9c2b5194f247cd97aacf6dcd8b15d8e5ec0663f64580da87"; };
    dependencies = {
      arrayref = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      constant_time_eq = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.3.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b"; };
    dependencies = {
      block_padding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-padding."0.1.5" { inherit profileName; }).out;
      byte_tools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" = overridableMkRustCrate (profileName: rec {
    name = "block-buffer";
    version = "0.10.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-modes."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "block-modes";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57a0e8073e8baa88212fb5823574c02ebccb395136ba9a164ab89379ec6072f0"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_padding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-padding."0.2.1" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.2.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-padding."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "block-padding";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5"; };
    dependencies = {
      byte_tools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block-padding."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "block-padding";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d696c370c750c948ada61c69a0ee2cbbb9c50b1019ddb86d9317157a99c2cae"; };
  });
  
  "git+https://github.com/EspressoSystems/blst.git".blst."0.3.10" = overridableMkRustCrate (profileName: rec {
    name = "blst";
    version = "0.3.10";
    registry = "git+https://github.com/EspressoSystems/blst.git";
    src = fetchCrateGit {
      url = https://github.com/EspressoSystems/blst.git;
      name = "blst";
      version = "0.3.10";
      rev = "faefc7fcb21864aaf4f6f443636ce8924108fcbd";
      ref = "no-std";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "cc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
      ${ if (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") && hostPlatform.parsed.abi.name == "msvc" then "glob" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bounded-collections."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "bounded-collections";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca548b6163b872067dc5eb82fd130c56881435e30367d2073594a3d9744120dd"; };
    features = builtins.concatLists [
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bs58."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "bs58";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "771fe0050b883fcc3ea2359b1a96bcfbc090b7116eae7c3c512c7a083fdf23d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bstr."1.7.0" = overridableMkRustCrate (profileName: rec {
    name = "bstr";
    version = "1.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c79ad7fb2dd38f3dabd76b09c6a5a20c038fc0213ef1e9afd30eb777f120f019"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".build-helper."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "build-helper";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bdce191bf3fa4995ce948c8c83b4640a1745457a149e73c6db75b4ffe36aad5f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.14.0" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f30e7476521f6f8af1a1c4c0b8cc94f0bee37d91763d0ca2665f299b6cd8aec"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byte-slice-cast."1.2.2" = overridableMkRustCrate (profileName: rec {
    name = "byte-slice-cast";
    version = "1.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byte-tools."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "byte-tools";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.0" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck";
    version = "1.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "374d28ec25809ee0e23827c2ab573d729e293f281dfe393500e7ad618baa61c6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "i128" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2bd12c1caf447e69cd4528f47f94d203fd2582878ecb9e9465484c4148a8223"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bzip2-sys."0.1.11+1.0.8" = overridableMkRustCrate (profileName: rec {
    name = "bzip2-sys";
    version = "0.1.11+1.0.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "736a955f3fa7875102d57c82b8cac37ec45224a07fd32d58f9f7a186b6cd4cdc"; };
    features = builtins.concatLists [
      [ "static" ]
    ];
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
      pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.27" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".camino."1.1.6" = overridableMkRustCrate (profileName: rec {
    name = "camino";
    version = "1.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c59e92b5a388f549b863a7bea62612c09f24c8393560709a54558a9abdfb3b9c"; };
    features = builtins.concatLists [
      [ "serde" ]
      [ "serde1" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cargo-platform."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "cargo-platform";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12024c4645c97566567129c204f65d5815a8c9aecf30fcbe682b2fe034996d36"; };
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.15.4" = overridableMkRustCrate (profileName: rec {
    name = "cargo_metadata";
    version = "0.15.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eee4243f1f26fc7a42710e7439c149e2b10b05472f88090acce52632f231a73a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      camino = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".camino."1.1.6" { inherit profileName; }).out;
      cargo_platform = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo-platform."0.1.4" { inherit profileName; }).out;
      semver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.20" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.83";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1174fb0b6ec23863f8b971027804a42614e347eafb0a95bf0b12cdae21fc4d0"; };
    features = builtins.concatLists [
      [ "jobserver" ]
      [ "parallel" ]
    ];
    dependencies = {
      jobserver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.27" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ccm."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ccm";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aca1a8fbc20b50ac9673ff014abfb2b5f4085ee1a850d408f14a159c5853ac7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
    ];
    dependencies = {
      aead = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.3.2" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.2.5" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "cexpr";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766"; };
    dependencies = {
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-expr."0.10.3" = overridableMkRustCrate (profileName: rec {
    name = "cfg-expr";
    version = "0.10.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0aacacf4d96c24b2ad6eb8ee6df040e4f27b0d0b39a5710c30091baa830485db"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-expr."0.15.5" = overridableMkRustCrate (profileName: rec {
    name = "cfg-expr";
    version = "0.15.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03915af431787e6ffdcc74c645077518c6b6e01f80b761e0fbbfa288536311b3"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "cfg_aliases";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chacha20."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "chacha20";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c80e5460aa66fe3b91d40bcbdab953a597b60053e34d684ac6903f863b680a6"; };
    features = builtins.concatLists [
      [ "cipher" ]
      [ "default" ]
      [ "zeroize" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chacha20."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "chacha20";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3613f74bd2eac03dad61bd53dbe620703d4371614fe0bc3b9f04dd36fe4e818"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "zeroize")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "cipher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") && (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686") then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chacha20poly1305."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "chacha20poly1305";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a18446b09be63d457bbec447509e85f662f32952b035ce892290396bc0b0cff5"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
    ];
    dependencies = {
      aead = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.4.3" { inherit profileName; }).out;
      chacha20 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chacha20."0.8.2" { inherit profileName; }).out;
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; }).out;
      poly1305 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".poly1305."0.7.2" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chacha20poly1305."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "chacha20poly1305";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10cd79432192d1c0f4e1a0fef9527696cc039165d729fb41b3f4f4f354c2dc35"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "rand_core")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "aead" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "chacha20" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chacha20."0.9.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "cipher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "poly1305" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".poly1305."0.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.31" = overridableMkRustCrate (profileName: rec {
    name = "chrono";
    version = "0.4.31";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f2c685bad3eb3d45a01354cedb7d5faa66194d1d58ba6e267a8de788f79db38"; };
    features = builtins.concatLists [
      [ "android-tzdata" ]
      [ "clock" ]
      [ "default" ]
      [ "iana-time-zone" ]
      [ "js-sys" ]
      [ "oldtime" ]
      [ "std" ]
      [ "wasm-bindgen" ]
      [ "wasmbind" ]
      [ "winapi" ]
      [ "windows-targets" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "android_tzdata" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android-tzdata."0.1.1" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "iana_time_zone" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.58" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi") then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.65" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi") then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.88" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cid."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "cid";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9b68e3193982cd54187d71afdb2a271ad4cf8af157858e9cb911b91321de143"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "multibase" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      core2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core2."0.4.0" { inherit profileName; }).out;
      multibase = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multibase."0.9.1" { inherit profileName; }).out;
      multihash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.17.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cipher."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "cipher";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12f8e7987cbd042a63249497f41aed09f8e65add917ea6566effbc56578d6801"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "cipher";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ee52072ec15386f770805afd189a01c8841be8696bed250fa2f13c4c0d6dfb7"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "cipher";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "zeroize")
    ];
    dependencies = {
      crypto_common = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
      inout = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".inout."0.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.6.1" = overridableMkRustCrate (profileName: rec {
    name = "clang-sys";
    version = "1.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c688fc74432808e3eb684cae8830a86be1d66a2bd58e1f248ed0960a590baf6f"; };
    features = builtins.concatLists [
      [ "clang_3_5" ]
      [ "clang_3_6" ]
      [ "clang_3_7" ]
      [ "clang_3_8" ]
      [ "clang_3_9" ]
      [ "clang_4_0" ]
      [ "clang_5_0" ]
      [ "clang_6_0" ]
      [ "libloading" ]
      [ "runtime" ]
    ];
    dependencies = {
      glob = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      libloading = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" { inherit profileName; }).out;
    };
    buildDependencies = {
      glob = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap."4.4.7" = overridableMkRustCrate (profileName: rec {
    name = "clap";
    version = "4.4.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac495e00dcec98c83465d5ad66c5c4fabd652fd6686e7c6269b117e729a6f17b"; };
    features = builtins.concatLists [
      [ "color" ]
      [ "default" ]
      [ "derive" ]
      [ "error-context" ]
      [ "help" ]
      [ "std" ]
      [ "string" ]
      [ "suggestions" ]
      [ "usage" ]
    ];
    dependencies = {
      clap_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.4.7" { inherit profileName; }).out;
      clap_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.4.7" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.4.7" = overridableMkRustCrate (profileName: rec {
    name = "clap_builder";
    version = "4.4.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c77ed9a32a62e6ca27175d00d29d05ca32e396ea1eb5fb01d8256b669cec7663"; };
    features = builtins.concatLists [
      [ "color" ]
      [ "error-context" ]
      [ "help" ]
      [ "std" ]
      [ "string" ]
      [ "suggestions" ]
      [ "usage" ]
    ];
    dependencies = {
      anstream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.4" { inherit profileName; }).out;
      anstyle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.4" { inherit profileName; }).out;
      clap_lex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.6.0" { inherit profileName; }).out;
      strsim = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.4.7" = overridableMkRustCrate (profileName: rec {
    name = "clap_derive";
    version = "4.4.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf9804afaaf59a91e75b022a30fb7229a7901f60c755489cc61c9b423b836442"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "clap_lex";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "702fc72eb24e5a1e48ce58027a675bc24edd52096d5397d4aea7c6dd9eca0bd1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "codespan-reporting";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e"; };
    dependencies = {
      termcolor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.3.0" { inherit profileName; }).out;
      unicode_width = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "colorchoice";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".comfy-table."7.1.0" = overridableMkRustCrate (profileName: rec {
    name = "comfy-table";
    version = "7.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c64043d6c7b7a4c58e39e7efccfdea7b93d885a795d0c054a69dbbf4dd52686"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "strum" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strum."0.25.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "strum_macros" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.25.3" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "unicode_width" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.3.0" = overridableMkRustCrate (profileName: rec {
    name = "concurrent-queue";
    version = "2.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f057a694a54f12365049b0958a1685bb52d567f5593b355fbf685838e873d400"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.16" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".console."0.15.7" = overridableMkRustCrate (profileName: rec {
    name = "console";
    version = "0.15.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c926e00cc70edefdc64d3a5ff31cc65bb97a3460097762bd23afb4d8145fccf8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "ansi-parsing")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "unicode-width")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") && hostPlatform.isWindows then "encode_unicode" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".encode_unicode."0.3.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "unicode_width" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.11" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") && hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.5" = overridableMkRustCrate (profileName: rec {
    name = "const-oid";
    version = "0.9.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "28c122c3980598d243d63d9a704629a2d748d101f278052ff068be5a4423ab6f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const-random."0.1.17" = overridableMkRustCrate (profileName: rec {
    name = "const-random";
    version = "0.1.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aaf16c9c2c612020bcfd042e170f6e32de9b9d75adb5277cdbbd2e2c8c8299a"; };
    dependencies = {
      const_random_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".const-random-macro."0.1.16" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".const-random-macro."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "const-random-macro";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f9d839f2a20b0aee515dc581a6172f2321f96cab76c1a38a4c584a194955390e"; };
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      tiny_keccak = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-keccak."2.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "constant_time_eq";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7144d30dcf0fafbce74250a3963025d8d52177934239851c917d29f1df280c2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".convert_case."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "convert_case";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146"; };
    dependencies = {
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e496a50fda8aacccc86d7529e2c1e0892dbd0f898a6b5645b5561b89c3210efa"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core2."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "core2";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b49ba7ef1ad6107f8824dbe97de947cbaac53c44e7f9756a1fba0d37c1eec505"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpp_demangle."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "cpp_demangle";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eeaa953eaad386a53111e47172c2fedba671e5684c8dd601a5f474f4f118710f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" = overridableMkRustCrate (profileName: rec {
    name = "cpufeatures";
    version = "0.2.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce420fe07aecd3e67c5f910618fe65e94158f6dcc0adf44e00d69ce2bdfe0fd0"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-linux-android" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.vendor.name == "apple" || hostPlatform.parsed.cpu.name == "loongarch64" && hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-bforest."0.95.1" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-bforest";
    version = "0.95.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1277fbfa94bc82c8ec4af2ded3e639d49ca5f7f3c7eeab2c66accd135ece4e70"; };
    dependencies = {
      cranelift_entity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.95.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.95.1" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-codegen";
    version = "0.95.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c6e8c31ad3b2270e9aeec38723888fe1b0ace3bea2b06b3f749ccf46661d3220"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "gimli" ]
      [ "std" ]
      [ "trace-log" ]
      [ "unwind" ]
    ];
    dependencies = {
      bumpalo = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.14.0" { inherit profileName; }).out;
      cranelift_bforest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-bforest."0.95.1" { inherit profileName; }).out;
      cranelift_codegen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-shared."0.95.1" { inherit profileName; }).out;
      cranelift_entity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.95.1" { inherit profileName; }).out;
      gimli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.27.3" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      regalloc2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regalloc2."0.6.1" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      target_lexicon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.12" { inherit profileName; }).out;
    };
    buildDependencies = {
      cranelift_codegen_meta = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-meta."0.95.1" { profileName = "__noProfile"; }).out;
      cranelift_isle = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-isle."0.95.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-meta."0.95.1" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-codegen-meta";
    version = "0.95.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c8ac5ac30d62b2d66f12651f6b606dbdfd9c2cfd0908de6b387560a277c5c9da"; };
    dependencies = {
      cranelift_codegen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-shared."0.95.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen-shared."0.95.1" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-codegen-shared";
    version = "0.95.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd82b8b376247834b59ed9bdc0ddeb50f517452827d4a11bccf5937b213748b8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.95.1" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-entity";
    version = "0.95.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "40099d38061b37e505e63f89bab52199037a72b931ad4868d9089ff7268660b0"; };
    features = builtins.concatLists [
      [ "enable-serde" ]
      [ "serde" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-frontend."0.95.1" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-frontend";
    version = "0.95.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "64a25d9d0a0ae3079c463c34115ec59507b4707175454f0eee0891e83e30e82d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cranelift_codegen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.95.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      target_lexicon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-isle."0.95.1" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-isle";
    version = "0.95.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "80de6a7d0486e4acbd5f9f87ec49912bf4c8fb6aea00087b989685460d4469ba"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-native."0.95.1" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-native";
    version = "0.95.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb6b03e0e03801c4b3fd8ce0758a94750c07a44e7944cc0ffbf0d3f2e7c79b00"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cranelift_codegen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.95.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "s390x" || hostPlatform.parsed.cpu.name == "riscv64" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      target_lexicon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cranelift-wasm."0.95.1" = overridableMkRustCrate (profileName: rec {
    name = "cranelift-wasm";
    version = "0.95.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ff3220489a3d928ad91e59dd7aeaa8b3de18afb554a6211213673a71c90737ac"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cranelift_codegen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.95.1" { inherit profileName; }).out;
      cranelift_entity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.95.1" { inherit profileName; }).out;
      cranelift_frontend = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-frontend."0.95.1" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      wasmparser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.102.0" { inherit profileName; }).out;
      wasmtime_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-types."8.0.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc."3.0.1" = overridableMkRustCrate (profileName: rec {
    name = "crc";
    version = "3.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "86ec7a15cbe22e59248fc7eadb1907dab5ba09372595da4d73dd805ed4417dfe"; };
    dependencies = {
      crc_catalog = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc-catalog."2.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc-any."2.4.3" = overridableMkRustCrate (profileName: rec {
    name = "crc-any";
    version = "2.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "774646b687f63643eb0f4bf13dc263cb581c8c9e57973b6ddf78bda3994d88df"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc-catalog."2.4.0" = overridableMkRustCrate (profileName: rec {
    name = "crc-catalog";
    version = "2.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19d374276b40fb8bbdee95aef7c7fa6b5316ec764510eb64b8dd0e2ed0d7e7f5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-deque";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce6fd6f855243022dcecf8702fef0c297d4338e226845fe067f6341ad9fa0cef"; };
    features = builtins.concatLists [
      [ "crossbeam-epoch" ]
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      crossbeam_epoch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.15" { inherit profileName; }).out;
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.16" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.15" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-epoch";
    version = "0.9.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae211234986c545741a7dc064309f67ee1e5ad243d0e48335adc0484d960bcc7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.16" { inherit profileName; }).out;
      memoffset = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.9.0" { inherit profileName; }).out;
      scopeguard = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.16" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a22b2d63d4d1dc0b7f1b6b2747dd0088008a9be28b6ddf0b1e7d335e3037294"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "crunchy";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "limit_128" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "crypto-bigint";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef2b4b23cddf68b89b8f8069890e8c270d54e2d5fe1b143820234805e4cb17ef"; };
    features = builtins.concatLists [
      [ "generic-array" ]
      [ "rand_core" ]
      [ "zeroize" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "crypto-bigint";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "740fe28e594155f10cfc383984cbefd529d7396050557148f79cb0f621204124"; };
    features = builtins.concatLists [
      [ "generic-array" ]
      [ "rand_core" ]
      [ "zeroize" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "crypto-common";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"; };
    features = builtins.concatLists [
      [ "getrandom" ]
      [ "rand_core" ]
      [ "std" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "crypto-mac";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b584a330336237c1eecd3e94266efb216c56ed91225d634cb2991c5f3fd1aeab"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "crypto-mac";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1d1a86f49236c215f271d40892d5fc950490551400b02ef360692c29815c714"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crypto_box."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "crypto_box";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd26c32de5307fd08aac445a75c43472b14559d5dccdfba8022dbcd075838ebc"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "alloc")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "u64_backend")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "aead" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "chacha20" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chacha20."0.9.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "chacha20poly1305" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chacha20poly1305."0.10.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "salsa20" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".salsa20."0.10.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "x25519_dalek" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."1.1.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "xsalsa20poly1305" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xsalsa20poly1305."0.9.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ctr."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "ctr";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "049bb91fb4aaf0e3c7efa6cd5ef877dbbbd15b39dad06d9948de4ec8a75761ea"; };
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ctr."0.9.2" = overridableMkRustCrate (profileName: rec {
    name = "ctr";
    version = "0.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0369ee1ad671834580515889b80f2ea915f23b8be8d0daa4bbaf2ac5c7590835"; };
    dependencies = {
      cipher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."2.1.3" = overridableMkRustCrate (profileName: rec {
    name = "curve25519-dalek";
    version = "2.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4a9b85542f99a2dfa2a1b8e192662741c9859a846b296bef1c92ef9b58b5a216"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" = overridableMkRustCrate (profileName: rec {
    name = "curve25519-dalek";
    version = "3.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b9fdf9972b2bd6af2d913799d9ebc165ea4d2e65878e329d9c6b372c4491b61"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."4.1.1" = overridableMkRustCrate (profileName: rec {
    name = "curve25519-dalek";
    version = "4.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e89b8c6a2e4b1f45971ad09761aafb85514a84744b67a95e32c3cc1352d1f65c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "digest" ]
      [ "precomputed-tables" ]
      [ "zeroize" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" then "curve25519_dalek_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek-derive."0.1.1" { profileName = "__noProfile"; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ${ if false then "fiat_crypto" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fiat-crypto."0.2.2" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      platforms = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".platforms."3.2.0" { profileName = "__noProfile"; }).out;
      rustc_version = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek-derive."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "curve25519-dalek-derive";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cxx."1.0.110" = overridableMkRustCrate (profileName: rec {
    name = "cxx";
    version = "1.0.110";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7129e341034ecb940c9072817cd9007974ea696844fc4dd582dc1653a7fbe2e8"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cxxbridge_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cxxbridge-macro."1.0.110" { profileName = "__noProfile"; }).out;
      link_cplusplus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".link-cplusplus."1.0.9" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
      cxxbridge_flags = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cxxbridge-flags."1.0.110" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cxx-build."1.0.110" = overridableMkRustCrate (profileName: rec {
    name = "cxx-build";
    version = "1.0.110";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2a24f3f5f8eed71936f21e570436f024f5c2e25628f7496aa7ccd03b90109d5"; };
    features = builtins.concatLists [
      [ "parallel" ]
    ];
    dependencies = {
      cc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { inherit profileName; }).out;
      codespan_reporting = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".codespan-reporting."0.11.1" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      scratch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scratch."1.0.7" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cxxbridge-flags."1.0.110" = overridableMkRustCrate (profileName: rec {
    name = "cxxbridge-flags";
    version = "1.0.110";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06fdd177fc61050d63f67f5bd6351fac6ab5526694ea8e359cd9cd3b75857f44"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cxxbridge-macro."1.0.110" = overridableMkRustCrate (profileName: rec {
    name = "cxxbridge-macro";
    version = "1.0.110";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "587663dd5fb3d10932c8aecfe7c844db1bcf0aee93eeab08fac13dc1212c2e7f"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling."0.14.4" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.14.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "suggestions" ]
    ];
    dependencies = {
      darling_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.14.4" { inherit profileName; }).out;
      darling_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.14.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.14.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.14.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0"; };
    features = builtins.concatLists [
      [ "strsim" ]
      [ "suggestions" ]
    ];
    dependencies = {
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      ident_case = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      strsim = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.14.4" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.14.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e"; };
    dependencies = {
      darling_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.14.4" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" = overridableMkRustCrate (profileName: rec {
    name = "data-encoding";
    version = "2.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c2e66c9d817f1720209181c316d28635c050fa304f9c79e47a520882661b7308"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".data-encoding-macro."0.1.13" = overridableMkRustCrate (profileName: rec {
    name = "data-encoding-macro";
    version = "0.1.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c904b33cc60130e1aeea4956ab803d08a3f4a0ca82d64ed757afac3891f2bb99"; };
    dependencies = {
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; }).out;
      data_encoding_macro_internal = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding-macro-internal."0.1.11" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".data-encoding-macro-internal."0.1.11" = overridableMkRustCrate (profileName: rec {
    name = "data-encoding-macro-internal";
    version = "0.1.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fdf3fce3ce863539ec1d7fd1b6dcc3c645663376b43ed376bbf887733e4f772"; };
    dependencies = {
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "der";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1a467a65c5e759bce6e65eaf91cc29f466cdc57cb65777bd646872a8a1fd4de"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "const-oid" ]
      [ "oid" ]
      [ "pem" ]
      [ "pem-rfc7468" ]
      [ "std" ]
      [ "zeroize" ]
    ];
    dependencies = {
      const_oid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.5" { inherit profileName; }).out;
      pem_rfc7468 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem-rfc7468."0.6.0" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".der."0.7.8" = overridableMkRustCrate (profileName: rec {
    name = "der";
    version = "0.7.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fffa369a668c8af7dbf8b5e56c9f744fbd399949ed171606040001947de40b1c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "oid" ]
      [ "std" ]
      [ "zeroize" ]
    ];
    dependencies = {
      const_oid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.5" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".der-parser."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "der-parser";
    version = "7.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe398ac75057914d7d07307bf67dc7f3f574a26783b4fc7805a20ffa9f506e82"; };
    features = builtins.concatLists [
      [ "bigint" ]
      [ "default" ]
      [ "num-bigint" ]
      [ "std" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.3.1" { inherit profileName; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" { profileName = "__noProfile"; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.4" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".der-parser."8.2.0" = overridableMkRustCrate (profileName: rec {
    name = "der-parser";
    version = "8.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dbd676fbbab537128ef0278adb5576cf363cff6aa22a7b24effe97347cfab61e"; };
    features = builtins.concatLists [
      [ "bigint" ]
      [ "default" ]
      [ "num-bigint" ]
      [ "std" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.5.2" { inherit profileName; }).out;
      displaydoc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" { profileName = "__noProfile"; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      num_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.4" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".deranged."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "deranged";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0f32d04922c60427da6f9fef14d042d9edddef64cb9d4ce0d64d0685fbeb1fd3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "powerfmt" ]
      [ "std" ]
    ];
    dependencies = {
      powerfmt = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".powerfmt."0.2.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "derivative";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "use_core")
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive-syn-parse."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "derive-syn-parse";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e79116f119dd1dba1abf1f3405f03b9b0e79a27a3883864bfebded8a3dc768cd"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_builder."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "derive_builder";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d07adf7be193b71cc36b193d0f5fe60b918a3a9db4dad0449f57bcfd519704a3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      derive_builder_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_builder_macro."0.11.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_builder_core."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "derive_builder_core";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f91d4cfa921f1c05904dc3c57b4a32c38aed3340cce209f3a6fd1478babafc4"; };
    dependencies = {
      darling = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.14.4" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_builder_macro."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "derive_builder_macro";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f0314b72bed045f3a68671b3c86328386762c93f82d98c65c3cb5e5f573dd68"; };
    dependencies = {
      derive_builder_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_builder_core."0.11.2" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" = overridableMkRustCrate (profileName: rec {
    name = "derive_more";
    version = "0.99.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321"; };
    features = builtins.concatLists [
      [ "add" ]
      [ "add_assign" ]
      [ "as_mut" ]
      [ "as_ref" ]
      [ "constructor" ]
      [ "convert_case" ]
      [ "default" ]
      [ "deref" ]
      [ "deref_mut" ]
      [ "display" ]
      [ "error" ]
      [ "from" ]
      [ "from_str" ]
      [ "index" ]
      [ "index_mut" ]
      [ "into" ]
      [ "into_iterator" ]
      [ "is_variant" ]
      [ "iterator" ]
      [ "mul" ]
      [ "mul_assign" ]
      [ "not" ]
      [ "rustc_version" ]
      [ "sum" ]
      [ "try_into" ]
      [ "unwrap" ]
    ];
    dependencies = {
      convert_case = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".convert_case."0.4.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
    buildDependencies = {
      rustc_version = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".difflib."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "difflib";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" = overridableMkRustCrate (profileName: rec {
    name = "digest";
    version = "0.10.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "block-buffer" ]
      [ "const-oid" ]
      [ "core-api" ]
      [ "default" ]
      [ "mac" ]
      [ "oid" ]
      [ "std" ]
      [ "subtle" ]
    ];
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" { inherit profileName; }).out;
      const_oid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.5" { inherit profileName; }).out;
      crypto_common = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".directories."4.0.1" = overridableMkRustCrate (profileName: rec {
    name = "directories";
    version = "4.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f51c5d4ddabd36886dd3e1438cb358cdcb0d7c499cb99cb4ac2e38e18b5cb210"; };
    dependencies = {
      dirs_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".directories-next."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "directories-next";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "339ee130d97a610ea5a5872d2bbb130fdf68884ff09d3028b81bec8a1ac23bbc"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      dirs_sys_next = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.4" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dirs-sys-next."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "dirs-sys-next";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "redox_users" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.4" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "displaydoc";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "487585f4d0c6655fe74905e2504d8ad6908e4db67f744eb140876906c2f3175d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".doc-comment."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "doc-comment";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".downcast."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "downcast";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1435fa1053d8b2fbbe9be7e97eca7f33d37b28409959813daefc1446a14247f1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "downcast-rs";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dtoa."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "dtoa";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dcbb2bf8e87535c23f7a8a321e364ce21462d0ff10cb6407820e8e96dfff6653"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dyn-clonable."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "dyn-clonable";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e9232f0e607a262ceb9bd5141a3dfb3e4db6994b31989bbfd845878cba59fd4"; };
    dependencies = {
      dyn_clonable_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clonable-impl."0.9.0" { profileName = "__noProfile"; }).out;
      dyn_clone = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clone."1.0.16" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dyn-clonable-impl."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "dyn-clonable-impl";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "558e40ea573c374cf53507fd240b7ee2f5477df7cfebdb97323ec61c719399c5"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dyn-clone."1.0.16" = overridableMkRustCrate (profileName: rec {
    name = "dyn-clone";
    version = "1.0.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "545b22097d44f8a9581187cdf93de7a71e4722bf51200cfaba810865b49a495d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.14.8" = overridableMkRustCrate (profileName: rec {
    name = "ecdsa";
    version = "0.14.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "413301934810f597c1d19ca71c8710e99a3f1ba28a0d2ebc01551a2daeea3c5c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "der" ]
      [ "digest" ]
      [ "hazmat" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "rfc6979" ]
      [ "sign" ]
      [ "std" ]
      [ "verify" ]
    ];
    dependencies = {
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.12.3" { inherit profileName; }).out;
      rfc6979 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rfc6979."0.3.1" { inherit profileName; }).out;
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."1.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.16.8" = overridableMkRustCrate (profileName: rec {
    name = "ecdsa";
    version = "0.16.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4b1e0c257a9e9f25f90ff76d7a68360ed497ee519c8e428d1825ef0000799d4"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "der" ]
      [ "digest" ]
      [ "hazmat" ]
      [ "rfc6979" ]
      [ "signing" ]
      [ "spki" ]
      [ "std" ]
      [ "verifying" ]
    ];
    dependencies = {
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.8" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.13.6" { inherit profileName; }).out;
      rfc6979 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rfc6979."0.4.0" { inherit profileName; }).out;
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."2.1.0" { inherit profileName; }).out;
      spki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519."1.5.3" = overridableMkRustCrate (profileName: rec {
    name = "ed25519";
    version = "1.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91cff35c70bba8a626e3185d8cd48cc11b5437e1a5bcd15b9b5fa3c64b6dfee7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."1.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519."2.2.3" = overridableMkRustCrate (profileName: rec {
    name = "ed25519";
    version = "2.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "115531babc129696a58c64a4fef0a8bf9e9698629fb97e9e40767d235cfbcd53"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."2.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ed25519-dalek";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c762bae6dcaf24c4c84667b8579785430908723d5c889f469d76a41d59cc7a9d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "rand" ]
      [ "serde_crate" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; }).out;
      ed25519 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519."1.5.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; }).out;
      serde_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "ed25519-dalek";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7277392b266383ef8396db7fdeb1e77b6c52fed775f5df15bb24f35b72156980"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "fast" ]
      [ "rand_core" ]
      [ "std" ]
      [ "zeroize" ]
    ];
    dependencies = {
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."4.1.1" { inherit profileName; }).out;
      ed25519 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519."2.2.3" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ed25519-zebra."3.1.0" = overridableMkRustCrate (profileName: rec {
    name = "ed25519-zebra";
    version = "3.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c24f403d068ad0b359e577a77f92392118be3f3c927538f2bb544a5ecd828c6"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "either";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a26ae43d7bcc3b814de94796a5e736d4029efb0ee900c12e2d54c993ad1a1e07"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "elliptic-curve";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7bb888ab5300a19b8e5bceef25ac745ad065f3c9f7efc6de1b91958110891d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "default" ]
      [ "digest" ]
      [ "ecdh" ]
      [ "ff" ]
      [ "group" ]
      [ "hazmat" ]
      [ "hkdf" ]
      [ "pem" ]
      [ "pem-rfc7468" ]
      [ "pkcs8" ]
      [ "sec1" ]
      [ "std" ]
    ];
    dependencies = {
      base16ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base16ct."0.1.1" { inherit profileName; }).out;
      crypto_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.4.9" { inherit profileName; }).out;
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ff = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ff."0.12.1" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      group = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".group."0.12.1" { inherit profileName; }).out;
      hkdf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.3" { inherit profileName; }).out;
      pem_rfc7468 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem-rfc7468."0.6.0" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.9.0" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      sec1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sec1."0.3.0" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.13.6" = overridableMkRustCrate (profileName: rec {
    name = "elliptic-curve";
    version = "0.13.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d97ca172ae9dc9f9b779a6e3a65d308f2af74e5b8c921299075bdb4a0370e914"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "digest" ]
      [ "ff" ]
      [ "group" ]
      [ "hazmat" ]
      [ "sec1" ]
      [ "std" ]
    ];
    dependencies = {
      base16ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base16ct."0.2.0" { inherit profileName; }).out;
      crypto_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.5.3" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ff = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ff."0.13.0" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      group = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".group."0.13.0" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      sec1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sec1."0.7.3" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".encode_unicode."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "encode_unicode";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enum-as-inner."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "enum-as-inner";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c9720bba047d567ffc8a3cba48bf19126600e249ab7f128e9233e6376976a116"; };
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enumflags2."0.7.8" = overridableMkRustCrate (profileName: rec {
    name = "enumflags2";
    version = "0.7.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5998b4f30320c9d93aed72f63af821bfdac50465b75428fce77b48ec482c3939"; };
    dependencies = {
      enumflags2_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enumflags2_derive."0.7.8" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".enumflags2_derive."0.7.8" = overridableMkRustCrate (profileName: rec {
    name = "enumflags2_derive";
    version = "0.7.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f95e2801cd355d4a1a3e3953ce6ee5ae9603a5c833455343a8bfe3f44d418246"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85cdab6a89accf66733ad5a1693a4dcced6aeff64602b634530dd73c1f3ee9f0"; };
    features = builtins.concatLists [
      [ "auto-color" ]
      [ "color" ]
      [ "default" ]
      [ "humantime" ]
      [ "regex" ]
    ];
    dependencies = {
      humantime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" { inherit profileName; }).out;
      is_terminal = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".is-terminal."0.4.9" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      termcolor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".termcolor."1.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".environmental."1.1.4" = overridableMkRustCrate (profileName: rec {
    name = "environmental";
    version = "1.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e48c92028aaa870e83d51c64e5d4e0b6981b360c522198c23959f219a4e1b15b"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "equivalent";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".errno."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "errno";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3e13f66a2f95e32a39eaa81f6b95d42878ca0e1db0c7543723dfe12557e860"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "hermit" || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/espressosystems/espresso-systems-common".espresso-systems-common."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "espresso-systems-common";
    version = "0.4.0";
    registry = "git+https://github.com/espressosystems/espresso-systems-common";
    src = fetchCrateGit {
      url = https://github.com/espressosystems/espresso-systems-common;
      name = "espresso-systems-common";
      version = "0.4.0";
      rev = "5abd890f79014a86db31286e1f3a529f161e69de";};
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.3" = overridableMkRustCrate (profileName: rec {
    name = "event-listener";
    version = "2.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0206175f82b8d6bf6652ff7d71a1e27fd2e4efde587fd368662814d6ec1d9ce0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".exit-future."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "exit-future";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e43f2f1833d64e33f15592464d6fdd70f349dda7b1a53088eb83cd94014008c5"; };
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".expander."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "expander";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f86a749cf851891866c10515ef6c299b5c69661465e9c3bbe7e07a2b77fb0f7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "syn" ]
      [ "syndicate" ]
    ];
    dependencies = {
      blake2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      fs_err = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fs-err."2.9.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fake-simd."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "fake-simd";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fallible-iterator";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."1.9.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "1.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "wasi") then "instant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "2.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "25cbce373ec4653f1a01a31e8a5e5ec0c622dc27ff9c4e6606eefef5cbbed4a5"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fdlimit."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "fdlimit";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c4c9e43643f5a3be4ca5b67d26b98031ff9db6806c3440ae32e02e3ceac3f1b"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ff."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "ff";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d013fc25338cc558c5c2cfbad646908fb23591e2404481826742b651c9af7160"; };
    dependencies = {
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ff."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "ff";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ded41244b729663b1e574f1b4fb731469f69f79c17667b5d776b16cda0479449"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fiat-crypto."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "fiat-crypto";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a481586acf778f1b1455424c343f71124b048ffa5f4fc3f8f6ae9dc432dcb3c7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".file-per-thread-logger."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "file-per-thread-logger";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "84f2e425d9790201ba4af4630191feac6dcc98765b118d4d18e91d23c2353866"; };
    dependencies = {
      env_logger = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.10.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.22" = overridableMkRustCrate (profileName: rec {
    name = "filetime";
    version = "0.2.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4029edd3e734da6fe05b6cd7bd2960760a616bd2ddd0d59a0124746d6272af0"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.3.5" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".finality-aleph."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "finality-aleph";
    version = "0.8.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/only_legacy" || rootFeatures' ? "finality-aleph/only_legacy") "only_legacy")
    ];
    dependencies = {
      legacy_aleph_aggregator = (rustPackages."git+https://github.com/Cardinal-Cryptography/aleph-node.git".aggregator."0.2.1" { inherit profileName; }).out;
      current_aleph_aggregator = (rustPackages."unknown".aggregator."0.4.0" { inherit profileName; }).out;
      legacy_aleph_bft = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft."0.19.3" { inherit profileName; }).out;
      current_aleph_bft = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft."0.20.5" { inherit profileName; }).out;
      aleph_bft_crypto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-crypto."0.5.2" { inherit profileName; }).out;
      legacy_aleph_bft_rmc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-rmc."0.5.2" { inherit profileName; }).out;
      current_aleph_bft_rmc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-rmc."0.6.1" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      derive_more = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; }).out;
      env_logger = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.10.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
      ip_network = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ip_network."0.4.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      lru = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.8.1" { inherit profileName; }).out;
      network_clique = (rustPackages."unknown".network-clique."0.5.0" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      primitives = (rustPackages."unknown".primitives."0.7.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rate_limiter = (rustPackages."unknown".rate-limiter."0.1.0" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sc_network_common = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-common."0.10.0-dev" { inherit profileName; }).out;
      sc_network_sync = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-sync."0.10.0-dev" { inherit profileName; }).out;
      sc_service = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-service."0.10.0-dev" { inherit profileName; }).out;
      sc_telemetry = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      substrate_prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
      bip39 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-bip39."1.0.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
    devDependencies = {
      aleph_runtime = (rustPackages."unknown".aleph-runtime."0.12.0" { inherit profileName; }).out;
      sc_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; }).out;
      substrate_test_client = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-test-client."2.0.1" { inherit profileName; }).out;
      substrate_test_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-test-runtime."2.0.0" { inherit profileName; }).out;
      substrate_test_runtime_client = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-test-runtime-client."2.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".finality-grandpa."0.16.2" = overridableMkRustCrate (profileName: rec {
    name = "finality-grandpa";
    version = "0.16.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "36530797b9bf31cd4ff126dcfee8170f86b00cfdcea3269d73133cc0415945c3"; };
    features = builtins.concatLists [
      [ "derive-codec" ]
      [ "futures-timer" ]
      [ "log" ]
      [ "parity-scale-codec" ]
      [ "parking_lot" ]
      [ "scale-info" ]
      [ "std" ]
    ];
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      num = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixed-hash."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "fixed-hash";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534"; };
    features = builtins.concatLists [
      [ "byteorder" ]
      [ "rand" ]
      [ "rustc-hex" ]
      [ "std" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rustc_hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hex."2.1.0" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.28" = overridableMkRustCrate (profileName: rec {
    name = "flate2";
    version = "1.0.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46303f565772937ffe1d394a4fac6f411c6013172fadde9dcdb1e147a086940e"; };
    features = builtins.concatLists [
      [ "any_impl" ]
      [ "any_zlib" ]
      [ "libz-sys" ]
      [ "zlib" ]
    ];
    dependencies = {
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; }).out;
      libz_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.12" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && !(hostPlatform.parsed.kernel.name == "emscripten") then "miniz_oxide" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".float-cmp."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "float-cmp";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "98de4bbd547a563b716d8dfa9aad1cb19bfab00f4fa09a6a4ed21dbcf44ce9c4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "num-traits" ]
      [ "ratio" ]
    ];
    dependencies = {
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".fork-tree."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "fork-tree";
    version = "3.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "fork-tree";
      version = "3.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "form_urlencoded";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a62bc1cf6f830c2ec14a513a9fb124d0a213a629668a4186f329db21fe045652"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fragile."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "fragile";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c2141d6d6c8512188a7891b4b01590a45f6dac67afb4f255c4124dbb86d4eaa"; };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-benchmarking";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-benchmarking";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "default")
      [ "linregress" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/runtime-benchmarks") "runtime-benchmarks")
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_support_procedural = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support-procedural."4.0.0-dev" { profileName = "__noProfile"; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      linregress = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linregress."0.5.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_runtime_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime-interface."17.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_storage = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-storage."13.0.0" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking-cli."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-benchmarking-cli";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-benchmarking-cli";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "runtime-benchmarks")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "inflector" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "array_bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "chrono" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.31" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "clap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.4.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "comfy_table" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".comfy-table."7.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "frame_benchmarking" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "frame_support" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "frame_system" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "gethostname" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gethostname."0.2.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "handlebars" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".handlebars."4.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "itertools" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "linked_hash_map" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "rand_pcg" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sc_block_builder" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sc_cli" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-cli."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sc_client_api" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sc_client_db" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-db."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sc_executor" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sc_service" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-service."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sc_sysinfo" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-sysinfo."6.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_api" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_blockchain" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_database" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-database."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_externalities" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_inherents" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_io" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_keystore" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_state_machine" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_storage" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-storage."13.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_trie" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sp_wasm_interface" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-wasm-interface."14.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "thousands" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thousands."0.2.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-election-provider-solution-type."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-election-provider-solution-type";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-election-provider-solution-type";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-election-provider-support."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-election-provider-support";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-election-provider-support";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_election_provider_solution_type = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-election-provider-solution-type."4.0.0-dev" { profileName = "__noProfile"; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_npos_elections = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-npos-elections."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-executive."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-executive";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-executive";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "frame-try-runtime" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      frame_try_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-try-runtime."0.10.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_tracing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-tracing."10.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".frame-metadata."15.1.0" = overridableMkRustCrate (profileName: rec {
    name = "frame-metadata";
    version = "15.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "878babb0b136e731cc77ec2fd883ff02745ff21e6fb662729953d44923df009c"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "scale-info")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "v14")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".frame-metadata."16.0.0" = overridableMkRustCrate (profileName: rec {
    name = "frame-metadata";
    version = "16.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87cf1549fba25a6fcac22785b61698317d958e96cac72a59102ea45b9ae64692"; };
    features = builtins.concatLists [
      [ "current" ]
      [ "decode" ]
      [ "scale-info" ]
      [ "serde" ]
      [ "serde_full" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-remote-externalities."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-remote-externalities";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-remote-externalities";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "async_recursion" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-recursion."1.0.5" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "indicatif" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indicatif."0.17.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_io" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "spinners" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spinners."4.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "substrate_rpc_client" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-rpc-client."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "tokio_retry" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-retry."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".frame-support."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-support";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "frame-support";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "frame_metadata" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".frame-metadata."15.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "frame_support_procedural" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".frame-support-procedural."4.0.0-dev" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "impl_trait_for_tuples" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "k256" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".k256."0.11.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "paste" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_api" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-api."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_arithmetic" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-arithmetic."6.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core_hashing_proc_macro" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core-hashing-proc-macro."5.0.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_inherents" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_io" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-io."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_staking" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_tracing" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-tracing."6.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_weights" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-weights."4.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "tt_call" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tt-call."1.0.9" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-support";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-support";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/runtime-benchmarks") "runtime-benchmarks")
      [ "sp-state-machine" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime" || rootFeatures' ? "pallet-aleph/try-runtime" || rootFeatures' ? "pallet-committee-management/try-runtime" || rootFeatures' ? "pallet-elections/try-runtime" || rootFeatures' ? "pallets-support/try-runtime") "try-runtime")
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      environmental = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".environmental."1.1.4" { inherit profileName; }).out;
      frame_metadata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".frame-metadata."16.0.0" { inherit profileName; }).out;
      frame_support_procedural = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support-procedural."4.0.0-dev" { profileName = "__noProfile"; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      k256 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".k256."0.13.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      macro_magic = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".macro_magic."0.4.2" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_core_hashing_proc_macro = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core-hashing-proc-macro."9.0.0" { profileName = "__noProfile"; }).out;
      sp_debug_derive = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-debug-derive."8.0.0" { profileName = "__noProfile"; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_tracing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-tracing."10.0.0" { inherit profileName; }).out;
      sp_weights = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-weights."20.0.0" { inherit profileName; }).out;
      tt_call = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tt-call."1.0.9" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".frame-support-procedural."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-support-procedural";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "frame-support-procedural";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "inflector" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "cfg_expr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-expr."0.10.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "derive_syn_parse" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive-syn-parse."0.1.5" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "frame_support_procedural_tools" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".frame-support-procedural-tools."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "itertools" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support-procedural."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-support-procedural";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-support-procedural";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      inflector = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; }).out;
      cfg_expr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-expr."0.15.5" { inherit profileName; }).out;
      derive_syn_parse = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive-syn-parse."0.1.5" { profileName = "__noProfile"; }).out;
      expander = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".expander."2.0.0" { inherit profileName; }).out;
      frame_support_procedural_tools = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support-procedural-tools."4.0.0-dev" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      macro_magic = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".macro_magic."0.4.2" { inherit profileName; }).out;
      proc_macro_warning = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-warning."0.4.2" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".frame-support-procedural-tools."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-support-procedural-tools";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "frame-support-procedural-tools";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "frame_support_procedural_tools_derive" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".frame-support-procedural-tools-derive."3.0.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support-procedural-tools."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-support-procedural-tools";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-support-procedural-tools";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      frame_support_procedural_tools_derive = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support-procedural-tools-derive."3.0.0" { profileName = "__noProfile"; }).out;
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".frame-support-procedural-tools-derive."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "frame-support-procedural-tools-derive";
    version = "3.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "frame-support-procedural-tools-derive";
      version = "3.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support-procedural-tools-derive."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "frame-support-procedural-tools-derive";
    version = "3.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-support-procedural-tools-derive";
      version = "3.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".frame-system."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-system";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "frame-system";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "frame_support" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".frame-support."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_io" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-io."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_version" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-version."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_weights" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-weights."4.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-system";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-system";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/runtime-benchmarks") "runtime-benchmarks")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      sp_weights = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-weights."20.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system-rpc-runtime-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-system-rpc-runtime-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-system-rpc-runtime-api";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".frame-try-runtime."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "frame-try-runtime";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "frame-try-runtime";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime") "default")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fs-err."2.9.0" = overridableMkRustCrate (profileName: rec {
    name = "fs-err";
    version = "2.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0845fa252299212f0389d64ba26f34fa32cfe41588355f21ed507c59a0f64541"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fs2."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "fs2";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".funty."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "funty";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" = overridableMkRustCrate (profileName: rec {
    name = "futures";
    version = "0.3.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da0290714b38af9b4a7b094b8a37086d1b4e61f2df9122c3cad2577669145335"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "bilock" ]
      [ "default" ]
      [ "executor" ]
      [ "futures-executor" ]
      [ "std" ]
      [ "thread-pool" ]
      [ "unstable" ]
    ];
    dependencies = {
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.29" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_executor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.29" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.29" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.29" { inherit profileName; }).out;
      futures_task = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.29" = overridableMkRustCrate (profileName: rec {
    name = "futures-channel";
    version = "0.3.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ff4dd66668b557604244583e3e1e1eada8c5c2e96a6d0d6653ede395b78bbacb"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "futures-sink" ]
      [ "sink" ]
      [ "std" ]
      [ "unstable" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.29" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb1d22c66e66d9d72e1758f0bd7d4fd0bee04cad842ee34587d68c07e45d088c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
      [ "unstable" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.29" = overridableMkRustCrate (profileName: rec {
    name = "futures-executor";
    version = "0.3.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0f4fb8693db0cf099eadcca0efe2a5a22e4550f98ed16aba6c48700da29597bc"; };
    features = builtins.concatLists [
      [ "num_cpus" ]
      [ "std" ]
      [ "thread-pool" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_task = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.29" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8bf34a163b5c4c52d0478a4d757da8fb65cabef42ba90515efee0f6f9fa45aaa"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "unstable" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.13.0" = overridableMkRustCrate (profileName: rec {
    name = "futures-lite";
    version = "1.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49a9d51ce47660b1e808d3c990b4709f2f415d928835a17dfd16991515c46bce"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "fastrand" ]
      [ "futures-io" ]
      [ "memchr" ]
      [ "parking" ]
      [ "std" ]
      [ "waker-fn" ]
    ];
    dependencies = {
      fastrand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.9.0" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.29" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      parking = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      waker_fn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.29" = overridableMkRustCrate (profileName: rec {
    name = "futures-macro";
    version = "0.3.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53b153fd91e4b0147f4aced87be237c98248656bb01050b96bf3ee89220a8ddb"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-rustls."0.22.2" = overridableMkRustCrate (profileName: rec {
    name = "futures-rustls";
    version = "0.22.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2411eed028cdf8c8034eaf21f9915f956b6c3abec4d4c7949ee67f0721127bd"; };
    dependencies = {
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.29" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.20.9" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.22.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.29" = overridableMkRustCrate (profileName: rec {
    name = "futures-sink";
    version = "0.3.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e36d3378ee38c2a36ad710c5d30c2911d752cb941c00c72dbabfb786a7970817"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.29" = overridableMkRustCrate (profileName: rec {
    name = "futures-task";
    version = "0.3.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "efd193069b0ddadc69c46389b740bbccdd97203899b48d09c5f7969591d6bae2"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
      [ "unstable" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" = overridableMkRustCrate (profileName: rec {
    name = "futures-timer";
    version = "3.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e64b03909df88034c26dc1547e8970b91f98bdb65165d6a4e9110d94263dbb2c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" = overridableMkRustCrate (profileName: rec {
    name = "futures-util";
    version = "0.3.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a19526d624e703a3179b3d322efec918b6246ea0fa51d41124525f00f1cc8104"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "async-await" ]
      [ "async-await-macro" ]
      [ "bilock" ]
      [ "channel" ]
      [ "default" ]
      [ "futures-channel" ]
      [ "futures-io" ]
      [ "futures-macro" ]
      [ "futures-sink" ]
      [ "io" ]
      [ "memchr" ]
      [ "sink" ]
      [ "slab" ]
      [ "std" ]
      [ "unstable" ]
    ];
    dependencies = {
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.29" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.29" { inherit profileName; }).out;
      futures_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.29" { profileName = "__noProfile"; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.29" { inherit profileName; }).out;
      futures_task = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.29" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      pin_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "fxhash";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"; };
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffdf9f34f1447443d37393cc6c2b8313aebddcd96906caf34e54c68d8e57d7bd"; };
    dependencies = {
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" = overridableMkRustCrate (profileName: rec {
    name = "generic-array";
    version = "0.14.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a"; };
    features = builtins.concatLists [
      [ "more_lengths" ]
      [ "zeroize" ]
    ];
    dependencies = {
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gethostname."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "gethostname";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1ebd34e35c46e00bb73e81363248d627782724609fe1b6396f553f68fe3862e"; };
    dependencies = {
      ${ if (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") && !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") && hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be4136b2a15dd319360be1c07d9933517ccf0be8f16bf62a3bee4f0d618df427"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ghash."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "ghash";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1583cc1656d7839fd3732b80cf4f38850336cdb9b8ded1cd399ca62958de3c99"; };
    dependencies = {
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
      polyval = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".polyval."0.5.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ghash."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "ghash";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d930750de5717d2dd0b8c0d42c076c0e884c81a73e6cab859bbd2339c71e3e40"; };
    dependencies = {
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
      polyval = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".polyval."0.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.27.3" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.27.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6c80984affa11d98d1b88b66ac8853f143217b399d3c74116778ff8fdb4ed2e"; };
    features = builtins.concatLists [
      [ "fallible-iterator" ]
      [ "indexmap" ]
      [ "read" ]
      [ "read-core" ]
      [ "stable_deref_trait" ]
      [ "std" ]
      [ "write" ]
    ];
    dependencies = {
      fallible_iterator = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; }).out;
      stable_deref_trait = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gimli."0.28.0" = overridableMkRustCrate (profileName: rec {
    name = "gimli";
    version = "0.28.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6fb8d784f27acf97159b40fc4db5ecd8aa23b9ad5ef69cdd136d3bc80665f0c0"; };
    features = builtins.concatLists [
      [ "read" ]
      [ "read-core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "glob";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".globset."0.4.13" = overridableMkRustCrate (profileName: rec {
    name = "globset";
    version = "0.4.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "759c97c1e17c55525b57192c06a267cda0ac5210b222d6b82189a2338fa1c13d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.2" { inherit profileName; }).out;
      bstr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bstr."1.7.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".group."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "group";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5dfbfb3a6cfbd390d5c9564ab283a0349b9b9fcd46a706c1eb10e0db70bfbac7"; };
    dependencies = {
      ff = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ff."0.12.1" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".group."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "group";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0f9ef7462f7c099f518d754361858f86d8a07af53ba9af0fe635bbccb151a63"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      ff = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ff."0.13.0" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".h2."0.3.21" = overridableMkRustCrate (profileName: rec {
    name = "h2";
    version = "0.3.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91fc23aa11be92976ef4729127f1a74adf36d8436f7816b185d18df956790833"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tokio_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.10" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".handlebars."4.4.0" = overridableMkRustCrate (profileName: rec {
    name = "handlebars";
    version = "4.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c39b3bc2a8f715298032cf5087e58573809374b08160aa7d750582bdb82d2683"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "pest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.7.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "pest_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pest_derive."2.7.5" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "hash-db";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d23bd4e7b5eda0d0f3a307e8b381fdc8ba9000f26fbe912250c0a4cc3956364a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "hash-db";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e7d7786361d7425ae2fe4f9e407eb0efaa0840f5212d109cc018c40c35c6ab4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hash256-std-hasher."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "hash256-std-hasher";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "92c171d55b98633f4ed3860808f004099b36c1cc29c42cfc53aa8591b21efcf2"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      crunchy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "default" ]
      [ "inline-more" ]
      [ "raw" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.13.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "default" ]
      [ "inline-more" ]
      [ "raw" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.2" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.14.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f93e7192158dbcda357bdec5fb5788eebf8bbac027f3f33e719d29135ae84156"; };
    features = builtins.concatLists [
      [ "raw" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d77f7ec81a6d05a3abb01ab6eb7590f6083d08449fe5a1c8b1e620283546ccb7"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex-literal."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "hex-literal";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ebdb29d2ea9ed0083cd8cece49bbd968021bd99b0849edb4a9a7ee0fdf6a4e0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "hkdf";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "791a029f6b9fc27657f6f188ec6e5e43f6911f6f878e0dc5501396e09809d437"; };
    dependencies = {
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "hmac";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "126888268dcc288495a26bf004b38c5fdbb31682f992c84ceb046a1f0fe38840"; };
    dependencies = {
      crypto_mac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.8.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "hmac";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2a2a2320eb7ec0ebe8da8f744d7812d9fc4cb4d09344ac01898dbcb6a20ae69b"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      crypto_mac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.11.1" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "hmac";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e"; };
    features = builtins.concatLists [
      [ "reset" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hmac-drbg."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "hmac-drbg";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "17ea0a1394df5b6574da6e0c1ade9e78868c9fb0a4e5ef4428e32da4676b85b1"; };
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".home."0.5.5" = overridableMkRustCrate (profileName: rec {
    name = "home";
    version = "0.5.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5444c27eef6923071f7ebcc33e3444508466a76f7a2b93da00ed6e19f30c1ddb"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hostname."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "hostname";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c731c3e10504cc8ed35cfe2f1db4c9274c3d35fa486e3b31df46f068ef3e867"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "redox" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      match_cfg = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".match_cfg."0.1.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" = overridableMkRustCrate (profileName: rec {
    name = "http";
    version = "0.2.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd6effc99afb63425aff9b05836f029929e345a6148a14b7ecd5ab67af944482"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "http-body";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d5f38f16d184e36f2408a55281cd658ecbd3ca05cce6d6510a176eca393e26d1"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".http-range-header."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "http-range-header";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "add0ab9360ddbd88cfeb3bd9574a1d85cfdfa14db10b3e21d3700dbc4328758f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".httparse."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "httparse";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "httpdate";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".humantime."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "humantime";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.27" = overridableMkRustCrate (profileName: rec {
    name = "hyper";
    version = "0.14.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffb1cfd654a8219eaef89881fdb3bb3b1cdc5fa75ded05d6933b2b382e395468"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "default" ]
      [ "h2" ]
      [ "http1" ]
      [ "http2" ]
      [ "runtime" ]
      [ "server" ]
      [ "socket2" ]
      [ "stream" ]
      [ "tcp" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.29" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      h2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.3.21" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.5" { inherit profileName; }).out;
      httparse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.8.0" { inherit profileName; }).out;
      httpdate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.9" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.10" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      want = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.24.2" = overridableMkRustCrate (profileName: rec {
    name = "hyper-rustls";
    version = "0.24.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec3efd23720e2049821a693cbc7e65ea87c72f1c58ff2f9522ff332b1491e590"; };
    features = builtins.concatLists [
      [ "acceptor" ]
      [ "default" ]
      [ "http1" ]
      [ "http2" ]
      [ "log" ]
      [ "logging" ]
      [ "native-tokio" ]
      [ "rustls-native-certs" ]
      [ "tls12" ]
      [ "tokio-runtime" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "webpki-roots")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "webpki-tokio")
    ];
    dependencies = {
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.27" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.8" { inherit profileName; }).out;
      rustls_native_certs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.6.3" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tokio_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "webpki_roots" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.25.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.58" = overridableMkRustCrate (profileName: rec {
    name = "iana-time-zone";
    version = "0.1.58";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8326b86b6cff230b97d0d312a6c40a60726df3332e721f72a1b035f451663b20"; };
    features = builtins.concatLists [
      [ "fallback" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" then "android_system_properties" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "core_foundation_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "haiku" then "iana_time_zone_haiku" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.2" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.65" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.88" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-core."0.51.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "iana-time-zone-haiku";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f"; };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ident_case";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8"; };
    dependencies = {
      matches = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".matches."0.1.10" { inherit profileName; }).out;
      unicode_bidi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.13" { inherit profileName; }).out;
      unicode_normalization = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.22" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".idna."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "idna";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      unicode_bidi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.13" { inherit profileName; }).out;
      unicode_normalization = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.22" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".if-addrs."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "if-addrs";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cbc0fa01ffc752e9dbc72818cdb072cd028b86be5e09dd04c5a643704fe101a9"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".if-watch."3.1.0" = overridableMkRustCrate (profileName: rec {
    name = "if-watch";
    version = "3.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bbb892e5777fe09e16f3d44de7802f4daa7267ecbe8c466f19d94e25bb0c303e"; };
    features = builtins.concatLists [
      [ "tokio" ]
    ];
    dependencies = {
      ${ if !(hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "windows") then "async_io" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."1.13.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "core_foundation" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "windows") || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "windows" then "if_addrs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-addrs."0.7.0" { inherit profileName; }).out;
      ipnet = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.9.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" then "rtnetlink" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtnetlink."0.10.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "system_configuration" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".system-configuration."0.5.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows."0.51.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".impl-codec."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "impl-codec";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "impl-serde";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "impl-trait-for-tuples";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99"; };
    features = builtins.concatLists [
      [ "serde" ]
      [ "serde-1" ]
      [ "std" ]
    ];
    dependencies = {
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d530e1a18b1cb4c484e6e34556a0d948706958449fca0cab753d649f2bce3d1f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      equivalent = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.1" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap-nostd."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "indexmap-nostd";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e04e2fd2b8188ea827b32ef11de88377086d690286ab35747ef7f9bf3ccb590"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indicatif."0.17.7" = overridableMkRustCrate (profileName: rec {
    name = "indicatif";
    version = "0.17.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb28741c9db9a713d93deb3bb9515c20788cef5815265bee4980e87bde7e0f25"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "unicode-width")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "console" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".console."0.15.7" { inherit profileName; }).out;
      ${ if (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") && hostPlatform.parsed.cpu.name == "wasm32" then "instant" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "number_prefix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".number_prefix."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "portable_atomic" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.5.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "unicode_width" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inout."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "inout";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".integer-sqrt."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "integer-sqrt";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "276ec31bcb4a9ee45f58bec6f9ec700ae4cf4f4f8f2fa7e06cb406bd5ffdd770"; };
    dependencies = {
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".interceptor."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "interceptor";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e8a11ae2da61704edada656798b61c94b35ecac2c58eb955156987d5e6be90b"; };
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rtcp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtcp."0.7.2" { inherit profileName; }).out;
      rtp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtp."0.6.8" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      waitgroup = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".waitgroup."0.1.2" { inherit profileName; }).out;
      srtp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-srtp."0.9.1" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".intx."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "intx";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f38a50a899dc47a6d0ed5508e7f601a2e34c3a85303514b5d137f3c10a0c75"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."1.0.11" = overridableMkRustCrate (profileName: rec {
    name = "io-lifetimes";
    version = "1.0.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2"; };
    features = builtins.concatLists [
      [ "close" ]
      [ "hermit-abi" ]
      [ "libc" ]
      [ "windows-sys" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.3" { inherit profileName; }).out;
      ${ if !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ip_network."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "ip_network";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa2f047c0a98b2f299aa5d6d7088443570faae494e9ae1305e48be000c9e0eb1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ipconfig."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "ipconfig";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b58db92f96b720de98181bbbe63c831e87005ab460c1bf306eb2622b4707997f"; };
    features = builtins.concatLists [
      [ "computer" ]
      [ "default" ]
      [ "winreg" ]
    ];
    dependencies = {
      ${ if hostPlatform.isWindows then "socket2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.5" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "widestring" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".widestring."1.0.2" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winreg" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winreg."0.50.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ipnet."2.9.0" = overridableMkRustCrate (profileName: rec {
    name = "ipnet";
    version = "2.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f518f335dce6725a761382244631d86cf0ccb2863413590b31338feb467f9c3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".is-terminal."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "is-terminal";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cb0889898416213fab133e1d33a0e5858a48177452750691bde3666d0fdbaf8b"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.3" { inherit profileName; }).out;
      ${ if !(hostPlatform.isWindows || hostPlatform.parsed.kernel.name == "hermit" || hostPlatform.parsed.kernel.name == "unknown") then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.21" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" = overridableMkRustCrate (profileName: rec {
    name = "itertools";
    version = "0.10.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_alloc" ]
      [ "use_std" ]
    ];
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af150ab688ff2122fcef229be89cb50dd66af9e01a4ff320cc137eecc9bacc38"; };
  });
  
  "git+https://github.com/Cardinal-Cryptography/jellyfish".jf-plonk."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jf-plonk";
    version = "0.3.0";
    registry = "git+https://github.com/Cardinal-Cryptography/jellyfish";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/jellyfish;
      name = "jf-plonk";
      version = "0.3.0";
      rev = "6d4548574d79062a5fc3f760cdaa35a50c842cdf";
      ref = "substrate-compatible";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_poly" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-poly."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "derivative" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "displaydoc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "downcast_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "dyn_clone" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clone."1.0.16" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "espresso_systems_common" else null } = (rustPackages."git+https://github.com/espressosystems/espresso-systems-common".espresso-systems-common."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "itertools" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "jf_primitives" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/jellyfish".jf-primitives."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "jf_relation" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/jellyfish".jf-relation."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "jf_utils" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/jellyfish".jf-utils."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "merlin" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".merlin."3.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "rand_chacha" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "sha3" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "tagged_base64" else null } = (rustPackages."git+https://github.com/EspressoSystems/tagged-base64".tagged-base64."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/jellyfish".jf-primitives."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jf-primitives";
    version = "0.3.0";
    registry = "git+https://github.com/Cardinal-Cryptography/jellyfish";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/jellyfish;
      name = "jf-primitives";
      version = "0.3.0";
      rev = "6d4548574d79062a5fc3f760cdaa35a50c842cdf";
      ref = "substrate-compatible";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bls12_377" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bls12-377."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bls12_381" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bls12-381."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bn254" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bn254."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bw6_761" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bw6-761."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_crypto_primitives" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-crypto-primitives."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ed_on_bls12_377" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ed-on-bls12-377."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ed_on_bls12_381" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ed-on-bls12-381."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ed_on_bn254" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ed-on-bn254."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_poly" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-poly."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "blst" else null } = (rustPackages."git+https://github.com/EspressoSystems/blst.git".blst."0.3.10" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "crypto_box" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto_box."0.8.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "derivative" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "digest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "displaydoc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "espresso_systems_common" else null } = (rustPackages."git+https://github.com/espressosystems/espresso-systems-common".espresso-systems-common."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "generic_array" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "itertools" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "jf_relation" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/jellyfish".jf-relation."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "jf_utils" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/jellyfish".jf-utils."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "merlin" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".merlin."3.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "rand_chacha" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "sha2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "sha3" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "tagged_base64" else null } = (rustPackages."git+https://github.com/EspressoSystems/tagged-base64".tagged-base64."0.3.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "typenum" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/jellyfish".jf-relation."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jf-relation";
    version = "0.3.0";
    registry = "git+https://github.com/Cardinal-Cryptography/jellyfish";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/jellyfish;
      name = "jf-relation";
      version = "0.3.0";
      rev = "6d4548574d79062a5fc3f760cdaa35a50c842cdf";
      ref = "substrate-compatible";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bls12_377" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bls12-377."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bls12_381" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bls12-381."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bn254" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bn254."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bw6_761" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bw6-761."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_poly" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-poly."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "derivative" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "displaydoc" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.4" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "downcast_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "dyn_clone" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clone."1.0.16" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "hashbrown" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "jf_utils" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/jellyfish".jf-utils."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "num_bigint" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "rand_chacha" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/jellyfish".jf-utils."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jf-utils";
    version = "0.3.0";
    registry = "git+https://github.com/Cardinal-Cryptography/jellyfish";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/jellyfish;
      name = "jf-utils";
      version = "0.3.0";
      rev = "6d4548574d79062a5fc3f760cdaa35a50c842cdf";
      ref = "substrate-compatible";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ec."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_ff" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-ff."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "digest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "sha2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "tagged_base64" else null } = (rustPackages."git+https://github.com/EspressoSystems/tagged-base64".tagged-base64."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.27" = overridableMkRustCrate (profileName: rec {
    name = "jobserver";
    version = "0.1.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c37f63953c4c63420ed5fd3d6d398c719489b9f872b9fa683262f8edd363c7d"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.65" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.65";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54c0c35952f67de54bb584e9fd912b3023117cbafc0a77d8f3dee1fb5f572fe8"; };
    dependencies = {
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.88" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpsee";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "367a292944c07385839818bb71c8d76611138e2dedb0677d035b8da21d29c78b"; };
    features = builtins.concatLists [
      [ "client-core" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "http-client")
      [ "jsonrpsee-core" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "jsonrpsee-http-client")
      [ "jsonrpsee-proc-macros" ]
      [ "jsonrpsee-server" ]
      [ "jsonrpsee-types" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "jsonrpsee-ws-client")
      [ "macros" ]
      [ "server" ]
      [ "server-core" ]
      [ "tracing" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "ws-client")
    ];
    dependencies = {
      jsonrpsee_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-core."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee_http_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-http-client."0.16.3" { inherit profileName; }).out;
      jsonrpsee_proc_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-proc-macros."0.16.3" { profileName = "__noProfile"; }).out;
      jsonrpsee_server = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-server."0.16.3" { inherit profileName; }).out;
      jsonrpsee_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-types."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee_ws_client" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-ws-client."0.16.3" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-client-transport."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpsee-client-transport";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c8b3815d9f5d5de348e5f162b316dc9cdf4548305ebb15b4eb9328e66cf27d7a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "futures-util")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "http")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "jsonrpsee-types")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "pin-project")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "rustls-native-certs")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "soketto")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "thiserror")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "tls")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "tokio")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "tokio-rustls")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "tokio-util")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "webpki-roots")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "ws")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "futures_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "http" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-core."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-types."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "pin_project" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "rustls_native_certs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.6.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "soketto" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".soketto."0.7.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "tokio_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "tokio_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.10" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "webpki_roots" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.25.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-core."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpsee-core";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b5dde66c53d6dcdc8caea1874a45632ec0fcf5b437789f1e45766a1512ce803"; };
    features = builtins.concatLists [
      [ "arrayvec" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "async-client")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "async-lock")
      [ "client" ]
      [ "default" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "futures-timer")
      [ "futures-util" ]
      [ "globset" ]
      [ "http-helpers" ]
      [ "hyper" ]
      [ "parking_lot" ]
      [ "rand" ]
      [ "rustc-hash" ]
      [ "server" ]
      [ "soketto" ]
      [ "tokio" ]
    ];
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "async_lock" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."2.8.0" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      beef = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".beef."0.5.2" { inherit profileName; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.29" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "futures_timer" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      globset = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".globset."0.4.13" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.27" { inherit profileName; }).out;
      jsonrpsee_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-types."0.16.3" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rustc_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      soketto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".soketto."0.7.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-http-client."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpsee-http-client";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e5f9fabdd5d79344728521bb65e3106b49ec405a78b66fbff073b72b389fa43"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "hyper-rustls")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "tls")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "hyper" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.27" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "hyper_rustls" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.24.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-core."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-types."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "rustc_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-proc-macros."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpsee-proc-macros";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44e8ab85614a08792b9bff6c8feee23be78c98d0182d4c622c05256ab553892a"; };
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-server."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpsee-server";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf4d945a6008c9b03db3354fb3c83ee02d2faa9f2e755ec1dfb69c3551b8f4ba"; };
    dependencies = {
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.27" { inherit profileName; }).out;
      jsonrpsee_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-core."0.16.3" { inherit profileName; }).out;
      jsonrpsee_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-types."0.16.3" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      soketto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".soketto."0.7.1" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tokio_stream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.14" { inherit profileName; }).out;
      tokio_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.10" { inherit profileName; }).out;
      tower = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower."0.4.13" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-types."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpsee-types";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "245ba8e5aa633dd1c1e4fae72bce06e71f42d34c14a2767c6b4d173b57bee5e5"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      beef = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".beef."0.5.2" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-ws-client."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "jsonrpsee-ws-client";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e1b3975ed5d73f456478681a417128597acd6a2487855fdb7b4a3d4d195bf5e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "tls")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "http" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee_client_transport" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-client-transport."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-core."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee-types."0.16.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".k256."0.11.6" = overridableMkRustCrate (profileName: rec {
    name = "k256";
    version = "0.11.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72c1e0b51e7ec0a97369623508396067a486bd0cbed95a2659a4b863d28cfc8b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "arithmetic")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "digest")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "ecdsa")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "ecdsa-core")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "sha2")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "sha256")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "ecdsa_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.14.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "elliptic_curve" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.12.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sha2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".k256."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "k256";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cadb76004ed8e97623117f3df85b17aaa6626ab0b0831e6573f104df16cd1bcc"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "arithmetic" ]
      [ "digest" ]
      [ "ecdsa" ]
      [ "ecdsa-core" ]
      [ "sha2" ]
      [ "sha256" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ecdsa_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.16.8" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.13.6" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".keccak."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "keccak";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f6d5ed8676d904364de097082f4e7d240b571b67989ced0240f08b7f966f940"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "aarch64" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kvdb."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "kvdb";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7d770dcb02bf6835887c3a979b5107a04ff4bbde97a5f0928d27404a155add9"; };
    dependencies = {
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kvdb-memorydb."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "kvdb-memorydb";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bf7a85fe66f9ff9cd74e169fdd2c94c6e1e74c412c99a73b4df3200b5d3760b2"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      kvdb = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb."0.13.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kvdb-rocksdb."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "kvdb-rocksdb";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b644c70b92285f66bfc2032922a79000ea30af7bc2ab31902992a5dcb9b434f6"; };
    dependencies = {
      kvdb = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb."0.13.0" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.abi.name == "msvc") || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.abi.name == "msvc" then "rocksdb" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rocksdb."0.21.0" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lazycell";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.150";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "89d92a4743f9a61002fae18374ed11e7973f530cb3a3255fb354818118b2203c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "extra_traits" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libm."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "libm";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p."0.50.1" = overridableMkRustCrate (profileName: rec {
    name = "libp2p";
    version = "0.50.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c7b0104790be871edcf97db9bd2356604984e623a08d825c3f27852290266b8"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.38.0" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.41.1" { inherit profileName; }).out;
      multiaddr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.16.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p."0.51.3" = overridableMkRustCrate (profileName: rec {
    name = "libp2p";
    version = "0.51.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f210d259724eae82005b5c48078619b7745edb7b76de370b03f8ba59ea103097"; };
    features = builtins.concatLists [
      [ "dns" ]
      [ "identify" ]
      [ "kad" ]
      [ "macros" ]
      [ "mdns" ]
      [ "noise" ]
      [ "ping" ]
      [ "request-response" ]
      [ "tcp" ]
      [ "tokio" ]
      [ "wasm-ext" ]
      [ "websocket" ]
      [ "yamux" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      libp2p_allow_block_list = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-allow-block-list."0.1.1" { inherit profileName; }).out;
      libp2p_connection_limits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-connection-limits."0.1.0" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "libp2p_dns" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-dns."0.39.0" { inherit profileName; }).out;
      libp2p_identify = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identify."0.42.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_kad = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-kad."0.43.3" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "libp2p_mdns" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-mdns."0.43.1" { inherit profileName; }).out;
      libp2p_metrics = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-metrics."0.12.0" { inherit profileName; }).out;
      libp2p_noise = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-noise."0.42.2" { inherit profileName; }).out;
      libp2p_ping = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-ping."0.42.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "libp2p_quic" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-quic."0.7.0-alpha.3" { inherit profileName; }).out;
      libp2p_request_response = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-request-response."0.24.1" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "libp2p_tcp" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-tcp."0.39.0" { inherit profileName; }).out;
      libp2p_wasm_ext = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-wasm-ext."0.39.0" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "libp2p_webrtc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-webrtc."0.4.0-alpha.4" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "libp2p_websocket" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-websocket."0.41.0" { inherit profileName; }).out;
      libp2p_yamux = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-yamux."0.43.1" { inherit profileName; }).out;
      multiaddr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.17.1" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-allow-block-list."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-allow-block-list";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "510daa05efbc25184458db837f6f9a5143888f1caa742426d92e1833ddd38a50"; };
    dependencies = {
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-connection-limits."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-connection-limits";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4caa33f1d26ed664c4fe2cca81a08c8e07d4c1c04f2f4ac7655c2dd85467fda0"; };
    dependencies = {
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.38.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-core";
    version = "0.38.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6a8fcd392ff67af6cc3f03b1426c41f7f26b6b9aff2dc632c1c56dd649e571f"; };
    dependencies = {
      asn1_der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1_der."0.7.6" { inherit profileName; }).out;
      bs58 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bs58."0.4.0" { inherit profileName; }).out;
      ed25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."1.0.1" { inherit profileName; }).out;
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      multiaddr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.16.0" { inherit profileName; }).out;
      multihash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.16.3" { inherit profileName; }).out;
      multistream_select = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multistream-select."0.12.1" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      prost = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.11.9" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rw_stream_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rw-stream-sink."0.3.0" { inherit profileName; }).out;
      sec1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sec1."0.3.0" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      prost_build = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.11.9" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-core";
    version = "0.39.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c1df63c0b582aa434fb09b2d86897fa2b419ffeccf934b36f87fcedc8e835c2"; };
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      multiaddr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.17.1" { inherit profileName; }).out;
      multihash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.17.0" { inherit profileName; }).out;
      multistream_select = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multistream-select."0.12.1" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      quick_protobuf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-protobuf."0.8.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rw_stream_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rw-stream-sink."0.3.0" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-dns."0.39.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-dns";
    version = "0.39.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "146ff7034daae62077c415c2376b8057368042df6ab95f5432ad5e88568b1554"; };
    features = builtins.concatLists [
      [ "tokio" ]
    ];
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      trust_dns_resolver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-resolver."0.22.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-identify."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-identify";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5455f472243e63b9c497ff320ded0314254a9eb751799a39c283c6f20b793f3c"; };
    dependencies = {
      asynchronous_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.2" { inherit profileName; }).out;
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      lru = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.10.1" { inherit profileName; }).out;
      quick_protobuf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-protobuf."0.8.1" { inherit profileName; }).out;
      quick_protobuf_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-protobuf-codec."0.1.0" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-identity";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "276bb57e7af15d8f100d3c11cbdd32c6752b7eef4ba7a18ecf464972c07abcce"; };
    features = builtins.concatLists [
      [ "ed25519" ]
      [ "peerid" ]
    ];
    dependencies = {
      bs58 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bs58."0.4.0" { inherit profileName; }).out;
      ed25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."2.0.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      multiaddr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.17.1" { inherit profileName; }).out;
      multihash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.17.0" { inherit profileName; }).out;
      quick_protobuf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-protobuf."0.8.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-kad."0.43.3" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-kad";
    version = "0.43.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39d5ef876a2b2323d63c258e63c2f8e36f205fe5a11f0b3095d59635650790ff"; };
    dependencies = {
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      asynchronous_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.2" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      quick_protobuf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-protobuf."0.8.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      uint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uint."0.9.5" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-mdns."0.43.1" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-mdns";
    version = "0.43.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19983e1f949f979a928f2c603de1cf180cc0dc23e4ac93a62651ccb18341460b"; };
    features = builtins.concatLists [
      [ "tokio" ]
    ];
    dependencies = {
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      if_watch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-watch."3.1.0" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.10" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      trust_dns_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-proto."0.22.0" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-metrics."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-metrics";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a42ec91e227d7d0dafa4ce88b333cdf5f277253873ab087555c92798db2ddd46"; };
    features = builtins.concatLists [
      [ "identify" ]
      [ "kad" ]
      [ "libp2p-identify" ]
      [ "libp2p-kad" ]
      [ "libp2p-ping" ]
      [ "ping" ]
    ];
    dependencies = {
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identify = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identify."0.42.2" { inherit profileName; }).out;
      libp2p_kad = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-kad."0.43.3" { inherit profileName; }).out;
      libp2p_ping = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-ping."0.42.0" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" { inherit profileName; }).out;
      prometheus_client = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prometheus-client."0.19.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-noise."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-noise";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c3673da89d29936bc6435bafc638e2f184180d554ce844db65915113f86ec5e"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      quick_protobuf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-protobuf."0.8.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.cpu.name == "wasm32" then "snow" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".snow."0.9.3" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      x25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."1.1.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-ping."0.42.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-ping";
    version = "0.42.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e57759c19c28a73ef1eb3585ca410cefb72c1a709fcf6de1612a378e4219202"; };
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-quic."0.7.0-alpha.3" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-quic";
    version = "0.7.0-alpha.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c6b26abd81cd2398382a1edfe739b539775be8a90fa6914f39b2ab49571ec735"; };
    features = builtins.concatLists [
      [ "tokio" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      if_watch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-watch."3.1.0" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_tls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-tls."0.1.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      quinn_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quinn-proto."0.9.6" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.20.9" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-request-response."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-request-response";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ffdb374267d42dc5ed5bc53f6e601d4a64ac5964779c6e40bb9e4f14c1e30d5"; };
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_swarm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.41.1" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-swarm";
    version = "0.41.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2a35472fe3276b3855c00f1c032ea8413615e030256429ad5349cdf67c6e1a0"; };
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.38.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-swarm";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "903b3d592d7694e56204d211f29d31bc004be99386644ba8731fc3e3ef27b296"; };
    features = builtins.concatLists [
      [ "macros" ]
      [ "tokio" ]
    ];
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_swarm_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm-derive."0.32.0" { profileName = "__noProfile"; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" || hostPlatform.parsed.kernel.name == "unknown") then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      void = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-swarm-derive."0.32.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-swarm-derive";
    version = "0.32.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0fba456131824ab6acd4c7bf61e9c0f0a3014b5fc9868ccb8e10d344594cdc4f"; };
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-tcp."0.39.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-tcp";
    version = "0.39.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "33d33698596d7722d85d3ab0c86c2c322254fce1241e91208e3679b4eb3026cf"; };
    features = builtins.concatLists [
      [ "tokio" ]
    ];
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      if_watch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-watch."3.1.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.10" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-tls."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-tls";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ff08d13d0dc66e5e9ba6279c1de417b84fa0d0adc3b03e5732928c180ec02781"; };
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-rustls."0.22.2" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      rcgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rcgen."0.10.0" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.20.9" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.22.4" { inherit profileName; }).out;
      x509_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.14.0" { inherit profileName; }).out;
      yasna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yasna."0.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-wasm-ext."0.39.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-wasm-ext";
    version = "0.39.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77dff9d32353a5887adb86c8afc1de1a94d9e8c3bc6df8b2201d7cdf5c848f43"; };
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      js_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.65" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      parity_send_wrapper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-send-wrapper."0.1.0" { inherit profileName; }).out;
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.88" { inherit profileName; }).out;
      wasm_bindgen_futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.38" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-webrtc."0.4.0-alpha.4" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-webrtc";
    version = "0.4.0-alpha.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dba48592edbc2f60b4bc7c10d65445b0c3964c07df26fdf493b6880d33be36f8"; };
    features = builtins.concatLists [
      [ "tokio" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      asynchronous_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.2" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      if_watch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".if-watch."3.1.0" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      libp2p_noise = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-noise."0.42.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      multihash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.17.0" { inherit profileName; }).out;
      quick_protobuf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-protobuf."0.8.1" { inherit profileName; }).out;
      quick_protobuf_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-protobuf-codec."0.1.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rcgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rcgen."0.9.3" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      stun = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stun."0.4.4" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tinytemplate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinytemplate."1.2.1" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tokio_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.10" { inherit profileName; }).out;
      webrtc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc."0.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-websocket."0.41.0" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-websocket";
    version = "0.41.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "111273f7b3d3510524c752e8b7a5314b7f7a1fee7e68161c01a7d72cbb06db9f"; };
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-rustls."0.22.2" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      quicksink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quicksink."0.1.2" { inherit profileName; }).out;
      rw_stream_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rw-stream-sink."0.3.0" { inherit profileName; }).out;
      soketto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".soketto."0.7.1" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" { inherit profileName; }).out;
      webpki_roots = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.22.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libp2p-yamux."0.43.1" = overridableMkRustCrate (profileName: rec {
    name = "libp2p-yamux";
    version = "0.43.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4dcd21d950662700a385d4c6d68e2f5f54d778e97068cdd718522222ef513bda"; };
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libp2p_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-core."0.39.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      yamux = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yamux."0.10.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libredox."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "libredox";
    version = "0.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85c833ca1e66078851dba29046874e38f08b2c883700aa29a03ddd3b23814ee8"; };
    features = builtins.concatLists [
      [ "call" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.1" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      syscall = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".librocksdb-sys."0.11.0+8.1.1" = overridableMkRustCrate (profileName: rec {
    name = "librocksdb-sys";
    version = "0.11.0+8.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3386f101bcb4bd252d8e9d2fb41ec3b0862a15a62b478c355b2982efa469e3e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "jemalloc" ]
      [ "snappy" ]
      [ "static" ]
      [ "tikv-jemalloc-sys" ]
    ];
    dependencies = {
      bzip2_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bzip2-sys."0.1.11+1.0.8" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      libz_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.12" { inherit profileName; }).out;
      tikv_jemalloc_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tikv-jemalloc-sys."0.5.4+5.3.0-patched" { inherit profileName; }).out;
    };
    buildDependencies = {
      bindgen = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.65.1" { profileName = "__noProfile"; }).out;
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
      glob = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "95b09eff1b35ed3b33b877ced3a691fc7a481919c7e29c53c906226fcf55e2a1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "hmac" ]
      [ "hmac-drbg" ]
      [ "sha2" ]
      [ "static-context" ]
      [ "std" ]
      [ "typenum" ]
    ];
    dependencies = {
      arrayref = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      hmac_drbg = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac-drbg."0.3.0" { inherit profileName; }).out;
      libsecp256k1_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.3.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; }).out;
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      libsecp256k1_gen_ecmult = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-ecmult."0.3.0" { profileName = "__noProfile"; }).out;
      libsecp256k1_gen_genmult = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-genmult."0.3.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1-core";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5be9b9bb642d8522a44d533eab56c16c738301965504753b03ad1de3425d5451"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      crunchy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-ecmult."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1-gen-ecmult";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3038c808c55c87e8a172643a7d87187fc6c4174468159cb3090659d55bcb4809"; };
    dependencies = {
      libsecp256k1_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-gen-genmult."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "libsecp256k1-gen-genmult";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3db8d6ba2cec9eacc40e6e8ccc98931840301f1006e95647ceb2dd5c3aa06f7c"; };
    dependencies = {
      libsecp256k1_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1-core."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libz-sys."1.1.12" = overridableMkRustCrate (profileName: rec {
    name = "libz-sys";
    version = "1.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d97137b25e321a73eef1418d1d5d2eda4d77e12813f8e6dead84bc52c5870a7b"; };
    features = builtins.concatLists [
      [ "static" ]
    ];
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
      pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.27" { profileName = "__noProfile"; }).out;
      vcpkg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".link-cplusplus."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "link-cplusplus";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d240c6f7e1ba3a28b0249f774e6a9dd0175054b52dfbb61b16eb8505c3785c9"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" = overridableMkRustCrate (profileName: rec {
    name = "linked-hash-map";
    version = "0.5.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linked_hash_set."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "linked_hash_set";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "47186c6da4d81ca383c7c47c1bfc80f4b95f4720514d860a5407aaf4233f9588"; };
    dependencies = {
      linked_hash_map = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linregress."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "linregress";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4de04dcecc58d366391f9920245b85ffa684558a5ef6e7736e754347c3aea9c2"; };
    dependencies = {
      nalgebra = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.32.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "linux-raw-sys";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f051f77a7c8e6957c0696eac88f26b0117e54f52d3fc682ab19397a8812846a4"; };
    features = builtins.concatLists [
      [ "errno" ]
      [ "general" ]
      [ "ioctl" ]
      [ "no_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "linux-raw-sys";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef53942eb7bf7ff43a617b3e2c1c4a5ecf5944a7c1bc12d7ee39bbb15e5c1519"; };
    features = builtins.concatLists [
      [ "errno" ]
      [ "general" ]
      [ "ioctl" ]
      [ "no_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.10" = overridableMkRustCrate (profileName: rec {
    name = "linux-raw-sys";
    version = "0.4.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da2479e8c062e40bf0066ffa0bc823de0a9368974af99c9f6df941d2c231e03f"; };
    features = builtins.concatLists [
      [ "elf" ]
      [ "errno" ]
      [ "general" ]
      [ "ioctl" ]
      [ "no_std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.11" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c168f8615b12bc01f9c17e2eb0cc07dcae1940121185446edc3744920e8ef45"; };
    features = builtins.concatLists [
      [ "atomic_usize" ]
      [ "default" ]
    ];
    dependencies = {
      scopeguard = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5e6163cb8c49088c2c36f57875e58ccd8c87c7427f7fbd50ea6710b2f3f2e8f"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lru."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "lru";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6e8aaa3f231bb4bd57b84b2d5dc3ae7f350265df8aa96492e0bc394a1571909"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "hashbrown" ]
    ];
    dependencies = {
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lru."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "lru";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "718e8fae447df0c7e1ba7f5189829e63fd536945c8988d61444c19039f16b670"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "hashbrown" ]
    ];
    dependencies = {
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "lru-cache";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31e24f1ad8321ca0e8a1e0ac13f23cb668e6f5466c2c57319f6a5cf1cc8e3b1c"; };
    dependencies = {
      linked_hash_map = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lz4."1.24.0" = overridableMkRustCrate (profileName: rec {
    name = "lz4";
    version = "1.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e9e2dd86df36ce760a60f6ff6ad526f7ba1f14ba0356f8254fb6905e6494df1"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      lz4_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lz4-sys."1.9.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lz4-sys."1.9.4" = overridableMkRustCrate (profileName: rec {
    name = "lz4-sys";
    version = "1.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57d27b317e207b10f69f5e75494119e391a96f48861ae870d1da6edac98ca900"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "mach";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".macro_magic."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "macro_magic";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aee866bfee30d2d7e83835a4574aad5b45adba4cc807f2a3bbba974e5d4383c9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc_support" ]
    ];
    dependencies = {
      macro_magic_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".macro_magic_core."0.4.2" { inherit profileName; }).out;
      macro_magic_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".macro_magic_macros."0.4.2" { profileName = "__noProfile"; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".macro_magic_core."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "macro_magic_core";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e766a20fd9c72bab3e1e64ed63f36bd08410e75803813df210d1ce297d7ad00"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      const_random = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-random."0.1.17" { inherit profileName; }).out;
      derive_syn_parse = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive-syn-parse."0.1.5" { profileName = "__noProfile"; }).out;
      macro_magic_core_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".macro_magic_core_macros."0.4.3" { profileName = "__noProfile"; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".macro_magic_core_macros."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "macro_magic_core_macros";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d710e1214dffbab3b5dacb21475dde7d6ed84c69ff722b3a47a782668d44fbac"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".macro_magic_macros."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "macro_magic_macros";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8fb85ec1620619edf2984a7693497d4ec88a9665d8b87e942856884c92dbf2a"; };
    dependencies = {
      macro_magic_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".macro_magic_core."0.4.2" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "maplit";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".match_cfg."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "match_cfg";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffbee8634e0d45d258acb448e7eaab3fce7a0a467395d4d9f228e3c1f01fb2e4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_core" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "matchers";
    version = "0.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1"; };
    dependencies = {
      regex_automata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matches."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "matches";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2532096657941c2fea9c289d370a250971c689d4f143798ff67113ec042024a5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matrixmultiply."0.3.8" = overridableMkRustCrate (profileName: rec {
    name = "matrixmultiply";
    version = "0.3.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7574c1cf36da4798ab73da5b215bbf444f50718207754cb522201d78d1cd0ff2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      rawpointer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rawpointer."0.2.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "md-5";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d89e7ee0cfbedfc4da3340218492196241d89eefb6dab27de5df917a6d2e78cf"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f665ee40bc4a3c5590afb1e9677db74a508659dfd71e126420da8274909a0167"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memfd."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "memfd";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2cffa4ad52c6f791f4f8b15f0c05f9824b2ced1160e88cc393d64fff9a8ac64"; };
    dependencies = {
      rustix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.21" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.10" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.5.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "83faa42c0a078c393f6b29d5db232d8be22776a891f8f56e5284faee4a20b327"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d61c719bcfbcf5d62b3a09efa6088de8c54bc0bfcd3ea7ae39fcc186108b8de1"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a634b1c61a95585bd15607c6ab0c4e5b226e695ff2800ba0cdccddf208c406c"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memory-db."0.32.0" = overridableMkRustCrate (profileName: rec {
    name = "memory-db";
    version = "0.32.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "808b50db46293432a45e63bc15ea51e0ab4c0a1647b8eb114e31a3e698dd6fbe"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".merlin."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "merlin";
    version = "2.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4e261cf0f8b3c42ded9f7d2bb59dea03aa52bc8a1cbc7482f9fc3fd1229d3b42"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      keccak = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".keccak."0.1.4" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".merlin."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "merlin";
    version = "3.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "byteorder" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "keccak" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".keccak."0.1.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "rand_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7810e0be55b428ada41041c41f32c9f1a42817901b4ccf45fa3d4b6561e74c7"; };
    features = builtins.concatLists [
      [ "with-alloc" ]
    ];
    dependencies = {
      adler = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.8.9" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.8.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3dce281c5e46beae905d4de1870d8b1509a9142b62eedf18b443b011ca8343d0"; };
    features = builtins.concatLists [
      [ "net" ]
      [ "os-ext" ]
      [ "os-poll" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mockall."0.11.4" = overridableMkRustCrate (profileName: rec {
    name = "mockall";
    version = "0.11.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c84490118f2ee2d74570d114f3d0493cbf02790df303d2707606c3e14e07c96"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      downcast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast."0.11.0" { inherit profileName; }).out;
      fragile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fragile."2.0.0" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      mockall_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".mockall_derive."0.11.4" { profileName = "__noProfile"; }).out;
      predicates = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".predicates."2.1.5" { inherit profileName; }).out;
      predicates_tree = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".predicates-tree."1.0.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mockall_derive."0.11.4" = overridableMkRustCrate (profileName: rec {
    name = "mockall_derive";
    version = "0.11.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "22ce75669015c4f47b289fd4d4f56e894e4c96003ffdf3ac51313126f94c6cbb"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.16.0" = overridableMkRustCrate (profileName: rec {
    name = "multiaddr";
    version = "0.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4aebdb21e90f81d13ed01dc84123320838e53963c2ca94b60b305d3fa64f31e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "url" ]
    ];
    dependencies = {
      arrayref = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; }).out;
      multibase = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multibase."0.9.1" { inherit profileName; }).out;
      multihash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.16.3" { inherit profileName; }).out;
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multiaddr."0.17.1" = overridableMkRustCrate (profileName: rec {
    name = "multiaddr";
    version = "0.17.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b36f567c7099511fa8612bbbb52dda2419ce0bdbacf31714e3a5ffdb766d3bd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "url" ]
    ];
    dependencies = {
      arrayref = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      multibase = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multibase."0.9.1" { inherit profileName; }).out;
      multihash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash."0.17.0" { inherit profileName; }).out;
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multibase."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "multibase";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b3539ec3c1f04ac9748a260728e855f261b4977f5c3406612c884564f329404"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      base_x = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.11" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; }).out;
      data_encoding_macro = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding-macro."0.1.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multihash."0.16.3" = overridableMkRustCrate (profileName: rec {
    name = "multihash";
    version = "0.16.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1c346cf9999c631f002d8f977c4eaeaa0e6386f16007202308d0b3757522c2cc"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "derive" ]
      [ "digest" ]
      [ "identity" ]
      [ "multihash-derive" ]
      [ "multihash-impl" ]
      [ "sha-2" ]
      [ "sha2" ]
      [ "std" ]
    ];
    dependencies = {
      core2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core2."0.4.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      multihash_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash-derive."0.8.1" { profileName = "__noProfile"; }).out;
      sha_2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multihash."0.17.0" = overridableMkRustCrate (profileName: rec {
    name = "multihash";
    version = "0.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "835d6ff01d610179fbce3de1694d007e500bf33a7f29689838941d6bf783ae40"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "blake2b" ]
      [ "blake2b_simd" ]
      [ "blake2s" ]
      [ "blake2s_simd" ]
      [ "blake3" ]
      [ "default" ]
      [ "derive" ]
      [ "digest" ]
      [ "identity" ]
      [ "multihash-derive" ]
      [ "multihash-impl" ]
      [ "secure-hashes" ]
      [ "sha-2" ]
      [ "sha-3" ]
      [ "sha2" ]
      [ "sha3" ]
      [ "std" ]
    ];
    dependencies = {
      blake2b_simd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2b_simd."1.0.2" { inherit profileName; }).out;
      blake2s_simd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2s_simd."1.0.2" { inherit profileName; }).out;
      blake3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake3."1.5.0" { inherit profileName; }).out;
      core2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core2."0.4.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      multihash_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".multihash-derive."0.8.1" { profileName = "__noProfile"; }).out;
      sha_2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      sha_3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multihash-derive."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "multihash-derive";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d6d4752e6230d8ef7adf7bd5d8c4b1f6561c1014c5ba9a37445ccefe18aa1db"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro_error = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      synstructure = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multimap."0.8.3" = overridableMkRustCrate (profileName: rec {
    name = "multimap";
    version = "0.8.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5ce46fe64a9d73be07dcbe690a38ce1b293be448fd8ce1e6c1b8062c9f72c6a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".multistream-select."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "multistream-select";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c8552ab875c1313b97b8d20cb857b9fd63e2d1d6a0a1b53ce9821e575405f27a"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nalgebra."0.32.3" = overridableMkRustCrate (profileName: rec {
    name = "nalgebra";
    version = "0.32.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "307ed9b18cc2423f29e83f84fd23a8e73628727990181f18641a8b5dc2ab1caa"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "macros" ]
      [ "matrixmultiply" ]
      [ "nalgebra-macros" ]
      [ "std" ]
    ];
    dependencies = {
      approx = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; }).out;
      matrixmultiply = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".matrixmultiply."0.3.8" { inherit profileName; }).out;
      nalgebra_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".nalgebra-macros."0.2.1" { profileName = "__noProfile"; }).out;
      num_complex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.4" { inherit profileName; }).out;
      num_rational = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.1" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      simba = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".simba."0.8.1" { inherit profileName; }).out;
      typenum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nalgebra-macros."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "nalgebra-macros";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91761aed67d03ad966ef783ae962ef9bbaca728d2dd7ceb7939ec110fffad998"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".names."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "names";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7d66043b25d4a6cccb23619d10c19c25304b355a7dccd4a8e11423dd2382146"; };
    dependencies = {
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".netlink-packet-core."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "netlink-packet-core";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "345b8ab5bd4e71a2986663e88c56856699d060e78e152e6e9d7966fcd5491297"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      netlink_packet_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".netlink-packet-utils."0.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".netlink-packet-route."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "netlink-packet-route";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9ea4302b9759a7a88242299225ea3688e63c85ea136371bb6cf94fd674efaab"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      netlink_packet_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".netlink-packet-core."0.4.2" { inherit profileName; }).out;
      netlink_packet_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".netlink-packet-utils."0.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".netlink-packet-utils."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "netlink-packet-utils";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ede8a08c71ad5a95cdd0e4e52facd37190977039a4704eb82a283f713747d34"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".netlink-proto."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "netlink-proto";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "65b4b14489ab424703c092062176d52ba55485a89c076b4f9db05092b7223aa6"; };
    features = builtins.concatLists [
      [ "tokio_socket" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      netlink_packet_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".netlink-packet-core."0.4.2" { inherit profileName; }).out;
      netlink_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".netlink-sys."0.8.5" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".netlink-sys."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "netlink-sys";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6471bf08e7ac0135876a9581bf3217ef0333c191c128d34878079f42ee150411"; };
    features = builtins.concatLists [
      [ "futures" ]
      [ "tokio" ]
      [ "tokio_socket" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".network-clique."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "network-clique";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      derive_more = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; }).out;
      env_logger = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.10.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
      ip_network = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ip_network."0.4.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      lru = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.8.1" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rate_limiter = (rustPackages."unknown".rate-limiter."0.1.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      substrate_prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
      bip39 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-bip39."1.0.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
    devDependencies = {
      aleph_bft_mock = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-mock."0.8.3" { inherit profileName; }).out;
      aleph_bft_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aleph-bft-types."0.8.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.24.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fa52e972a9a719cecb6864fb88568781eb706bac2cd1d4f04a648542dbf78069"; };
    features = builtins.concatLists [
      [ "acct" ]
      [ "aio" ]
      [ "default" ]
      [ "dir" ]
      [ "env" ]
      [ "event" ]
      [ "feature" ]
      [ "fs" ]
      [ "hostname" ]
      [ "inotify" ]
      [ "ioctl" ]
      [ "kmod" ]
      [ "memoffset" ]
      [ "mman" ]
      [ "mount" ]
      [ "mqueue" ]
      [ "net" ]
      [ "personality" ]
      [ "poll" ]
      [ "process" ]
      [ "pthread" ]
      [ "ptrace" ]
      [ "quota" ]
      [ "reboot" ]
      [ "resource" ]
      [ "sched" ]
      [ "signal" ]
      [ "socket" ]
      [ "term" ]
      [ "time" ]
      [ "ucontext" ]
      [ "uio" ]
      [ "user" ]
      [ "zerocopy" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "nohash-hasher";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      minimal_lexical = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".normalize-line-endings."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "normalize-line-endings";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61807f77802ff30975e01f4f071c8ba10c022052f98b3294119f3e615d13e5be"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-bigint."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "num-bigint";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "608e7659b5c3d7cba262d894801b9ec9d00de989e8a82bd4bef91d08da45cdc0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_integer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.45" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "num-complex";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ba157ca0885411de85d6ca030ba7e2a83a28636056c7c699b07c8b6f7383214"; };
    dependencies = {
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-format."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "num-format";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a652d9771a63711fd3c3deb670acfbe5c30a4072e664d7a3bf5a9e1056ac72c3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.45" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.45";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9"; };
    features = builtins.concatLists [
      [ "i128" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-rational."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "num-rational";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0638a1c9d0a3c0914158145bc76cff373a75a627e6ecbfb71cbe6f453a5a19b0"; };
    dependencies = {
      num_integer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.45" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39e3200413f237f41ab11ad6d161bc7239c84dcb631773ccd7de3dfe4b5c267c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "i128" ]
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.16.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.3" { inherit profileName; }).out;
      ${ if !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".number_prefix."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "number_prefix";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "std")
    ];
  });
  
  "git+https://github.com/727-Ventures/obce".obce."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "obce";
    version = "0.1.0";
    registry = "git+https://github.com/727-Ventures/obce";
    src = fetchCrateGit {
      url = https://github.com/727-Ventures/obce;
      name = "obce";
      version = "0.1.0";
      rev = "5e3da417c2189ddd4e9ef82cd586f8ec94b8952a";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "frame-support")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "frame-system")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "pallet-contracts")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "sp-core")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "sp-runtime")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "sp-std")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "substrate")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "frame_support" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".frame-support."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "frame_system" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".frame-system."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "obce_macro" else null } = (buildRustPackages."git+https://github.com/727-Ventures/obce".obce-macro."0.1.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "pallet_contracts" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".pallet-contracts."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/727-Ventures/obce".obce-codegen."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "obce-codegen";
    version = "0.1.0";
    registry = "git+https://github.com/727-Ventures/obce";
    src = fetchCrateGit {
      url = https://github.com/727-Ventures/obce;
      name = "obce-codegen";
      version = "0.1.0";
      rev = "5e3da417c2189ddd4e9ef82cd586f8ec94b8952a";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "blake2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "darling" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.14.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "itertools" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "tuple" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tuple."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/727-Ventures/obce".obce-macro."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "obce-macro";
    version = "0.1.0";
    registry = "git+https://github.com/727-Ventures/obce";
    src = fetchCrateGit {
      url = https://github.com/727-Ventures/obce;
      name = "obce-macro";
      version = "0.1.0";
      rev = "5e3da417c2189ddd4e9ef82cd586f8ec94b8952a";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "obce_codegen" else null } = (rustPackages."git+https://github.com/727-Ventures/obce".obce-codegen."0.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.30.4" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.30.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "03b4680b86d9cfafba8fc491dc9b6df26b68cf40e9e6cd73909194759a63c385"; };
    features = builtins.concatLists [
      [ "coff" ]
      [ "crc32fast" ]
      [ "elf" ]
      [ "hashbrown" ]
      [ "indexmap" ]
      [ "macho" ]
      [ "pe" ]
      [ "read_core" ]
      [ "std" ]
      [ "write" ]
      [ "write_core" ]
      [ "write_std" ]
    ];
    dependencies = {
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".object."0.32.1" = overridableMkRustCrate (profileName: rec {
    name = "object";
    version = "0.32.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9cf5f9dd3933bd50a9e1f149ec995f39ae2c496d31fd772c1fd45ebc27e902b0"; };
    features = builtins.concatLists [
      [ "archive" ]
      [ "coff" ]
      [ "elf" ]
      [ "macho" ]
      [ "pe" ]
      [ "read_core" ]
      [ "unaligned" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oid-registry."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "oid-registry";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38e20717fa0541f39bd146692035c37bedfa532b3e5071b35761082407546b2a"; };
    features = builtins.concatLists [
      [ "crypto" ]
      [ "default" ]
      [ "kdf" ]
      [ "nist_algs" ]
      [ "pkcs1" ]
      [ "pkcs12" ]
      [ "pkcs7" ]
      [ "pkcs9" ]
      [ "registry" ]
      [ "x509" ]
      [ "x962" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.3.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oid-registry."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "oid-registry";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9bedf36ffb6ba96c2eb7144ef6270557b52e54b20c0a8e1eb2ff99a6c6959bff"; };
    features = builtins.concatLists [
      [ "crypto" ]
      [ "default" ]
      [ "kdf" ]
      [ "nist_algs" ]
      [ "pkcs1" ]
      [ "pkcs12" ]
      [ "pkcs7" ]
      [ "pkcs9" ]
      [ "registry" ]
      [ "x509" ]
      [ "x962" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "race" ]
      [ "std" ]
      [ "unstable" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "opaque-debug";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "openssl-probe";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".p256."0.11.1" = overridableMkRustCrate (profileName: rec {
    name = "p256";
    version = "0.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51f44edd08f51e2ade572f141051021c5af22677e42b7dd28a88155151c33594"; };
    features = builtins.concatLists [
      [ "arithmetic" ]
      [ "default" ]
      [ "digest" ]
      [ "ecdh" ]
      [ "ecdsa" ]
      [ "ecdsa-core" ]
      [ "pkcs8" ]
      [ "sha2" ]
      [ "sha256" ]
      [ "std" ]
    ];
    dependencies = {
      ecdsa_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.14.8" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.12.3" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".p384."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "p384";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dfc8c5bf642dde52bb9e87c0ecd8ca5a76faac2eeed98dedb7c717997e1080aa"; };
    features = builtins.concatLists [
      [ "arithmetic" ]
      [ "default" ]
      [ "digest" ]
      [ "ecdh" ]
      [ "ecdsa" ]
      [ "ecdsa-core" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "sha2" ]
      [ "sha384" ]
      [ "std" ]
    ];
    dependencies = {
      ecdsa_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.14.8" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.12.3" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
    };
  });
  
  "unknown".pallet-aleph."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "pallet-aleph";
    version = "0.6.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "pallet-aleph/default") "default")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime" || rootFeatures' ? "pallet-aleph/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      pallet_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      primitives = (rustPackages."unknown".primitives."0.7.0" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
    devDependencies = {
      pallet_balances = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-balances."4.0.0-dev" { inherit profileName; }).out;
      pallet_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-aura."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-aura";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-aura";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      pallet_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_consensus_aura = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-authorship."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-authorship";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-authorship";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-babe."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-babe";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-babe";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      pallet_authorship = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-authorship."4.0.0-dev" { inherit profileName; }).out;
      pallet_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; }).out;
      pallet_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_consensus_babe = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-babe."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-session."4.0.0-dev" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".pallet-baby-liminal."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pallet-baby-liminal";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std") "frame-benchmarking")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks") "runtime-benchmarks")
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime") "try-runtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_bls12_381" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-bls12-381."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" then "frame_benchmarking" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "frame_support" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "frame_system" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "jf_plonk" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/jellyfish".jf-plonk."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-balances."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-balances";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-balances";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".pallet-committee-management."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "pallet-committee-management";
    version = "0.2.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "pallet-committee-management/default") "default")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime" || rootFeatures' ? "pallet-committee-management/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      pallet_authorship = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-authorship."4.0.0-dev" { inherit profileName; }).out;
      pallet_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; }).out;
      pallet_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-staking."4.0.0-dev" { inherit profileName; }).out;
      pallets_support = (rustPackages."unknown".pallets-support."0.1.4" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      primitives = (rustPackages."unknown".primitives."0.7.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rand_pcg = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.3.1" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".pallet-contracts."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-contracts";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "pallet-contracts";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "frame_support" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".frame-support."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "frame_system" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".frame-system."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "impl_trait_for_tuples" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "pallet_contracts_primitives" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".pallet-contracts-primitives."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "pallet_contracts_proc_macro" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".pallet-contracts-proc-macro."4.0.0-dev" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_api" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-api."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_io" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-io."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "wasm_instrument" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-instrument."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "wasmi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi."0.20.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "wasmparser" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser-nostd."0.91.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-contracts."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-contracts";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-contracts";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "rand" ]
      [ "serde" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
      [ "wasm-instrument" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      environmental = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".environmental."1.1.4" { inherit profileName; }).out;
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      pallet_contracts_primitives = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-contracts-primitives."24.0.0" { inherit profileName; }).out;
      pallet_contracts_proc_macro = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-contracts-proc-macro."4.0.0-dev" { profileName = "__noProfile"; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      wasm_instrument = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-instrument."0.4.0" { inherit profileName; }).out;
      wasmi = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi."0.30.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".pallet-contracts-primitives."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "pallet-contracts-primitives";
    version = "7.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "pallet-contracts-primitives";
      version = "7.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_weights" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-weights."4.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-contracts-primitives."24.0.0" = overridableMkRustCrate (profileName: rec {
    name = "pallet-contracts-primitives";
    version = "24.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-contracts-primitives";
      version = "24.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_weights = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-weights."20.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".pallet-contracts-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-contracts-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "pallet-contracts-proc-macro";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-contracts-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-contracts-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-contracts-proc-macro";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "full" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "unknown".pallet-elections."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "pallet-elections";
    version = "0.6.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "pallet-elections/default") "default")
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime" || rootFeatures' ? "pallet-elections/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_election_provider_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-election-provider-support."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      pallet_authorship = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-authorship."4.0.0-dev" { inherit profileName; }).out;
      pallet_balances = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-balances."4.0.0-dev" { inherit profileName; }).out;
      pallet_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-staking."4.0.0-dev" { inherit profileName; }).out;
      pallets_support = (rustPackages."unknown".pallets-support."0.1.4" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      primitives = (rustPackages."unknown".primitives."0.7.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rand_pcg = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.3.1" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-identity."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-identity";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-identity";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      enumflags2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".enumflags2."0.7.8" { inherit profileName; }).out;
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-insecure-randomness-collective-flip."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-insecure-randomness-collective-flip";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-insecure-randomness-collective-flip";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      safe_mix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".safe-mix."1.0.1" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-multisig."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-multisig";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-multisig";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-nomination-pools."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "pallet-nomination-pools";
    version = "1.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-nomination-pools";
      version = "1.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-nomination-pools-runtime-api."1.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-nomination-pools-runtime-api";
    version = "1.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-nomination-pools-runtime-api";
      version = "1.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      pallet_nomination_pools = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-nomination-pools."1.0.0" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-scheduler."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-scheduler";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-scheduler";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_weights = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-weights."20.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-session."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-session";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-session";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "historical" ]
      [ "sp-trie" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      pallet_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-session."4.0.0-dev" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-staking."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-staking";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-staking";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_election_provider_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-election-provider-support."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      pallet_authorship = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-authorship."4.0.0-dev" { inherit profileName; }).out;
      pallet_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-session."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-sudo."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-sudo";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-sudo";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-timestamp."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-timestamp";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-timestamp";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-transaction-payment."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-transaction-payment";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-transaction-payment";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "serde" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-transaction-payment-rpc."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-transaction-payment-rpc";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-transaction-payment-rpc";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      jsonrpsee = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      pallet_transaction_payment_rpc_runtime_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-transaction-payment-rpc-runtime-api."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_rpc = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-rpc."6.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_weights = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-weights."20.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-transaction-payment-rpc-runtime-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-transaction-payment-rpc-runtime-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-transaction-payment-rpc-runtime-api";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      pallet_transaction_payment = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-transaction-payment."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_weights = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-weights."20.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-treasury."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-treasury";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-treasury";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "serde" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      pallet_balances = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-balances."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-utility."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-utility";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-utility";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-vesting."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "pallet-vesting";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "pallet-vesting";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_benchmarking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-benchmarking."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "unknown".pallets-support."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "pallets-support";
    version = "0.1.4";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "pallets-support/default") "default")
      [ "std" ]
      (lib.optional (rootFeatures' ? "pallets-support/try-runtime") "try-runtime")
    ];
    dependencies = {
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-db."0.4.12" = overridableMkRustCrate (profileName: rec {
    name = "parity-db";
    version = "0.4.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59e9ab494af9e6e813c72170f0d3c1de1500990d62c97cc05cc7576f91aa402f"; };
    dependencies = {
      blake2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      crc32fast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.3.2" { inherit profileName; }).out;
      fs2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fs2."0.4.3" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      lz4 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lz4."1.24.0" { inherit profileName; }).out;
      memmap2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.10" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      siphasher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.11" { inherit profileName; }).out;
      snap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".snap."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" = overridableMkRustCrate (profileName: rec {
    name = "parity-scale-codec";
    version = "3.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0dec8a8073036902368c2cdc0387e85ff9a37054d7e7c98e592145e0c92cd4fb"; };
    features = builtins.concatLists [
      [ "bytes" ]
      [ "chain-error" ]
      [ "default" ]
      [ "derive" ]
      [ "full" ]
      [ "max-encoded-len" ]
      [ "parity-scale-codec-derive" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.4" { inherit profileName; }).out;
      bitvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.1" { inherit profileName; }).out;
      byte_slice_cast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byte-slice-cast."1.2.2" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      parity_scale_codec_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec-derive."3.6.5" { profileName = "__noProfile"; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec-derive."3.6.5" = overridableMkRustCrate (profileName: rec {
    name = "parity-scale-codec-derive";
    version = "3.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "312270ee71e1cd70289dacf597cab7b207aa107d2f28191c2ae45b2ece18a260"; };
    features = builtins.concatLists [
      [ "max-encoded-len" ]
    ];
    dependencies = {
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-send-wrapper."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "parity-send-wrapper";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa9777aa91b8ad9dd5aaa04a9b6bcb02c7f1deb952fca5a66034d5e63afc5c6f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.45.0" = overridableMkRustCrate (profileName: rec {
    name = "parity-wasm";
    version = "0.45.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1ad0aff30c1da14b1254fcb2af73e1fa9a28670e584a626f53a369d0e157304"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "parking";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb813b8af86854136c6922af0598d719255ecb2179515e6e7730d468f05c9cae"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      lock_api = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.11" { inherit profileName; }).out;
      parking_lot_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      lock_api = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.11" { inherit profileName; }).out;
      parking_lot_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      instant = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.12" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.9" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.9.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4c42a9226546d68acdd9c0a280d17ce19bfe27a46bf68784e4066115788d008e"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.4.1" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_targets" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".partial_sort."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "partial_sort";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7924d1d0ad836f665c9065e26d016c673ece3993f30d340068b16f282afc1156"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" = overridableMkRustCrate (profileName: rec {
    name = "paste";
    version = "1.0.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "pbkdf2";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d95f5254224e617595d2cc3cc73ff0a5eaf2637519e25f03388154e9378b6ffa"; };
    dependencies = {
      crypto_mac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-mac."0.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.11.0" = overridableMkRustCrate (profileName: rec {
    name = "pbkdf2";
    version = "0.11.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "83a0692ec44e4cf1ef28ca317f14f8f07da2d95ec3fa01f86e4467b725e60917"; };
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "peeking_take_while";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pem."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "pem";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8835c273a76a90455d7344889b0964598e3316e2a79ede8e36f16bdcf2228b8"; };
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pem-rfc7468."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "pem-rfc7468";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "24d159833a9105500e0398934e205e0773f0b27529557134ecfc51c27646adac"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      base64ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b2a4787296e9989611394c33f193f676704af1686e70b8f8033ab5ba9a35a94"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest."2.7.5" = overridableMkRustCrate (profileName: rec {
    name = "pest";
    version = "2.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae9cee2a55a544be8b89dc6848072af97a20f2422603c10865be2a42b580fff5"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "default")
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "memchr")
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "memchr" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "thiserror" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "ucd_trie" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ucd-trie."0.1.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest_derive."2.7.5" = overridableMkRustCrate (profileName: rec {
    name = "pest_derive";
    version = "2.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "81d78524685f5ef2a3b3bd1cafbc9fcabb036253d9b1463e726a91cd16e2dfc2"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "default")
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "pest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.7.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "pest_generator" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest_generator."2.7.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest_generator."2.7.5" = overridableMkRustCrate (profileName: rec {
    name = "pest_generator";
    version = "2.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "68bd1206e71118b5356dae5ddc61c8b11e28b09ef6a31acbd15ea48a28e0c227"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "pest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.7.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "pest_meta" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest_meta."2.7.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pest_meta."2.7.5" = overridableMkRustCrate (profileName: rec {
    name = "pest_meta";
    version = "2.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c747191d4ad9e4a4ab9c8798f1e82a39affe7ef9648390b7e5548d18e099de6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "default")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "pest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pest."2.7.5" { inherit profileName; }).out;
    };
    buildDependencies = {
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "sha2" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".petgraph."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "petgraph";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e1d3afd2628e69da2be385eb6f2fd57c8ac7977ceeff6dc166ff1657b0e386a9"; };
    dependencies = {
      fixedbitset = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.2" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "pin-project";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fda4ed1c6c173e3fc7a83629421152e01d7b1f9b7f65fb301e490e8cfc656422"; };
    dependencies = {
      pin_project_internal = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.1.3" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-internal";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4359fd9c9171ec6e8c62926d6faaf553a8dc3f64e1507e76da7911b4f6a04405"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.1.12" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.1.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "257b64915a082f7811703966789728173279bdebb956b143dbcd23f6f970a777"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8afb450f006bf6385ca15ef45d71d2288452bc3683ce2e2cacc0d18e4be60b58"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "pin-utils";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "pkcs8";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9eca2c590a5f85da82668fa685c09ce2888b9430e83299debf1f34b65fd4a4ba"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "pem" ]
    ];
    dependencies = {
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" { inherit profileName; }).out;
      spki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "pkcs8";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f950b2377845cebe5cf8b5165cb3cc1a5e0fa5cfa3e1f7f55707d8fd82e0a7b7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.8" { inherit profileName; }).out;
      spki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.27" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26072860ba924cbfa98ea39c8c19b4dd6a4a25423dbdf219c1eca91aa0cf6964"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".platforms."3.2.0" = overridableMkRustCrate (profileName: rec {
    name = "platforms";
    version = "3.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14e6ab3f592e6fb464fc9712d8d6e6912de6473954635fd76a589d832cffcbb0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".polling."2.8.0" = overridableMkRustCrate (profileName: rec {
    name = "polling";
    version = "2.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4b2d323e8ca7996b3e23126511a523f7e62924d93ecd5ae73b333815b0eb3dce"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.isWindows then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "concurrent_queue" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.3.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "vxworks" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "pin_project_lite" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".poly1305."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "poly1305";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "048aeb476be11a4b6ca432ca569e375810de9294ae78f4774e78ea98a9246ede"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
      universal_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".poly1305."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "poly1305";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8159bd90725d2df49889a078b54f4f79e87f1f8a8444194cdca81d38f5393abf"; };
    dependencies = {
      ${ if (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") && (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686") then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "opaque_debug" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "universal_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".polyval."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "polyval";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8419d2b623c7c0896ff2d5d96e2cb4ede590fed28fcc34934f4c33c036e620a1"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
      universal_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".polyval."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "polyval";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d52cff9d1d4dee5fe6d03729099f4a310a41179e0a10dbf542039873f2e826fb"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
      universal_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.5.1" = overridableMkRustCrate (profileName: rec {
    name = "portable-atomic";
    version = "1.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3bccab0e7fd7cc19f820a1c8c91720af652d0c88dc9664dd72aef2614f04af3b"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "fallback")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".powerfmt."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "powerfmt";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".predicates."2.1.5" = overridableMkRustCrate (profileName: rec {
    name = "predicates";
    version = "2.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59230a63c37f3e18569bdb90e4a89cbf5bf8b06fea0b84e65ea10cc4df47addd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "diff" ]
      [ "float-cmp" ]
      [ "normalize-line-endings" ]
      [ "regex" ]
    ];
    dependencies = {
      difflib = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".difflib."0.4.0" { inherit profileName; }).out;
      float_cmp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".float-cmp."0.9.0" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      normalize_line_endings = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".normalize-line-endings."0.3.0" { inherit profileName; }).out;
      predicates_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".predicates-core."1.0.6" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".predicates-core."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "predicates-core";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b794032607612e7abeb4db69adb4e33590fa6cf1149e95fd7cb00e634b92f174"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".predicates-tree."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "predicates-tree";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "368ba315fb8c5052ab692e68a0eefec6ec57b23a36959c14496f0b0df2c0cecf"; };
    dependencies = {
      predicates_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".predicates-core."1.0.6" { inherit profileName; }).out;
      termtree = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".termtree."0.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prettyplease."0.1.25" = overridableMkRustCrate (profileName: rec {
    name = "prettyplease";
    version = "0.1.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c8646e95016a7a6c4adea95bafa8a16baab64b583356217f2c85db4a39d9a86"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prettyplease."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "prettyplease";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ae005bd773ab59b4725093fd7df83fd7892f7d8eafb48dbd7de6e024e4215f9d"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.12.2" = overridableMkRustCrate (profileName: rec {
    name = "primitive-types";
    version = "0.12.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2"; };
    features = builtins.concatLists [
      [ "byteorder" ]
      [ "codec" ]
      [ "impl-codec" ]
      [ "impl-serde" ]
      [ "rustc-hex" ]
      [ "scale-info" ]
      [ "scale-info-crate" ]
      [ "serde" ]
      [ "serde_no_std" ]
      [ "std" ]
    ];
    dependencies = {
      fixed_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixed-hash."0.8.0" { inherit profileName; }).out;
      impl_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-codec."0.6.0" { inherit profileName; }).out;
      impl_serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.4.0" { inherit profileName; }).out;
      scale_info_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      uint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uint."0.9.5" { inherit profileName; }).out;
    };
  });
  
  "unknown".primitives."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "primitives";
    version = "0.7.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "primitives/default") "default")
      (lib.optional (rootFeatures' ? "aleph-node/short_session" || rootFeatures' ? "aleph-runtime/short_session" || rootFeatures' ? "primitives/short_session") "short_session")
      [ "std" ]
    ];
    dependencies = {
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e17d47ce914bf4de440332250b0edd23ce48c005f59fab39d3335866b114f11a"; };
    dependencies = {
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.11" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "syn" ]
      [ "syn-error" ]
    ];
    dependencies = {
      proc_macro_error_attr = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" { profileName = "__noProfile"; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-error-attr";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
    };
    buildDependencies = {
      version_check = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-warning."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-warning";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d1eaa7fa0aa1929ffdf7eeb6eac234dde6268914a14ad44d23521ab6a9b258e"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "134c189feb4956b20f6f547d2cf727d4c0fe06722b20a0eec87ed445a97f92da"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
      [ "span-locations" ]
    ];
    dependencies = {
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.3" = overridableMkRustCrate (profileName: rec {
    name = "prometheus";
    version = "0.13.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "449811d15fbdf5ceb5c1144416066429cf82316e2ec8ce0c1f6f8a02e7bbcf8c"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prometheus-client."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "prometheus-client";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d6fa99d535dd930d1249e6c79cb3c2915f9172a540fe2b02a4c8f9ca954721e"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      dtoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dtoa."1.0.9" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.9" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      prometheus_client_derive_encode = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prometheus-client-derive-encode."0.4.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prometheus-client-derive-encode."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "prometheus-client-derive-encode";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "440f724eba9f6996b75d63681b0a92b06947f1457076d503a4d2e2c8f56442b8"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost."0.11.9" = overridableMkRustCrate (profileName: rec {
    name = "prost";
    version = "0.11.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b82eaa1d779e9a4bc1c3217db8ffbeabaae1dca241bf70183242128d48681cd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "prost-derive" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      prost_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-derive."0.11.9" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-build."0.11.9" = overridableMkRustCrate (profileName: rec {
    name = "prost-build";
    version = "0.11.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "119533552c9a7ffacc21e099c24a0ac8bb19c2a2a3f363de84cd9b844feab270"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "format" ]
      [ "prettyplease" ]
      [ "syn" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      multimap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multimap."0.8.3" { inherit profileName; }).out;
      petgraph = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".petgraph."0.6.4" { inherit profileName; }).out;
      prettyplease = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prettyplease."0.1.25" { inherit profileName; }).out;
      prost = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.11.9" { inherit profileName; }).out;
      prost_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-types."0.11.9" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      tempfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.8.1" { inherit profileName; }).out;
      which = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".which."4.4.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-derive."0.11.9" = overridableMkRustCrate (profileName: rec {
    name = "prost-derive";
    version = "0.11.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5d2d8d10f3c6ded6da8b05b5fb3b8a5082514344d56c9f871412d29b4e075b4"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      itertools = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.10.5" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".prost-types."0.11.9" = overridableMkRustCrate (profileName: rec {
    name = "prost-types";
    version = "0.11.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "213622a1460818959ac1181aaeb2dc9c7f63df720db7d788b3e24eacd1983e13"; };
    dependencies = {
      prost = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.11.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".psm."0.1.21" = overridableMkRustCrate (profileName: rec {
    name = "psm";
    version = "0.1.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5787f7cda34e3033a72192c018bc5883100330f362ef279a8cbccfce8bb4e874"; };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" = overridableMkRustCrate (profileName: rec {
    name = "quick-error";
    version = "1.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-protobuf."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "quick-protobuf";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d6da84cc204722a989e01ba2f6e1e276e190f22263d0cb6ce8526fcdb0d2e1f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quick-protobuf-codec."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "quick-protobuf-codec";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1693116345026436eb2f10b677806169c1a1260c1c60eaaffe3fb5a29ae23d8b"; };
    dependencies = {
      asynchronous_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.2" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      quick_protobuf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-protobuf."0.8.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quicksink."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "quicksink";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "77de3c815e5a160b1539c6592796801df2043ae35e123b46d73380cfa57af858"; };
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.29" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.1.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quinn-proto."0.9.6" = overridableMkRustCrate (profileName: rec {
    name = "quinn-proto";
    version = "0.9.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "94b0b33c13a79f669c85defaf4c275dc86a0c0372807d0ca3d78e0bb87274863"; };
    features = builtins.concatLists [
      [ "ring" ]
      [ "rustls" ]
      [ "tls-rustls" ]
      [ "webpki" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      rustc_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.20.9" { inherit profileName; }).out;
      slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tinyvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.22.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.33";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".radium."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "radium";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "getrandom_package" ]
      [ "libc" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom_package = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten") then "rand_chacha" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "rand_hc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "small_rng" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      rand_chacha = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.17" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rand_hc";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c"; };
    dependencies = {
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_pcg";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59cad018caf63deb318e5a4586d99a24424a364f40f1e5778c29aca23f4fc73e"; };
    dependencies = {
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "unknown".rate-limiter."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rate-limiter";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rawpointer."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "rawpointer";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60a357793950651c4ed0f3f52338f53b2f809f32d83a07f72909fa13e4c6c1e3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "rayon";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c27db03db7734835b3f53954b534c91069375ce6ccaa2e065441e07d9b6cdb1"; };
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      rayon_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.0" = overridableMkRustCrate (profileName: rec {
    name = "rayon-core";
    version = "1.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5ce3fb6ad83f861aac485e76e1985cd109d9a3713802152be56c3b1f0e0658ed"; };
    dependencies = {
      crossbeam_deque = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.3" { inherit profileName; }).out;
      crossbeam_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.16" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rcgen."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "rcgen";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6413f3de1edee53342e6138e75b56d32e7bc6e332b3bd62d497b1929d4cfbcdd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "pem" ]
      [ "x509-parser" ]
    ];
    dependencies = {
      pem = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem."1.1.1" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.30" { inherit profileName; }).out;
      x509_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.13.2" { inherit profileName; }).out;
      yasna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yasna."0.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rcgen."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "rcgen";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffbe84efe2f38dea12e9bfc1f65377fdf03e53a18cb3b995faedf7934c7e785b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "pem" ]
    ];
    dependencies = {
      pem = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem."1.1.1" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.30" { inherit profileName; }).out;
      yasna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yasna."0.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.16" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.2.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.3.5" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.3.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_users."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "redox_users";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a18479200779601e498ada4e8c1e1f50e3ee19deb0259c25825a98b5603b2cb4"; };
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; }).out;
      libredox = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libredox."0.0.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ref-cast."1.0.20" = overridableMkRustCrate (profileName: rec {
    name = "ref-cast";
    version = "1.0.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "acde58d073e9c79da00f2b5b84eed919c8326832648a5b109b3fce1bb1175280"; };
    dependencies = {
      ref_cast_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ref-cast-impl."1.0.20" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ref-cast-impl."1.0.20" = overridableMkRustCrate (profileName: rec {
    name = "ref-cast-impl";
    version = "1.0.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f7473c2cfcf90008193dd0e3e16599455cb601a9fce322b5bb55de799664925"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regalloc2."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "regalloc2";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "80535183cae11b149d618fbd3c37e38d7cda589d82d7769e196ca9a9042d7621"; };
    features = builtins.concatLists [
      [ "checker" ]
      [ "default" ]
    ];
    dependencies = {
      fxhash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      slice_group_by = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slice-group-by."0.3.1" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "380b951a9c5e80ddfd6136919eef32310721aa4aacd4889a8d39124b026ab343"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "perf" ]
      [ "perf-backtrack" ]
      [ "perf-cache" ]
      [ "perf-dfa" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "perf-onepass" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.2" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      regex_automata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.3" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "regex-syntax" ]
      [ "std" ]
    ];
    dependencies = {
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.29" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5f804c7828047e88b2d32e2d7fe5a105da8ee3264f01902f796c8e067dc2483f"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "dfa-onepass" ]
      [ "hybrid" ]
      [ "meta" ]
      [ "nfa-backtrack" ]
      [ "nfa-pikevm" ]
      [ "nfa-thompson" ]
      [ "perf-inline" ]
      [ "perf-literal" ]
      [ "perf-literal-multisubstring" ]
      [ "perf-literal-substring" ]
      [ "std" ]
      [ "syntax" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
      [ "unicode-word-boundary" ]
    ];
    dependencies = {
      aho_corasick = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.2" { inherit profileName; }).out;
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      regex_syntax = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.29" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.6.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c08c74e62047bb2de4ff487b251e4a92e24f48745648451635cec7d591162d9f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".resolv-conf."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "resolv-conf";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52e44394d2086d010551b14b53b1f24e31647570cd1deb0379e2c21b329aba00"; };
    features = builtins.concatLists [
      [ "hostname" ]
      [ "system" ]
    ];
    dependencies = {
      hostname = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hostname."0.3.1" { inherit profileName; }).out;
      quick_error = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rfc6979."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rfc6979";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7743f17af12fa0b03b803ba12cd6a8d9483a587e89c69445e3909655c0b9fabb"; };
    dependencies = {
      crypto_bigint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.4.9" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rfc6979."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rfc6979";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f8dd2a808d456c4a54e300a23e9f5a67e122c3024119acbfd73e3bf664491cb2"; };
    dependencies = {
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" = overridableMkRustCrate (profileName: rec {
    name = "ring";
    version = "0.16.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "dev_urandom_fallback" ]
      [ "once_cell" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "solaris" then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" || (hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "linux") then "spin" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.5.2" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.vendor.name == "unknown" && hostPlatform.parsed.kernel.name == "unknown" && hostPlatform.parsed.abi.name == "" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.65" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ring."0.17.5" = overridableMkRustCrate (profileName: rec {
    name = "ring";
    version = "0.17.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb0205304757e5d899b9c2e448b867ffd03ae7f988002e47cd24954391394d0b"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "dev_urandom_fallback" ]
    ];
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" || (hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l") && (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "windows") then "spin" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rocksdb."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "rocksdb";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bb6f170a4041d50a0ce04b0d2e14916d6ca863ea2e422689a5b694395d299ffe"; };
    features = builtins.concatLists [
      [ "jemalloc" ]
      [ "snappy" ]
    ];
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      librocksdb_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".librocksdb-sys."0.11.0+8.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rpassword."7.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rpassword";
    version = "7.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6678cf63ab3491898c0d021b493c94c9b221d91295294a2a5746eacbe5928322"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      rtoolbox = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtoolbox."0.0.1" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rtcp."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "rtcp";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1919efd6d4a6a85d13388f9487549bb8e359f17198cc03ffd72f79b553873691"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rtnetlink."0.10.1" = overridableMkRustCrate (profileName: rec {
    name = "rtnetlink";
    version = "0.10.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "322c53fd76a18698f1c27381d58091de3a043d356aa5bd0d510608b565f469a0"; };
    features = builtins.concatLists [
      [ "tokio" ]
      [ "tokio_socket" ]
    ];
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      netlink_packet_route = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".netlink-packet-route."0.12.0" { inherit profileName; }).out;
      netlink_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".netlink-proto."0.10.0" { inherit profileName; }).out;
      nix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rtoolbox."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "rtoolbox";
    version = "0.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "034e22c514f5c0cb8a10ff341b9b048b5ceb21591f31c8f44c43b960f9b3524a"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rtp."0.6.8" = overridableMkRustCrate (profileName: rec {
    name = "rtp";
    version = "0.6.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2a095411ff00eed7b12e4c6a118ba984d113e1079582570d56a5ee723f11f80"; };
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.23" = overridableMkRustCrate (profileName: rec {
    name = "rustc-demangle";
    version = "0.1.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hex."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hex";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a"; };
    dependencies = {
      semver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366"; };
    dependencies = {
      semver = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.20" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rusticata-macros";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "faf0c4a6ece9950b9abdb62b1cfcf2a68b3b67a10ba445b3bb85be2a293d0632"; };
    dependencies = {
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustix."0.36.17" = overridableMkRustCrate (profileName: rec {
    name = "rustix";
    version = "0.36.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "305efbd14fde4139eb501df5f136994bb520b033fa9fbdce287507dc23b8c7ed"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "fs" ]
      [ "io-lifetimes" ]
      [ "libc" ]
      [ "libc_errno" ]
      [ "mm" ]
      [ "param" ]
      [ "process" ]
      [ "std" ]
      [ "time" ]
      [ "use-libc" ]
      [ "use-libc-auxv" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64")) || !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64"))) then "libc_errno" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.5" { inherit profileName; }).out;
      io_lifetimes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."1.0.11" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64")) || !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64"))) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64")) || (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux") && !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64"))) then "linux_raw_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.1.4" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustix."0.37.27" = overridableMkRustCrate (profileName: rec {
    name = "rustix";
    version = "0.37.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fea8ca367a3a01fe35e6943c400addf443c0f57670e6ec51196f71a4b8762dd2"; };
    features = builtins.concatLists [
      [ "fs" ]
      [ "io-lifetimes" ]
      [ "std" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64"))) || hostPlatform.isWindows then "libc_errno" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.5" { inherit profileName; }).out;
      io_lifetimes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-lifetimes."1.0.11" { inherit profileName; }).out;
      ${ if !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64"))) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64")) || (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux") && !(hostPlatform.parsed.kernel.name == "linux" && (hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "powerpc64" || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "mips" || hostPlatform.parsed.cpu.name == "mips64"))) then "linux_raw_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.3.8" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.21" = overridableMkRustCrate (profileName: rec {
    name = "rustix";
    version = "0.38.21";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b426b0506e5d50a7d8dafcf2e81471400deb602392c7dd110815afb4eaf02a3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "fs" ]
      [ "std" ]
      [ "termios" ]
      [ "use-libc-auxv" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64)) || hostPlatform.isWindows then "libc_errno" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || !hostPlatform.isWindows && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64)) then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64) || (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux") && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.cpu.significantByte == "littleEndian" && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64 || hostPlatform.parsed.cpu.name == "riscv64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64)) then "linux_raw_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.10" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.1" = overridableMkRustCrate (profileName: rec {
    name = "rustls";
    version = "0.19.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "35edb675feee39aec9c99fa5ff985081995a06d594114ae14cbe797ad7b7a6d7"; };
    features = builtins.concatLists [
      [ "dangerous_configuration" ]
      [ "default" ]
      [ "log" ]
      [ "logging" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      sct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sct."0.6.1" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls."0.20.9" = overridableMkRustCrate (profileName: rec {
    name = "rustls";
    version = "0.20.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b80e3dec595989ea8510028f30c408a4630db12c9cbb8de34203b89d6577e99"; };
    features = builtins.concatLists [
      [ "dangerous_configuration" ]
      [ "default" ]
      [ "log" ]
      [ "logging" ]
      [ "quic" ]
      [ "tls12" ]
    ];
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      sct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sct."0.7.1" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.22.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.8" = overridableMkRustCrate (profileName: rec {
    name = "rustls";
    version = "0.21.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "446e14c5cda4f3f30fe71863c34ec70f5ac79d6087097ad0bb433e1be5edf04c"; };
    features = builtins.concatLists [
      [ "log" ]
      [ "logging" ]
      [ "tls12" ]
    ];
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.5" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.101.7" { inherit profileName; }).out;
      sct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sct."0.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "rustls-native-certs";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00"; };
    dependencies = {
      ${ if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then "openssl_probe" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.5" { inherit profileName; }).out;
      rustls_pemfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."1.0.3" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "schannel" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.22" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "security_framework" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework."2.9.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "rustls-pemfile";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2d3987094b1d07b653b7dfdc3f70ce9a1da9c51ac18c1b06b662e4f9a0e9f4b2"; };
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.21.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.101.7" = overridableMkRustCrate (profileName: rec {
    name = "rustls-webpki";
    version = "0.101.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.5" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.14" = overridableMkRustCrate (profileName: rec {
    name = "rustversion";
    version = "1.0.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ffc183a10b4478d04cbbbfc96d0873219d962dd5accaff2ffbd4ceb7df837f4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rw-stream-sink."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "rw-stream-sink";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26338f5e09bb721b85b135ea05af7767c90b52f6de4f087d4f4a3a9d64e7dc04"; };
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.15" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ad4cc8da4ef723ed60bced201181d83791ad433213d8c24efffda1eec85d741"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".safe-mix."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "safe-mix";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d3d055a2582e6b00ed7a31c1524040aa391092bf636328350813f3a0605215c"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    buildDependencies = {
      rustc_version = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".safe_arch."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "safe_arch";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f398075ce1e6a179b46f51bd88d0598b92b00d3551f1a2d4ac49e771b56ac354"; };
    features = builtins.concatLists [
      [ "bytemuck" ]
      [ "default" ]
    ];
    dependencies = {
      bytemuck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".salsa20."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "salsa20";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97a22f5af31f73a954c10289c93e8a50cc23d971e80ee446f1f6f7137a088213"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "zeroize")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "cipher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.6" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-allocator."4.1.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-allocator";
    version = "4.1.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-allocator";
      version = "4.1.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_wasm_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-wasm-interface."14.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-basic-authorship."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-basic-authorship";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-basic-authorship";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_proposer_metrics = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-proposer-metrics."0.10.0-dev" { inherit profileName; }).out;
      sc_telemetry = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-block-builder."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-block-builder";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-block-builder";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-chain-spec."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-chain-spec";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-chain-spec";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      memmap2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.5.10" { inherit profileName; }).out;
      sc_chain_spec_derive = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-chain-spec-derive."4.0.0-dev" { profileName = "__noProfile"; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_executor = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sc_telemetry = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-chain-spec-derive."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-chain-spec-derive";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-chain-spec-derive";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-cli."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-cli";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-cli";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "rocksdb" ]
    ];
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.31" { inherit profileName; }).out;
      clap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.4.7" { inherit profileName; }).out;
      fdlimit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fdlimit."0.2.1" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      names = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".names."0.13.0" { inherit profileName; }).out;
      parity_scale_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      rpassword = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rpassword."7.2.0" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_client_db = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-db."0.10.0-dev" { inherit profileName; }).out;
      sc_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-keystore."4.0.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sc_service = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-service."0.10.0-dev" { inherit profileName; }).out;
      sc_telemetry = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; }).out;
      sc_tracing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-tracing."4.0.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_keyring = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keyring."24.0.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_panic_handler = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-panic-handler."8.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      bip39 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-bip39."1.0.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-client-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-client-api";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      sc_executor = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_database = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-database."4.0.0-dev" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      sp_statement_store = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-statement-store."4.0.0-dev" { inherit profileName; }).out;
      sp_storage = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-storage."13.0.0" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-db."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-client-db";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-client-db";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "kvdb-rocksdb" ]
      [ "rocksdb" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "runtime-benchmarks")
      [ "test-helpers" ]
    ];
    dependencies = {
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
      kvdb = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb."0.13.0" { inherit profileName; }).out;
      kvdb_memorydb = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb-memorydb."0.13.0" { inherit profileName; }).out;
      kvdb_rocksdb = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb-rocksdb."0.19.0" { inherit profileName; }).out;
      linked_hash_map = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      parity_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-db."0.4.12" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_state_db = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-state-db."0.10.0-dev" { inherit profileName; }).out;
      schnellru = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnellru."0.2.1" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_database = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-database."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-consensus";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-consensus";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      mockall = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mockall."0.11.4" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus-aura."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-consensus-aura";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-consensus-aura";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; }).out;
      sc_consensus_slots = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus-slots."0.10.0-dev" { inherit profileName; }).out;
      sc_telemetry = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_consensus_aura = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; }).out;
      sp_consensus_slots = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-slots."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus-slots."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-consensus-slots";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-consensus-slots";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; }).out;
      sc_telemetry = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_consensus_slots = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-slots."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-executor";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-executor";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      sc_executor_common = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor-common."0.10.0-dev" { inherit profileName; }).out;
      sc_executor_wasmtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor-wasmtime."0.10.0-dev" { inherit profileName; }).out;
      schnellru = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnellru."0.2.1" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_panic_handler = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-panic-handler."8.0.0" { inherit profileName; }).out;
      sp_runtime_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime-interface."17.0.0" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      sp_wasm_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-wasm-interface."14.0.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor-common."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-executor-common";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-executor-common";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      sc_allocator = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-allocator."4.1.0-dev" { inherit profileName; }).out;
      sp_maybe_compressed_blob = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-maybe-compressed-blob."4.1.0-dev" { inherit profileName; }).out;
      sp_wasm_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-wasm-interface."14.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      wasm_instrument = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-instrument."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor-wasmtime."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-executor-wasmtime";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-executor-wasmtime";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rustix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.36.17" { inherit profileName; }).out;
      sc_allocator = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-allocator."4.1.0-dev" { inherit profileName; }).out;
      sc_executor_common = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor-common."0.10.0-dev" { inherit profileName; }).out;
      sp_runtime_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime-interface."17.0.0" { inherit profileName; }).out;
      sp_wasm_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-wasm-interface."14.0.0" { inherit profileName; }).out;
      wasmtime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime."8.0.1" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-informant."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-informant";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-informant";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      ansi_term = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sc_network_common = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-common."0.10.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-keystore."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-keystore";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-keystore";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-network";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-network";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      async_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.9.0" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      asynchronous_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.2" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      ip_network = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ip_network."0.4.1" { inherit profileName; }).out;
      libp2p = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.51.3" { inherit profileName; }).out;
      linked_hash_set = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked_hash_set."0.1.4" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      mockall = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mockall."0.11.4" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      partial_sort = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".partial_sort."0.2.0" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_network_common = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-common."0.10.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
      wasm_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-bitswap."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-network-bitswap";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-network-bitswap";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      async_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.9.0" { inherit profileName; }).out;
      cid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cid."0.9.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      prost = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.11.9" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      unsigned_varint = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" { inherit profileName; }).out;
    };
    buildDependencies = {
      prost_build = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.11.9" { profileName = "__noProfile"; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-common."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-network-common";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-network-common";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_consensus_grandpa = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-grandpa."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      prost_build = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.11.9" { profileName = "__noProfile"; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-light."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-network-light";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-network-light";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      async_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.9.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libp2p_identity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p-identity."0.1.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      prost = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.11.9" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
    buildDependencies = {
      prost_build = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.11.9" { profileName = "__noProfile"; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-sync."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-network-sync";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-network-sync";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      async_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.9.0" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      fork_tree = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".fork-tree."3.0.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      libp2p = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.51.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      mockall = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mockall."0.11.4" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      prost = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prost."0.11.9" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sc_network_common = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-common."0.10.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      schnellru = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnellru."0.2.1" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_consensus_grandpa = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-grandpa."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
    buildDependencies = {
      prost_build = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".prost-build."0.11.9" { profileName = "__noProfile"; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-transactions."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-network-transactions";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-network-transactions";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libp2p = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.51.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sc_network_common = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-common."0.10.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-offchain."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-offchain";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-offchain";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      fnv = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.27" { inherit profileName; }).out;
      hyper_rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.24.2" { inherit profileName; }).out;
      libp2p = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.51.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sc_network_common = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-common."0.10.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_offchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-offchain."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      threadpool = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-proposer-metrics."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-proposer-metrics";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-proposer-metrics";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-rpc";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-rpc";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      jsonrpsee = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      sc_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; }).out;
      sc_chain_spec = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-chain-spec."4.0.0-dev" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_rpc_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc-api."0.10.0-dev" { inherit profileName; }).out;
      sc_tracing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-tracing."4.0.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_offchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-offchain."4.0.0-dev" { inherit profileName; }).out;
      sp_rpc = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-rpc."6.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-session."4.0.0-dev" { inherit profileName; }).out;
      sp_statement_store = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-statement-store."4.0.0-dev" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc-api."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-rpc-api";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-rpc-api";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      jsonrpsee = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_chain_spec = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-chain-spec."4.0.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_rpc = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-rpc."6.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc-server."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-rpc-server";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-rpc-server";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      jsonrpsee = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tower = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower."0.4.13" { inherit profileName; }).out;
      tower_http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-http."0.4.4" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc-spec-v2."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-rpc-spec-v2";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-rpc-spec-v2";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      jsonrpsee = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      sc_chain_spec = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-chain-spec."4.0.0-dev" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio_stream = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.14" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-service."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-service";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-service";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "rocksdb" ]
      [ "test-helpers" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      directories = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".directories."4.0.1" { inherit profileName; }).out;
      exit_future = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".exit-future."0.2.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      jsonrpsee = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sc_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; }).out;
      sc_chain_spec = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-chain-spec."4.0.0-dev" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_client_db = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-db."0.10.0-dev" { inherit profileName; }).out;
      sc_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; }).out;
      sc_executor = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; }).out;
      sc_informant = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-informant."0.10.0-dev" { inherit profileName; }).out;
      sc_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-keystore."4.0.0-dev" { inherit profileName; }).out;
      sc_network = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network."0.10.0-dev" { inherit profileName; }).out;
      sc_network_bitswap = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-bitswap."0.10.0-dev" { inherit profileName; }).out;
      sc_network_common = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-common."0.10.0-dev" { inherit profileName; }).out;
      sc_network_light = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-light."0.10.0-dev" { inherit profileName; }).out;
      sc_network_sync = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-sync."0.10.0-dev" { inherit profileName; }).out;
      sc_network_transactions = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-network-transactions."0.10.0-dev" { inherit profileName; }).out;
      sc_rpc = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc."4.0.0-dev" { inherit profileName; }).out;
      sc_rpc_server = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc-server."4.0.0-dev" { inherit profileName; }).out;
      sc_rpc_spec_v2 = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc-spec-v2."0.10.0-dev" { inherit profileName; }).out;
      sc_sysinfo = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-sysinfo."6.0.0-dev" { inherit profileName; }).out;
      sc_telemetry = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; }).out;
      sc_tracing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-tracing."4.0.0-dev" { inherit profileName; }).out;
      sc_transaction_pool = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool."4.0.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-session."4.0.0-dev" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      sp_storage = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-storage."13.0.0" { inherit profileName; }).out;
      sp_transaction_pool = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; }).out;
      sp_transaction_storage_proof = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-transaction-storage-proof."4.0.0-dev" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      static_init = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_init."1.0.3" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
      tempfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.8.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      tracing_futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-futures."0.2.5" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-state-db."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-state-db";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-state-db";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-sysinfo."6.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-sysinfo";
    version = "6.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-sysinfo";
      version = "6.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rand_pcg = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_pcg."0.3.1" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      sc_telemetry = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-telemetry."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-telemetry";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-telemetry";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.31" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      libp2p = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libp2p."0.51.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      wasm_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-tracing."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-tracing";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-tracing";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      ansi_term = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; }).out;
      atty = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atty."0.2.14" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.31" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      rustc_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_tracing_proc_macro = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-tracing-proc-macro."4.0.0-dev" { profileName = "__noProfile"; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_rpc = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-rpc."6.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_tracing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-tracing."10.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      tracing_log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.4" { inherit profileName; }).out;
      tracing_subscriber = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.25" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-tracing-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-tracing-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-tracing-proc-macro";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-transaction-pool";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-transaction-pool";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      linked_hash_map = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linked-hash-map."0.5.6" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      sc_utils = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_tracing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-tracing."10.0.0" { inherit profileName; }).out;
      sp_transaction_pool = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; }).out;
      prometheus_endpoint = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-transaction-pool-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-transaction-pool-api";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sc-utils."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sc-utils";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sc-utils";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "metered" ]
    ];
    dependencies = {
      async_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.9.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      futures_timer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-timer."3.0.2" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      prometheus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.3" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" = overridableMkRustCrate (profileName: rec {
    name = "scale-info";
    version = "2.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f7d66a1128282b7ef025a8ead62a4a9fcf017382ec53b8ffbf4d7bf77bd3c60"; };
    features = builtins.concatLists [
      [ "decode" ]
      [ "derive" ]
      [ "scale-info-derive" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      bitvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitvec."1.0.1" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      derive_more = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_more."0.99.17" { profileName = "__noProfile"; }).out;
      scale = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info-derive."2.10.0" { profileName = "__noProfile"; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scale-info-derive."2.10.0" = overridableMkRustCrate (profileName: rec {
    name = "scale-info-derive";
    version = "2.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "abf2c68b89cafb3b8d918dd07b42be0da66ff202cf1155c5739a4e0c1ea0dc19"; };
    dependencies = {
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.22" = overridableMkRustCrate (profileName: rec {
    name = "schannel";
    version = "0.1.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c3733bf4cf7ea0880754e19cb5a462007c4a8c1914bff372ccc95b464f1df88"; };
    dependencies = {
      windows_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".schnellru."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "schnellru";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "772575a524feeb803e5b0fcbc6dd9f367e579488197c94c6e4023aad2305774d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "runtime-rng" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.6" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".schnorrkel."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "schnorrkel";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "021b403afe70d81eea68f6ea12f6b3c9588e5d536a94c3bf80f15e7faa267862"; };
    features = builtins.concatLists [
      [ "getrandom" ]
      [ "preaudit_deprecated" ]
      [ "rand" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      arrayref = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.7" { inherit profileName; }).out;
      arrayvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; }).out;
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."2.1.3" { inherit profileName; }).out;
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.1.16" { inherit profileName; }).out;
      merlin = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".merlin."2.0.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.7.3" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.8.2" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scratch."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "scratch";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a3cf7c11c38cb994f3d40e8a8cde3bbd1f72a435e4c49e85d6553d8312306152"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sct."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "sct";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b362b83898e0e69f38515b82ee15aa80636befe47c3b6d3d89a911e78fc228ce"; };
    dependencies = {
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sct."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "sct";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414"; };
    dependencies = {
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.5" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sdp."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "sdp";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d22a5ef407871893fd72b4562ee15e4742269b173959db4b8df6f538c414e13"; };
    dependencies = {
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      substring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".substring."1.4.5" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sec1."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "sec1";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3be24c1842290c45df0a7bf069e0c268a747ad05a192f2fd7dcfdbc1cba40928"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "base16ct" ]
      [ "default" ]
      [ "der" ]
      [ "generic-array" ]
      [ "pem" ]
      [ "pkcs8" ]
      [ "point" ]
      [ "std" ]
      [ "subtle" ]
      [ "zeroize" ]
    ];
    dependencies = {
      base16ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base16ct."0.1.1" { inherit profileName; }).out;
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.9.0" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sec1."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "sec1";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3e97a565f76233a6003f9f5c54be1d9c5bdfa3eccfb189469f11ec4901c47dc"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "der" ]
      [ "point" ]
      [ "std" ]
      [ "subtle" ]
      [ "zeroize" ]
    ];
    dependencies = {
      base16ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base16ct."0.2.0" { inherit profileName; }).out;
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.8" { inherit profileName; }).out;
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      pkcs8 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".secp256k1."0.24.3" = overridableMkRustCrate (profileName: rec {
    name = "secp256k1";
    version = "0.24.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6b1629c9c557ef9b293568b338dddfc8208c98a18c59d722a9d53f859d9c9b62"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "global-context" ]
      [ "recovery" ]
      [ "std" ]
    ];
    dependencies = {
      secp256k1_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".secp256k1-sys."0.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".secp256k1-sys."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "secp256k1-sys";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "83080e2c2fc1006e625be82e5d1eb6a43b7fd9578b617fcc55814daf286bba4b"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "recovery" ]
      [ "std" ]
    ];
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".secrecy."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "secrecy";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9bd1c54ea06cfd2f6b63219704de0b9b4f72dcc2b8fdef820be6cd799780e91e"; };
    features = builtins.concatLists [
      [ "alloc" ]
    ];
    dependencies = {
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework."2.9.2" = overridableMkRustCrate (profileName: rec {
    name = "security-framework";
    version = "2.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05b64fb303737d99b81884b2c63433e9ae28abebe5eb5045dcdd175dc2ecf4de"; };
    features = builtins.concatLists [
      [ "OSX_10_9" ]
      [ "default" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      core_foundation = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; }).out;
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      security_framework_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.9.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.9.1" = overridableMkRustCrate (profileName: rec {
    name = "security-framework-sys";
    version = "2.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e932934257d3b408ed8f30db49d85ea163bfe74961f017f405b025af298f0c7a"; };
    features = builtins.concatLists [
      [ "OSX_10_9" ]
    ];
    dependencies = {
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."1.0.20" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "1.0.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "836fa6a3e1e547f9a2c4040802ec865b5d85f4014efe00555d7090a3dcaa1090"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "semver-parser";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.190";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "91d3c334ca1ee894a2c6f6ad698fe8c435b76d504b13d436f0685d648d6d96f7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "derive" ]
      [ "serde_derive" ]
      [ "std" ]
    ];
    dependencies = {
      serde_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.190" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.190" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.190";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67c5609f394e5c2bd7fc51efda478004ea80ef42fee983d5c67a65e34f32c0e3"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.108";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d1c7e3eac408d115102c4c24ad393e0821bb3a5df4d506a80f85f7a742a526b"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "raw_value" ]
      [ "std" ]
      [ "unbounded_depth" ]
    ];
    dependencies = {
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.9" { inherit profileName; }).out;
      ryu = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.15" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_spanned."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "serde_spanned";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12022b835073e5b11e90a14f86838ceb1c8fb0325b72416845c487ac0fa95e80"; };
    features = builtins.concatLists [
      [ "serde" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.8" = overridableMkRustCrate (profileName: rec {
    name = "sha-1";
    version = "0.9.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "99cd6713db3cf16b6c84e06321e049a9b9f699826e16096d23bbcc44d15d51a6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" = overridableMkRustCrate (profileName: rec {
    name = "sha1";
    version = "0.10.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a256f46ea78a0c0d9ff00077504903ac881a1dafdc20da66545699e7776b3e69"; };
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.7.3" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.8.1" { inherit profileName; }).out;
      fake_simd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fake-simd."0.1.2" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.2.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.9.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      block_buffer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.9.0" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.9.0" { inherit profileName; }).out;
      opaque_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".opaque-debug."0.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" = overridableMkRustCrate (profileName: rec {
    name = "sha2";
    version = "0.10.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" || hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then "cpufeatures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.11" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" = overridableMkRustCrate (profileName: rec {
    name = "sha3";
    version = "0.10.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      [ "std" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      keccak = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".keccak."0.1.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.7" = overridableMkRustCrate (profileName: rec {
    name = "sharded-slab";
    version = "0.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6"; };
    dependencies = {
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shlex."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "shlex";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a7cee0529a6d40f580e7a5e6c495c8fbfe21b7b52795ed4bb5e62cdf92bc6380"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.1" = overridableMkRustCrate (profileName: rec {
    name = "signal-hook-registry";
    version = "1.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1"; };
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signature."1.6.4" = overridableMkRustCrate (profileName: rec {
    name = "signature";
    version = "1.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "74233d3b3b2f6d4b006dc19dee745e73e2a6bfb6f93607cd3b02bd5b00797d7c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "digest" ]
      [ "digest-preview" ]
      [ "hazmat-preview" ]
      [ "rand-preview" ]
      [ "rand_core" ]
      [ "std" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".signature."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "signature";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e1788eed21689f9cf370582dfc467ef36ed9c707f073528ddafa8d83e3b8500"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "digest" ]
      [ "rand_core" ]
      [ "std" ]
    ];
    dependencies = {
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".simba."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "simba";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "061507c94fc6ab4ba1c9a0305018408e312e17c041eb63bef8aa726fa33aceae"; };
    features = builtins.concatLists [
      [ "std" ]
      [ "wide" ]
    ];
    dependencies = {
      approx = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.1" { inherit profileName; }).out;
      num_complex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-complex."0.4.4" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      wide = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wide."0.7.13" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".siphasher."0.3.11" = overridableMkRustCrate (profileName: rec {
    name = "siphasher";
    version = "0.3.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slice-group-by."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "slice-group-by";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "826167069c09b99d56f31e9ae5c99049e932a98c9dc2dac47645b08dbbf76ba7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.11.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "942b4a808e05215192e39f4ab80813e599068285906cc91aa64f923db842bd5a"; };
    features = builtins.concatLists [
      [ "const_generics" ]
      [ "const_new" ]
      [ "union" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snafu."0.7.5" = overridableMkRustCrate (profileName: rec {
    name = "snafu";
    version = "0.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e4de37ad025c587a29e8f3f5605c00f70b98715ef90b9061a815b9e59e9042d6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "backtrace")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "backtraces")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "rust_1_39")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "rust_1_46")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "backtrace" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "doc_comment" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".doc-comment."0.3.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "snafu_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu-derive."0.7.5" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snafu-derive."0.7.5" = overridableMkRustCrate (profileName: rec {
    name = "snafu-derive";
    version = "0.7.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "990079665f075b699031e9c08fd3ab99be5029b96f3b78dc0709e8f77e4efebf"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "rust_1_39")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "rust_1_46")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "heck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snap."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "snap";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e9f0ab6ef7eb7353d9119c170a436d1bf248eea575ac42d19d12f4e34130831"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".snow."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "snow";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c9d1425eb528a21de2755c75af4c9b5d57f50a0d4c3b7f1828a4cd03f8ba155"; };
    features = builtins.concatLists [
      [ "aes-gcm" ]
      [ "blake2" ]
      [ "chacha20poly1305" ]
      [ "curve25519-dalek" ]
      [ "default-resolver" ]
      [ "ring" ]
      [ "ring-resolver" ]
      [ "sha2" ]
    ];
    dependencies = {
      aes_gcm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.9.4" { inherit profileName; }).out;
      blake2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      chacha20poly1305 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chacha20poly1305."0.9.1" { inherit profileName; }).out;
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."4.1.1" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      rustc_version = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.10" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.4.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f7916fc008ca5542385b89a3d3ce689953c143e9304a9bf8beec1de48994c0d"; };
    features = builtins.concatLists [
      [ "all" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.5" = overridableMkRustCrate (profileName: rec {
    name = "socket2";
    version = "0.5.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b5fac59a5cb5dd637972e5fca70daf0523c9067fcdc4842f053dae04a18f8e9"; };
    features = builtins.concatLists [
      [ "all" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".soketto."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "soketto";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "41d1c5305e39e09653383c2c7244f2f78b3bcae37cf50c64cb4789c9f5096ec2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "deflate" ]
      [ "flate2" ]
      [ "http" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      flate2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.0.28" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      httparse = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.8.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.8" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-api";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_api_proc_macro" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-api-proc-macro."4.0.0-dev" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_version" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-version."5.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-api";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-api";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "frame-metadata" ]
      [ "hash-db" ]
      [ "sp-externalities" ]
      [ "sp-metadata-ir" ]
      [ "sp-state-machine" ]
      [ "sp-trie" ]
      [ "std" ]
      [ "thiserror" ]
    ];
    dependencies = {
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_api_proc_macro = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api-proc-macro."4.0.0-dev" { profileName = "__noProfile"; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_metadata_ir = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-metadata-ir."0.1.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-api-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-api-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-api-proc-macro";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "default")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "blake2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-api-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-api-proc-macro";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "frame-metadata" ]
      [ "std" ]
    ];
    dependencies = {
      inflector = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; }).out;
      blake2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      expander = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".expander."2.0.0" { inherit profileName; }).out;
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-application-crypto."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-application-crypto";
    version = "7.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-application-crypto";
      version = "7.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_io" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-io."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-application-crypto";
    version = "23.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-application-crypto";
      version = "23.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "full_crypto" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-arithmetic."6.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-arithmetic";
    version = "6.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-arithmetic";
      version = "6.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "integer_sqrt" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".integer-sqrt."0.1.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-arithmetic";
    version = "16.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-arithmetic";
      version = "16.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      integer_sqrt = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".integer-sqrt."0.1.5" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-block-builder."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-block-builder";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-block-builder";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-blockchain";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-blockchain";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      schnellru = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnellru."0.2.1" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_database = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-database."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-consensus";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-aura."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus-aura";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-consensus-aura";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "async-trait" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_consensus_slots = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-slots."0.10.0-dev" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-babe."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus-babe";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-consensus-babe";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "async-trait" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "default")
      [ "serde" ]
      [ "sp-timestamp" ]
      [ "std" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_consensus_slots = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-slots."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-grandpa."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus-grandpa";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-consensus-grandpa";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "sp-keystore" ]
      [ "std" ]
    ];
    dependencies = {
      grandpa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".finality-grandpa."0.16.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-slots."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-consensus-slots";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-consensus-slots";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-core";
    version = "7.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-core";
      version = "7.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "hash_db" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.15.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "hash256_std_hasher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash256-std-hasher."0.15.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "primitive_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.12.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "secrecy" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".secrecy."0.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_debug_derive" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-debug-derive."5.0.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime_interface" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime-interface."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_storage" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-storage."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "ss58_registry" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ss58-registry."1.43.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-core";
    version = "21.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-core";
      version = "21.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "array-bytes" ]
      [ "blake2" ]
      [ "bs58" ]
      [ "default" ]
      [ "dyn-clonable" ]
      [ "ed25519-zebra" ]
      [ "full_crypto" ]
      [ "futures" ]
      [ "impl-serde" ]
      [ "lazy_static" ]
      [ "libsecp256k1" ]
      [ "parking_lot" ]
      [ "rand" ]
      [ "regex" ]
      [ "secp256k1" ]
      [ "serde" ]
      [ "sp-core-hashing" ]
      [ "sp-externalities" ]
      [ "std" ]
      [ "substrate-bip39" ]
      [ "thiserror" ]
      [ "tiny-bip39" ]
      [ "tracing" ]
    ];
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      blake2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      bounded_collections = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bounded-collections."0.1.9" { inherit profileName; }).out;
      bs58 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bs58."0.4.0" { inherit profileName; }).out;
      dyn_clonable = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dyn-clonable."0.9.0" { inherit profileName; }).out;
      ed25519_zebra = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-zebra."3.1.0" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
      hash256_std_hasher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash256-std-hasher."0.15.2" { inherit profileName; }).out;
      impl_serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.4.0" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      libsecp256k1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.7.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      merlin = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".merlin."2.0.1" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      primitive_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.12.2" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      schnorrkel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnorrkel."0.9.1" { inherit profileName; }).out;
      secp256k1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".secp256k1."0.24.3" { inherit profileName; }).out;
      secrecy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".secrecy."0.8.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_core_hashing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core-hashing."9.0.0" { inherit profileName; }).out;
      sp_debug_derive = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-debug-derive."8.0.0" { profileName = "__noProfile"; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_runtime_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime-interface."17.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_storage = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-storage."13.0.0" { inherit profileName; }).out;
      ss58_registry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ss58-registry."1.43.0" { inherit profileName; }).out;
      substrate_bip39 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".substrate-bip39."0.4.5" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      bip39 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny-bip39."1.0.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-core-hashing."5.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-core-hashing";
    version = "5.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-core-hashing";
      version = "5.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "blake2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "byteorder" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "digest" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sha2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sha3" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "twox_hash" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core-hashing."9.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-core-hashing";
    version = "9.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-core-hashing";
      version = "9.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      blake2b_simd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2b_simd."1.0.2" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      digest = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      sha3 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha3."0.10.8" { inherit profileName; }).out;
      twox_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-core-hashing-proc-macro."5.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-core-hashing-proc-macro";
    version = "5.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-core-hashing-proc-macro";
      version = "5.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core_hashing" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core-hashing."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core-hashing-proc-macro."9.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-core-hashing-proc-macro";
    version = "9.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-core-hashing-proc-macro";
      version = "9.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      sp_core_hashing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core-hashing."9.0.0" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-database."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-database";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-database";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      kvdb = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".kvdb."0.13.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-debug-derive."5.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-debug-derive";
    version = "5.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-debug-derive";
      version = "5.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-debug-derive."8.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-debug-derive";
    version = "8.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-debug-derive";
      version = "8.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "default")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime" || rootFeatures' ? "pallet-aleph/try-runtime" || rootFeatures' ? "pallet-committee-management/try-runtime" || rootFeatures' ? "pallet-elections/try-runtime" || rootFeatures' ? "pallets-support/try-runtime") "force-debug")
      [ "std" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-externalities."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-externalities";
    version = "0.13.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-externalities";
      version = "0.13.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "environmental" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".environmental."1.1.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_storage" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-storage."7.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-externalities";
    version = "0.19.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-externalities";
      version = "0.19.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      environmental = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".environmental."1.1.4" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_storage = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-storage."13.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-inherents."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-inherents";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-inherents";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "impl_trait_for_tuples" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-inherents";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-inherents";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "async-trait" ]
      [ "default" ]
      [ "sp-runtime" ]
      [ "std" ]
      [ "thiserror" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-io."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-io";
    version = "7.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-io";
      version = "7.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_externalities" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-externalities."0.13.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime_interface" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime-interface."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_tracing" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-tracing."6.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "tracing_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-io";
    version = "23.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-io";
      version = "23.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "disable_oom" ]
      [ "disable_panic_handler" ]
      [ "ed25519" ]
      [ "ed25519-dalek" ]
      [ "libsecp256k1" ]
      [ "log" ]
      [ "secp256k1" ]
      [ "sp-keystore" ]
      [ "sp-state-machine" ]
      [ "sp-trie" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      ed25519 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519."1.5.3" { inherit profileName; }).out;
      ed25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."1.0.1" { inherit profileName; }).out;
      libsecp256k1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsecp256k1."0.7.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      secp256k1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".secp256k1."0.24.3" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_runtime_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime-interface."17.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_tracing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-tracing."10.0.0" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      tracing_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
    };
    buildDependencies = {
      rustversion = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.14" { profileName = "__noProfile"; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keyring."24.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-keyring";
    version = "24.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-keyring";
      version = "24.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      strum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strum."0.24.1" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-keystore";
    version = "0.27.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-keystore";
      version = "0.27.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-maybe-compressed-blob."4.1.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-maybe-compressed-blob";
    version = "4.1.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-maybe-compressed-blob";
      version = "4.1.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      zstd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd."0.12.4" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-metadata-ir."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-metadata-ir";
    version = "0.1.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-metadata-ir";
      version = "0.1.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      frame_metadata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".frame-metadata."16.0.0" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-npos-elections."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-npos-elections";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-npos-elections";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-offchain."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-offchain";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-offchain";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-panic-handler."8.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-panic-handler";
    version = "8.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-panic-handler";
      version = "8.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      backtrace = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.69" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-rpc."6.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-rpc";
    version = "6.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-rpc";
      version = "6.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      rustc_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-runtime";
    version = "7.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-runtime";
      version = "7.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "either" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "hash256_std_hasher" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash256-std-hasher."0.15.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "impl_trait_for_tuples" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "paste" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_application_crypto" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-application-crypto."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_arithmetic" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-arithmetic."6.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_io" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-io."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_weights" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-weights."4.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-runtime";
    version = "24.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-runtime";
      version = "24.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "rand" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/runtime-benchmarks") "runtime-benchmarks")
      [ "serde" ]
      [ "std" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/try-runtime") "try-runtime")
    ];
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      hash256_std_hasher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash256-std-hasher."0.15.2" { inherit profileName; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_weights = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-weights."20.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime-interface."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-runtime-interface";
    version = "7.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-runtime-interface";
      version = "7.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "bytes" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "impl_trait_for_tuples" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "primitive_types" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.12.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_externalities" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-externalities."0.13.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime_interface_proc_macro" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime-interface-proc-macro."6.0.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_storage" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-storage."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_tracing" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-tracing."6.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_wasm_interface" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-wasm-interface."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "static_assertions" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime-interface."17.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-runtime-interface";
    version = "17.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-runtime-interface";
      version = "17.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "disable_target_static_assertions" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      primitive_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".primitive-types."0.12.2" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_runtime_interface_proc_macro = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime-interface-proc-macro."11.0.0" { profileName = "__noProfile"; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_storage = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-storage."13.0.0" { inherit profileName; }).out;
      sp_tracing = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-tracing."10.0.0" { inherit profileName; }).out;
      sp_wasm_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-wasm-interface."14.0.0" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime-interface-proc-macro."6.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-runtime-interface-proc-macro";
    version = "6.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-runtime-interface-proc-macro";
      version = "6.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "inflector" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro_crate" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime-interface-proc-macro."11.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-runtime-interface-proc-macro";
    version = "11.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-runtime-interface-proc-macro";
      version = "11.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      inflector = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; }).out;
      proc_macro_crate = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.3" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-session."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-session";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-session";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "sp-keystore" ]
      [ "sp-runtime" ]
      [ "std" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_staking = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-staking."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-staking";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-staking";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-staking."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-staking";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-staking";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/runtime-benchmarks") "runtime-benchmarks")
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-state-machine";
    version = "0.28.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-state-machine";
      version = "0.28.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "parking_lot" ]
      [ "rand" ]
      [ "sp-panic-handler" ]
      [ "std" ]
      [ "thiserror" ]
      [ "tracing" ]
    ];
    dependencies = {
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_panic_handler = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-panic-handler."8.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      trie_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".trie-db."0.27.1" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-statement-store."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-statement-store";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-statement-store";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "thiserror" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_runtime_interface = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime-interface."17.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-std";
    version = "5.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-std";
      version = "5.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-std";
    version = "8.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-std";
      version = "8.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-storage."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-storage";
    version = "7.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-storage";
      version = "7.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "ref_cast" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ref-cast."1.0.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_debug_derive" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-debug-derive."5.0.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-storage."13.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-storage";
    version = "13.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-storage";
      version = "13.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "impl-serde" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      impl_serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.4.0" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ref_cast = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ref-cast."1.0.20" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_debug_derive = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-debug-derive."8.0.0" { profileName = "__noProfile"; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-timestamp."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-timestamp";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-timestamp";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "async-trait" ]
      [ "default" ]
      [ "std" ]
      [ "thiserror" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-tracing."6.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-tracing";
    version = "6.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-tracing";
      version = "6.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "tracing" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "tracing_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-tracing."10.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-tracing";
    version = "10.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-tracing";
      version = "10.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "tracing-subscriber" ]
      [ "with-tracing" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      tracing_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
      tracing_subscriber = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.25" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-transaction-pool."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-transaction-pool";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-transaction-pool";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-transaction-storage-proof."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-transaction-storage-proof";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-transaction-storage-proof";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "async-trait" ]
      [ "default" ]
      [ "sp-core" ]
      [ "sp-trie" ]
      [ "std" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-trie";
    version = "22.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-trie";
      version = "22.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "ahash" ]
      [ "default" ]
      [ "hashbrown" ]
      [ "lazy_static" ]
      [ "nohash-hasher" ]
      [ "parking_lot" ]
      [ "schnellru" ]
      [ "std" ]
      [ "thiserror" ]
      [ "tracing" ]
    ];
    dependencies = {
      ahash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.6" { inherit profileName; }).out;
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      memory_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memory-db."0.32.0" { inherit profileName; }).out;
      nohash_hasher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      schnellru = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnellru."0.2.1" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      trie_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".trie-db."0.27.1" { inherit profileName; }).out;
      trie_root = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".trie-root."0.18.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-version."5.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-version";
    version = "5.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-version";
      version = "5.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core_hashing_proc_macro" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core-hashing-proc-macro."5.0.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-runtime."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_version_proc_macro" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-version-proc-macro."4.0.0-dev" { profileName = "__noProfile"; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-version";
    version = "22.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-version";
      version = "22.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "impl-serde" ]
      [ "parity-wasm" ]
      [ "serde" ]
      [ "std" ]
      [ "thiserror" ]
    ];
    dependencies = {
      impl_serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-serde."0.4.0" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      parity_wasm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.45.0" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sp_core_hashing_proc_macro = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core-hashing-proc-macro."9.0.0" { profileName = "__noProfile"; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_version_proc_macro = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version-proc-macro."8.0.0" { profileName = "__noProfile"; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-version-proc-macro."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "sp-version-proc-macro";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-version-proc-macro";
      version = "4.0.0-dev";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version-proc-macro."8.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-version-proc-macro";
    version = "8.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-version-proc-macro";
      version = "8.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-wasm-interface."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-wasm-interface";
    version = "7.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-wasm-interface";
      version = "7.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "impl_trait_for_tuples" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-wasm-interface."14.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-wasm-interface";
    version = "14.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-wasm-interface";
      version = "14.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "anyhow" ]
      [ "default" ]
      [ "log" ]
      [ "std" ]
      [ "wasmtime" ]
    ];
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      impl_trait_for_tuples = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".impl-trait-for-tuples."0.2.2" { profileName = "__noProfile"; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      wasmtime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime."8.0.1" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate".sp-weights."4.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-weights";
    version = "4.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate;
      name = "sp-weights";
      version = "4.0.0";
      rev = "edd03de713561ecd604a8b2c957d0b620a2420de";
      ref = "aleph-v0.9.38";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "scale_info" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "smallvec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_arithmetic" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-arithmetic."6.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-core."7.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_debug_derive" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-debug-derive."5.0.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "sp_std" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate".sp-std."5.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".sp-weights."20.0.0" = overridableMkRustCrate (profileName: rec {
    name = "sp-weights";
    version = "20.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "sp-weights";
      version = "20.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      sp_arithmetic = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-arithmetic."16.0.0" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_debug_derive = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-debug-derive."8.0.0" { profileName = "__noProfile"; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spin."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "spin";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" = overridableMkRustCrate (profileName: rec {
    name = "spin";
    version = "0.9.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67"; };
    features = builtins.concatLists [
      [ "mutex" ]
      [ "once" ]
      [ "rwlock" ]
      [ "spin_mutex" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spinners."4.1.0" = overridableMkRustCrate (profileName: rec {
    name = "spinners";
    version = "4.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08615eea740067d9899969bc2891c68a19c315cb1f66640af9a9ecb91b13bcab"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "lazy_static" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "maplit" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".maplit."1.0.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "strum" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strum."0.24.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spki."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "spki";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "67cf02bbac7a337dc36e4f5a693db6c21e7863f45070f7064577eb4367a3212b"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "base64ct" ]
      [ "pem" ]
    ];
    dependencies = {
      base64ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.6.0" { inherit profileName; }).out;
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spki."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "spki";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d1e996ef02c474957d681f1b05213dfb0abab947b446a62d37770b23500184a"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      base64ct = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.6.0" { inherit profileName; }).out;
      der = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.8" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ss58-registry."1.43.0" = overridableMkRustCrate (profileName: rec {
    name = "ss58-registry";
    version = "1.43.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5e6915280e2d0db8911e5032a5c275571af6bdded2916abd691a659be25d3439"; };
    features = builtins.concatLists [
      [ "num-format" ]
      [ "std" ]
    ];
    dependencies = {
      num_format = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-format."0.4.4" { inherit profileName; }).out;
    };
    buildDependencies = {
      inflector = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { profileName = "__noProfile"; }).out;
      proc_macro2 = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { profileName = "__noProfile"; }).out;
      quote = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { profileName = "__noProfile"; }).out;
      serde = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { profileName = "__noProfile"; }).out;
      serde_json = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { profileName = "__noProfile"; }).out;
      unicode_xid = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.4" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "stable_deref_trait";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "static_assertions";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_init."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "static_init";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a2a1c578e98c1c16fc3b8ec1328f7659a500737d7a0c6d625e73e830ff9c1f6"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android") then "parking_lot" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android") then "parking_lot_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.6" { inherit profileName; }).out;
      static_init_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".static_init_macro."1.0.2" { profileName = "__noProfile"; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
    buildDependencies = {
      cfg_aliases = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".static_init_macro."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "static_init_macro";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70a2595fc3aa78f2d0e45dd425b22282dd863273761cc77780914b2cf3003acf"; };
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
    buildDependencies = {
      cfg_aliases = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "strum";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "063e6045c0e62079840579a7e47a355ae92f60eb74daaf156fb1e84ba164e63f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "derive" ]
      [ "std" ]
      [ "strum_macros" ]
    ];
    dependencies = {
      strum_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.24.3" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum."0.25.0" = overridableMkRustCrate (profileName: rec {
    name = "strum";
    version = "0.25.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "290d54ea6f91c969195bdbcd7442c8c2a2ba87da8bf60a7ee86a235d4bc1e125"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "default")
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.24.3" = overridableMkRustCrate (profileName: rec {
    name = "strum_macros";
    version = "0.24.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e385be0d24f186b4ce2f9982191e7101bb737312ad61c1f2f984f34bcf85d59"; };
    dependencies = {
      heck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      rustversion = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.14" { profileName = "__noProfile"; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.25.3" = overridableMkRustCrate (profileName: rec {
    name = "strum_macros";
    version = "0.25.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23dc1fa9ac9c169a78ba62f0b841814b7abae11bdd047b9c58f893439e309ea0"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "heck" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.4.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "proc_macro2" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "rustversion" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.14" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stun."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "stun";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a7e94b1ec00bad60e6410e058b52f1c66de3dc5fe4d62d09b3e52bb7d3b73e25"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      crc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc."3.0.1" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".substrate-bip39."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "substrate-bip39";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e620c7098893ba667438b47169c00aacdd9e7c10e042250ce2b60b087ec97328"; };
    dependencies = {
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.11.0" { inherit profileName; }).out;
      pbkdf2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.8.0" { inherit profileName; }).out;
      schnorrkel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schnorrkel."0.9.1" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.9.9" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-build-script-utils."3.0.0" = overridableMkRustCrate (profileName: rec {
    name = "substrate-build-script-utils";
    version = "3.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "substrate-build-script-utils";
      version = "3.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-frame-rpc-system."4.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "substrate-frame-rpc-system";
    version = "4.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "substrate-frame-rpc-system";
      version = "4.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      frame_system_rpc_runtime_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system-rpc-runtime-api."4.0.0-dev" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      jsonrpsee = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_rpc_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc-api."0.10.0-dev" { inherit profileName; }).out;
      sc_transaction_pool_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-transaction-pool-api."4.0.0-dev" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-prometheus-endpoint."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "substrate-prometheus-endpoint";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "substrate-prometheus-endpoint";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      hyper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.27" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      prometheus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prometheus."0.13.3" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-rpc-client."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "substrate-rpc-client";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "substrate-rpc-client";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "jsonrpsee" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jsonrpsee."0.16.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sc_rpc_api" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-rpc-api."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-test-client."2.0.1" = overridableMkRustCrate (profileName: rec {
    name = "substrate-test-client";
    version = "2.0.1";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "substrate-test-client";
      version = "2.0.1";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_client_db = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-db."0.10.0-dev" { inherit profileName; }).out;
      sc_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; }).out;
      sc_executor = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; }).out;
      sc_offchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-offchain."4.0.0-dev" { inherit profileName; }).out;
      sc_service = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-service."0.10.0-dev" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_keyring = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keyring."24.0.0" { inherit profileName; }).out;
      sp_keystore = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-test-runtime."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "substrate-test-runtime";
    version = "2.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "substrate-test-runtime";
      version = "2.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      [ "array-bytes" ]
      [ "default" ]
      [ "sc-service" ]
      [ "sp-keyring" ]
      [ "std" ]
      [ "substrate-wasm-builder" ]
    ];
    dependencies = {
      array_bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".array-bytes."6.1.0" { inherit profileName; }).out;
      frame_executive = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-executive."4.0.0-dev" { inherit profileName; }).out;
      frame_support = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-support."4.0.0-dev" { inherit profileName; }).out;
      frame_system = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system."4.0.0-dev" { inherit profileName; }).out;
      frame_system_rpc_runtime_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-system-rpc-runtime-api."4.0.0-dev" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      pallet_babe = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-babe."4.0.0-dev" { inherit profileName; }).out;
      pallet_balances = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-balances."4.0.0-dev" { inherit profileName; }).out;
      pallet_timestamp = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".pallet-timestamp."4.0.0-dev" { inherit profileName; }).out;
      codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      sc_service = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-service."0.10.0-dev" { inherit profileName; }).out;
      scale_info = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scale-info."2.10.0" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_application_crypto = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-application-crypto."23.0.0" { inherit profileName; }).out;
      sp_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-block-builder."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus_aura = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; }).out;
      sp_consensus_babe = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-babe."0.10.0-dev" { inherit profileName; }).out;
      sp_consensus_grandpa = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-grandpa."4.0.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_externalities = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      sp_inherents = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      sp_io = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      sp_keyring = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keyring."24.0.0" { inherit profileName; }).out;
      sp_offchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-offchain."4.0.0-dev" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      sp_session = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-session."4.0.0-dev" { inherit profileName; }).out;
      sp_state_machine = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      sp_std = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-std."8.0.0" { inherit profileName; }).out;
      sp_transaction_pool = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-transaction-pool."4.0.0-dev" { inherit profileName; }).out;
      sp_trie = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-trie."22.0.0" { inherit profileName; }).out;
      sp_version = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      trie_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".trie-db."0.27.1" { inherit profileName; }).out;
    };
    buildDependencies = {
      substrate_wasm_builder = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-wasm-builder."5.0.0-dev" { profileName = "__noProfile"; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-test-runtime-client."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "substrate-test-runtime-client";
    version = "2.0.0";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "substrate-test-runtime-client";
      version = "2.0.0";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      sc_block_builder = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-block-builder."0.10.0-dev" { inherit profileName; }).out;
      sc_client_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-client-api."4.0.0-dev" { inherit profileName; }).out;
      sc_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_api = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      sp_blockchain = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-blockchain."4.0.0-dev" { inherit profileName; }).out;
      sp_consensus = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus."0.10.0-dev" { inherit profileName; }).out;
      sp_core = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      sp_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      substrate_test_client = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-test-client."2.0.1" { inherit profileName; }).out;
      substrate_test_runtime = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-test-runtime."2.0.0" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-wasm-builder."5.0.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "substrate-wasm-builder";
    version = "5.0.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "substrate-wasm-builder";
      version = "5.0.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    dependencies = {
      ansi_term = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; }).out;
      build_helper = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".build-helper."0.1.1" { inherit profileName; }).out;
      cargo_metadata = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cargo_metadata."0.15.4" { inherit profileName; }).out;
      filetime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.22" { inherit profileName; }).out;
      parity_wasm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.45.0" { inherit profileName; }).out;
      sp_maybe_compressed_blob = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-maybe-compressed-blob."4.1.0-dev" { inherit profileName; }).out;
      strum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strum."0.24.1" { inherit profileName; }).out;
      tempfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.8.1" { inherit profileName; }).out;
      toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.7.8" { inherit profileName; }).out;
      walkdir = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.4.0" { inherit profileName; }).out;
      wasm_opt = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-opt."0.112.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".substring."1.4.5" = overridableMkRustCrate (profileName: rec {
    name = "substring";
    version = "1.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "42ee6433ecef213b2e72f587ef64a2f5943e7cd16fbd82dbe8bc07486c534c86"; };
    buildDependencies = {
      autocfg = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.1.0" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" = overridableMkRustCrate (profileName: rec {
    name = "subtle";
    version = "2.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6bdef32e8150c2a081110b42772ffe7d7c9032b606bc226c8260fd97e0976601"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "i128" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.109";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "fold" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      [ "visit" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "2.0.39";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23e78b90f2fcf45d3e842032ce32e3f2d1545ba6636271dcbf24fa306d87be7a"; };
    features = builtins.concatLists [
      [ "clone-impls" ]
      [ "default" ]
      [ "derive" ]
      [ "extra-traits" ]
      [ "fold" ]
      [ "full" ]
      [ "parsing" ]
      [ "printing" ]
      [ "proc-macro" ]
      [ "quote" ]
      [ "visit" ]
      [ "visit-mut" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      unicode_ident = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".synstructure."0.12.6" = overridableMkRustCrate (profileName: rec {
    name = "synstructure";
    version = "0.12.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
      unicode_xid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".system-configuration."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "system-configuration";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ba3a3adc5c275d719af8cb4272ea1c4a6d668a777f37e115f6d11ddbc1c8e0e7"; };
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      core_foundation = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.3" { inherit profileName; }).out;
      system_configuration_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".system-configuration-sys."0.5.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".system-configuration-sys."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "system-configuration-sys";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a75fb188eb626b924683e3b95e3a48e63551fcfb51949de2f06a9d91dbee93c9"; };
    dependencies = {
      core_foundation_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.4" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
  });
  
  "git+https://github.com/EspressoSystems/tagged-base64".tagged-base64."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "tagged-base64";
    version = "0.3.1";
    registry = "git+https://github.com/EspressoSystems/tagged-base64";
    src = fetchCrateGit {
      url = https://github.com/EspressoSystems/tagged-base64;
      name = "tagged-base64";
      version = "0.3.1";
      rev = "9207d39ba7a9c11801511a7077ea4330b6173e44";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "ark-serialize")
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_serialize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-serialize."0.4.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "ark_std" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ark-std."0.4.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "base64" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "crc_any" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc-any."2.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "snafu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".snafu."0.7.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "tagged_base64_macros" else null } = (buildRustPackages."git+https://github.com/EspressoSystems/tagged-base64".tagged-base64-macros."0.3.1" { profileName = "__noProfile"; }).out;
    };
  });
  
  "git+https://github.com/EspressoSystems/tagged-base64".tagged-base64-macros."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "tagged-base64-macros";
    version = "0.3.1";
    registry = "git+https://github.com/EspressoSystems/tagged-base64";
    src = fetchCrateGit {
      url = https://github.com/EspressoSystems/tagged-base64;
      name = "tagged-base64-macros";
      version = "0.3.1";
      rev = "9207d39ba7a9c11801511a7077ea4330b6173e44";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "quote" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "syn" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "tap";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.12" = overridableMkRustCrate (profileName: rec {
    name = "target-lexicon";
    version = "0.12.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14c39fd04924ca3a864207c66fc2cd7d22d7c016007f9ce846cbb9326331930a"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.8.1" = overridableMkRustCrate (profileName: rec {
    name = "tempfile";
    version = "3.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ef1adac450ad7f4b3c28589471ade84f25f731a7a0fe30d71dfa9f60fd808e5"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      fastrand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.0.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.4.1" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.21" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".termcolor."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "termcolor";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6093bad37da69aab9d123a8091e4be0aa4a03e4d601ec641c327398315f62b64"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".termtree."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "termtree";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3369f5ac52d5eb6ab48c6b4ffdc8efbcad6b89c765749064ba298f2c68a16a76"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.50";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f9a7210f5c9a7156bb50aa36aed4c95afb51df0df00713949448cf9e97d382d2"; };
    dependencies = {
      thiserror_impl = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.50" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.50" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.50";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "266b2e40bc00e5a6c09c3584011e08b06f123c00362c92b975ba9843aaaa14b8"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thousands."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "thousands";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3bf63baf9f5039dadc247375c29eb13706706cfde997d0330d05aa63a77d8820"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.7" = overridableMkRustCrate (profileName: rec {
    name = "thread_local";
    version = "1.1.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3fdd6f064ccff2d6567adcb3873ca630700f00b5ad3f060c25b5dcfd9a4ce152"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" = overridableMkRustCrate (profileName: rec {
    name = "threadpool";
    version = "1.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa"; };
    dependencies = {
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tikv-jemalloc-sys."0.5.4+5.3.0-patched" = overridableMkRustCrate (profileName: rec {
    name = "tikv-jemalloc-sys";
    version = "0.5.4+5.3.0-patched";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9402443cb8fd499b6f327e40565234ff34dbda27460c5b47db0db77443dd85d1"; };
    features = builtins.concatLists [
      [ "background_threads_runtime_support" ]
      [ "default" ]
      [ "unprefixed_malloc_on_supported_platforms" ]
    ];
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time."0.3.30" = overridableMkRustCrate (profileName: rec {
    name = "time";
    version = "0.3.30";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4a34ab300f2dee6e562c10a046fc05e358b29f9bf92277f30c3c8d82275f6f5"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "formatting" ]
      [ "macros" ]
      [ "parsing" ]
      [ "std" ]
    ];
    dependencies = {
      deranged = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deranged."0.3.9" { inherit profileName; }).out;
      itoa = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.9" { inherit profileName; }).out;
      powerfmt = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".powerfmt."0.2.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      time_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.2" { inherit profileName; }).out;
      time_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.15" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "time-core";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "time-macros";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4ad70d68dba9e1f8aceda7aa6711965dfec1cac869f311a51bd08b3a2ccbce20"; };
    features = builtins.concatLists [
      [ "formatting" ]
      [ "parsing" ]
    ];
    dependencies = {
      time_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiny-bip39."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "tiny-bip39";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62cc94d358b5a1e84a5cb9109f559aa3c4d634d2b1b4de3d0fa4adc7c78e2861"; };
    features = builtins.concatLists [
      [ "chinese-simplified" ]
      [ "chinese-traditional" ]
      [ "default" ]
      [ "french" ]
      [ "italian" ]
      [ "japanese" ]
      [ "korean" ]
      [ "spanish" ]
    ];
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      pbkdf2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pbkdf2."0.11.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rustc_hash = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      unicode_normalization = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.22" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.88" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tiny-keccak."2.0.2" = overridableMkRustCrate (profileName: rec {
    name = "tiny-keccak";
    version = "2.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2c9d3793400a45f954c52e73d068316d76b6f4e36977e3fcebb13a2721e80237"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "shake" ]
    ];
    dependencies = {
      crunchy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinytemplate."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "tinytemplate";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be4d6b5f19ff7664e8c98d03e2139cb510db9b0a60b55f8e8709b689d939b6bc"; };
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "tinyvec_macros" ]
    ];
    dependencies = {
      tinyvec_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio";
    version = "1.33.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4f38200e3ef7995e5ef13baec2f432a6da0aa9ac495b2c0e8f3b7eec2c92d653"; };
    features = builtins.concatLists [
      [ "bytes" ]
      [ "default" ]
      [ "fs" ]
      [ "full" ]
      [ "io-std" ]
      [ "io-util" ]
      [ "libc" ]
      [ "macros" ]
      [ "mio" ]
      [ "net" ]
      [ "num_cpus" ]
      [ "parking_lot" ]
      [ "process" ]
      [ "rt" ]
      [ "rt-multi-thread" ]
      [ "signal" ]
      [ "signal-hook-registry" ]
      [ "socket2" ]
      [ "sync" ]
      [ "time" ]
      [ "tokio-macros" ]
      [ "windows-sys" ]
    ];
    dependencies = {
      ${ if false then "backtrace" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.69" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      mio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.8.9" { inherit profileName; }).out;
      num_cpus = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "signal_hook_registry" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.1" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.5" { inherit profileName; }).out;
      tokio_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.1.0" { profileName = "__noProfile"; }).out;
      ${ if hostPlatform.isWindows then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-macros";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "630bdcf245f78637c13ec01ffae6187cca34625e8c63150d424b59e55af2675e"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-retry."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "tokio-retry";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f57eb36ecbe0fc510036adff84824dd3c24bb781e21bfa67b69d556aa85214f"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "pin_project" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "rand" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "tokio" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" = overridableMkRustCrate (profileName: rec {
    name = "tokio-rustls";
    version = "0.24.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "default")
      [ "logging" ]
      [ "tls12" ]
    ];
    dependencies = {
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.8" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.14" = overridableMkRustCrate (profileName: rec {
    name = "tokio-stream";
    version = "0.1.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "397c988d37662c7dda6d2208364a706264bf3d6138b11d436cbac0ad38832842"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "sync" ]
      [ "time" ]
      [ "tokio-util" ]
    ];
    dependencies = {
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tokio_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.10" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.10" = overridableMkRustCrate (profileName: rec {
    name = "tokio-util";
    version = "0.7.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5419f34732d9eb6ee4c3578b7989078579b7f039cbbb9ca2c4da015749371e15"; };
    features = builtins.concatLists [
      [ "codec" ]
      [ "compat" ]
      [ "default" ]
      [ "futures-io" ]
      [ "tracing" ]
    ];
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.29" { inherit profileName; }).out;
      futures_sink = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.29" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.5.11" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.5.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.7.8" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.7.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd79e69d3b627db300ff956027cc6c3798cef26d22526befdfcd12feeb6d2257"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "display" ]
      [ "parse" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_spanned = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_spanned."0.6.4" { inherit profileName; }).out;
      toml_datetime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.5" { inherit profileName; }).out;
      toml_edit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.19.15" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "toml_datetime";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1"; };
    features = builtins.concatLists [
      [ "serde" ]
    ];
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.19.15" = overridableMkRustCrate (profileName: rec {
    name = "toml_edit";
    version = "0.19.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
    ];
    dependencies = {
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.1.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_spanned = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_spanned."0.6.4" { inherit profileName; }).out;
      toml_datetime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.5" { inherit profileName; }).out;
      winnow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winnow."0.5.19" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower."0.4.13" = overridableMkRustCrate (profileName: rec {
    name = "tower";
    version = "0.4.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log" ]
      [ "tracing" ]
    ];
    dependencies = {
      tower_layer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.2" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower-http."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "tower-http";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61c5bb1d698276a2443e5ecfabc1008bf15a36c12e6a7176e7bf089ea9131140"; };
    features = builtins.concatLists [
      [ "cors" ]
      [ "default" ]
    ];
    dependencies = {
      bitflags = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.4.1" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      http = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.9" { inherit profileName; }).out;
      http_body = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.5" { inherit profileName; }).out;
      http_range_header = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-range-header."0.3.1" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      tower_layer = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.2" { inherit profileName; }).out;
      tower_service = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "tower-layer";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c20c8dbed6283a09604c3e69b4b7eeb54e298b8a600d4d5ecb5ad39de609f1d0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "tower-service";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.40";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef"; };
    features = builtins.concatLists [
      [ "attributes" ]
      [ "default" ]
      [ "log" ]
      [ "std" ]
      [ "tracing-attributes" ]
    ];
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      pin_project_lite = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.13" { inherit profileName; }).out;
      tracing_attributes = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.27" { profileName = "__noProfile"; }).out;
      tracing_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.27" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.27";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.32";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "once_cell" ]
      [ "std" ]
      [ "valuable" ]
    ];
    dependencies = {
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      ${ if false then "valuable" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-futures."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "tracing-futures";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97d095ae15e245a057c8e8451bab9b3ee1e1f68e9ba2b4fbc18d0ac5237835f2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "pin-project" ]
      [ "std" ]
      [ "std-future" ]
    ];
    dependencies = {
      pin_project = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.3" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "tracing-log";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f751112709b4e791d8ce53e32c4ed2d353565a795ce84da2285393f41557bdf2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "log-tracer" ]
      [ "std" ]
      [ "trace-logger" ]
    ];
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      tracing_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "tracing-serde";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc6b213177105856957181934e4920de57730fc69bf42c37ee5bb664d406d9e1"; };
    dependencies = {
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      tracing_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.25" = overridableMkRustCrate (profileName: rec {
    name = "tracing-subscriber";
    version = "0.2.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e0d2eaa99c3c2e41547cfa109e910a68ea03823cccad4a0525dcbc9b01e8c71"; };
    features = builtins.concatLists [
      [ "ansi" ]
      [ "ansi_term" ]
      [ "chrono" ]
      [ "default" ]
      [ "env-filter" ]
      [ "fmt" ]
      [ "json" ]
      [ "lazy_static" ]
      [ "matchers" ]
      [ "parking_lot" ]
      [ "regex" ]
      [ "registry" ]
      [ "serde" ]
      [ "serde_json" ]
      [ "sharded-slab" ]
      [ "smallvec" ]
      [ "thread_local" ]
      [ "tracing" ]
      [ "tracing-log" ]
      [ "tracing-serde" ]
    ];
    dependencies = {
      ansi_term = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; }).out;
      chrono = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.31" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      matchers = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sharded_slab = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.7" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      thread_local = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.7" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      tracing_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.32" { inherit profileName; }).out;
      tracing_log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.4" { inherit profileName; }).out;
      tracing_serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.3" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trie-db."0.27.1" = overridableMkRustCrate (profileName: rec {
    name = "trie-db";
    version = "0.27.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "767abe6ffed88a1889671a102c2861ae742726f52e0a5a425b92c9fbfa7e9c85"; };
    features = builtins.concatLists [
      [ "rustc-hex" ]
      [ "std" ]
    ];
    dependencies = {
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
      hashbrown = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.13.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rustc_hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hex."2.1.0" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trie-root."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "trie-root";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4ed310ef5ab98f5fa467900ed906cb9232dd5376597e00fd4cba2a449d06c0b"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      hash_db = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hash-db."0.16.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trust-dns-proto."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "trust-dns-proto";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4f7f83d1e4a0e4358ac54c5c3681e5d7da5efc5a7a632c90bb6d6669ddd9bc26"; };
    features = builtins.concatLists [
      [ "mdns" ]
      [ "socket2" ]
      [ "tokio" ]
      [ "tokio-runtime" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; }).out;
      enum_as_inner = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-as-inner."0.5.1" { profileName = "__noProfile"; }).out;
      futures_channel = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.29" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      idna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.2.3" { inherit profileName; }).out;
      ipnet = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.9.0" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.10" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tinyvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".trust-dns-resolver."0.22.0" = overridableMkRustCrate (profileName: rec {
    name = "trust-dns-resolver";
    version = "0.22.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aff21aa4dcefb0a1afbfac26deb0adc93888c7d295fb63ab273ef276ba2b7cfe"; };
    features = builtins.concatLists [
      [ "ipconfig" ]
      [ "resolv-conf" ]
      [ "system-config" ]
      [ "tokio" ]
      [ "tokio-runtime" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "ipconfig" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipconfig."0.3.2" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      lru_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru-cache."0.1.2" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      resolv_conf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".resolv-conf."0.7.0" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      tracing = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.40" { inherit profileName; }).out;
      trust_dns_proto = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".trust-dns-proto."0.22.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "try-lock";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3528ecfd12c466c6f163363caf2d02a71161dd5e1cc6ae7b34207ea2d42d81ed"; };
  });
  
  "git+https://github.com/Cardinal-Cryptography/substrate.git".try-runtime-cli."0.10.0-dev" = overridableMkRustCrate (profileName: rec {
    name = "try-runtime-cli";
    version = "0.10.0-dev";
    registry = "git+https://github.com/Cardinal-Cryptography/substrate.git";
    src = fetchCrateGit {
      url = https://github.com/Cardinal-Cryptography/substrate.git;
      name = "try-runtime-cli";
      version = "0.10.0-dev";
      rev = "357a82e70f10aedd2e9a87e32462cfec08663be2";
      ref = "aleph-v1.0.0";};
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime") "frame-try-runtime")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime") "try-runtime")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "async_trait" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "clap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.4.7" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "remote_externalities" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-remote-externalities."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" then "frame_try_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".frame-try-runtime."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "hex" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "log" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "parity_scale_codec" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-scale-codec."3.6.5" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sc_cli" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-cli."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sc_executor" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sc-executor."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "serde_json" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_api" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-api."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_consensus_aura" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-aura."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_consensus_babe" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-consensus-babe."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_core" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-core."21.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_debug_derive" else null } = (buildRustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-debug-derive."8.0.0" { profileName = "__noProfile"; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_externalities" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-externalities."0.19.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_inherents" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-inherents."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_io" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-io."23.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_keystore" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-keystore."0.27.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_rpc" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-rpc."6.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_runtime" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-runtime."24.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_state_machine" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-state-machine."0.28.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_timestamp" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-timestamp."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_transaction_storage_proof" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-transaction-storage-proof."4.0.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_version" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-version."22.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "sp_weights" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".sp-weights."20.0.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "substrate_rpc_client" else null } = (rustPackages."git+https://github.com/Cardinal-Cryptography/substrate.git".substrate-rpc-client."0.10.0-dev" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli" then "zstd" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd."0.12.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tt-call."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "tt-call";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4f195fd851901624eee5a58c4bb2b4f06399148fcd0ed336e6f1cb60a9881df"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tuple."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "tuple";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "39a40ba241047e1174c927dc5f61c141a166b938d61a2ff61838441368cc7d0e"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "default")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "impl_num")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "impl_serde")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "num-traits")
      (lib.optional (rootFeatures' ? "aleph-runtime/baby-liminal-extension") "serde")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "serde" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".turn."0.6.1" = overridableMkRustCrate (profileName: rec {
    name = "turn";
    version = "0.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4712ee30d123ec7ae26d1e1b218395a16c87cdbaf4b3925d170d684af62ea5e8"; };
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      md5 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      stun = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stun."0.4.4" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".twox-hash."1.6.3" = overridableMkRustCrate (profileName: rec {
    name = "twox-hash";
    version = "1.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675"; };
    features = builtins.concatLists [
      [ "digest_0_10" ]
      [ "rand" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      digest_0_10 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".typenum."1.17.0" = overridableMkRustCrate (profileName: rec {
    name = "typenum";
    version = "1.17.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "no_std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ucd-trie."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "ucd-trie";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/frame-benchmarking-cli" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/runtime-benchmarks") "std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".uint."0.9.5" = overridableMkRustCrate (profileName: rec {
    name = "uint";
    version = "0.9.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      crunchy = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crunchy."0.2.2" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.13" = overridableMkRustCrate (profileName: rec {
    name = "unicode-bidi";
    version = "0.3.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "92888ba5573ff080736b3648696b70cafad7d250551175acbaa4e0385b3e1460"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "hardcoded-data" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.12" = overridableMkRustCrate (profileName: rec {
    name = "unicode-ident";
    version = "1.0.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.22" = overridableMkRustCrate (profileName: rec {
    name = "unicode-normalization";
    version = "0.1.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      tinyvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-width."0.1.11" = overridableMkRustCrate (profileName: rec {
    name = "unicode-width";
    version = "0.1.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e51733f11c9c4f72aa0c160008246859e340b00807569a0da0e7a1079b27ba85"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.4" = overridableMkRustCrate (profileName: rec {
    name = "unicode-xid";
    version = "0.2.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "universal-hash";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f214e8f697e925001e66ec2c6e37a4ef93f0f78c2eed7814394e10c62025b05"; };
    dependencies = {
      generic_array = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".universal-hash."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "universal-hash";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fc1de2c688dc15305988b563c3854064043356019f97a4b46276fe734c4f07ea"; };
    dependencies = {
      crypto_common = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unsigned-varint."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "unsigned-varint";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6889a77d49f1f013504cec6bf97a2c730394adedaeb1deb5ea08949a50541105"; };
    features = builtins.concatLists [
      [ "asynchronous-codec" ]
      [ "asynchronous_codec" ]
      [ "bytes" ]
      [ "futures" ]
      [ "futures-io" ]
      [ "futures-util" ]
      [ "std" ]
    ];
    dependencies = {
      asynchronous_codec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asynchronous-codec."0.6.2" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      futures_io = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.29" { inherit profileName; }).out;
      futures_util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.29" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "untrusted";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "untrusted";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" = overridableMkRustCrate (profileName: rec {
    name = "url";
    version = "2.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "143b538f18257fac9cad154828a57c6bf5157e1aa604d4816b5995bf6de87ae5"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      form_urlencoded = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.0" { inherit profileName; }).out;
      idna = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."0.4.0" { inherit profileName; }).out;
      percent_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "utf8parse";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".uuid."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "uuid";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "88ad59a7560b41a70d191093a945f0b87bc1deeda46fb237479708a1d6b6cdfc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "getrandom" ]
      [ "rng" ]
      [ "std" ]
      [ "v4" ]
    ];
    dependencies = {
      getrandom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.10" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "valuable";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "vcpkg";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".void."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "void";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".waitgroup."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "waitgroup";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d1f50000a783467e6c0200f9d10642f4bc424e39efc1b770203e88b488f79292"; };
    dependencies = {
      atomic_waker = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "waker-fn";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3c4517f54858c779bbcbf228f4fca63d121bf85fbecb2dc578cdf4a39395690"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.4.0" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d71d857dc86794ca4c280d616f7da00d2dbfd8cd788846559a6813e6aa4b54ee"; };
    dependencies = {
      same_file = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi_util" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "want";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e"; };
    dependencies = {
      try_lock = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.9.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.9.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.11.0+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.88" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.88";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7daec296f25a1bae309c0cd5c29c4b260e510e6d813c286b19eaadf409d40fce"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "spans" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      wasm_bindgen_macro = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.88" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.88" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.88";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e397f4664c0e4e428e8313a469aaa58310d302159845980fd23b0f22a847f217"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      bumpalo = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.14.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
      wasm_bindgen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.88" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.38" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.38";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9afec9963e3d0994cac82455b2b3502b81a7f40f9a0d32181f7528d9f4b43e02"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      js_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.65" { inherit profileName; }).out;
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.88" { inherit profileName; }).out;
      ${ if builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.65" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.88" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.88";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5961017b3b08ad5f3fe39f1e79877f8ee7c23c5e5fd5eb80de95abc41f1f16b2"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      wasm_bindgen_macro_support = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.88" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.88" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.88";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c5353b8dab669f5e10f5bd76df26a9360c748f054f862ff5f3f8aae0c7fb3907"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
      wasm_bindgen_backend = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.88" { inherit profileName; }).out;
      wasm_bindgen_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.88" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.88" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.88";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d046c5d029ba91a1ed14da14dca44b68bf2f124cfbaf741c54151fdb3e0750b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-instrument."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "wasm-instrument";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aa1dafb3e60065305741e83db35c6c2584bb3725b692b5b66148a38d72ace6cd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      parity_wasm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.45.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-instrument."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "wasm-instrument";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2a47ecb37b9734d1085eaa5ae1a81e60801fd8c28d4cabdd8aedb982021918bc"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      parity_wasm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parity-wasm."0.45.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-opt."0.112.0" = overridableMkRustCrate (profileName: rec {
    name = "wasm-opt";
    version = "0.112.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87fef6d0d508f08334e0ab0e6877feb4c0ecb3956bcf2cb950699b22fedf3e9c"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      strum = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strum."0.24.1" { inherit profileName; }).out;
      strum_macros = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".strum_macros."0.24.3" { profileName = "__noProfile"; }).out;
      tempfile = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.8.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      wasm_opt_cxx_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-opt-cxx-sys."0.112.0" { inherit profileName; }).out;
      wasm_opt_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-opt-sys."0.112.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-opt-cxx-sys."0.112.0" = overridableMkRustCrate (profileName: rec {
    name = "wasm-opt-cxx-sys";
    version = "0.112.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc816bbc1596c8f2e8127e137a760c798023ef3d378f2ae51f0f1840e2dfa445"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      cxx = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cxx."1.0.110" { inherit profileName; }).out;
      wasm_opt_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-opt-sys."0.112.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      anyhow = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { profileName = "__noProfile"; }).out;
      cxx_build = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cxx-build."1.0.110" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-opt-sys."0.112.0" = overridableMkRustCrate (profileName: rec {
    name = "wasm-opt-sys";
    version = "0.112.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "40199e4f68ef1071b3c6d0bd8026a12b481865d4b9e49c156932ea9a6234dd14"; };
    dependencies = {
      cxx = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cxx."1.0.110" { inherit profileName; }).out;
    };
    buildDependencies = {
      anyhow = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { profileName = "__noProfile"; }).out;
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
      cxx_build = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cxx-build."1.0.110" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-timer."0.2.5" = overridableMkRustCrate (profileName: rec {
    name = "wasm-timer";
    version = "0.2.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be0ecb0db480561e9a7642b5d3e4187c128914e58aa84330b9493e3eb68c5e7f"; };
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.65" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; }).out;
      pin_utils = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.88" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen_futures" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.38" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "web_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.65" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmi."0.20.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmi";
    version = "0.20.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "01bf50edb2ea9d922aa75a7bf3c15e26a6c9e2d18c56e862b49737a582901729"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "spin" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "wasmi_arena" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi_arena."0.1.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "wasmi_core" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi_core."0.5.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "wasmparser" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser-nostd."0.91.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmi."0.30.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmi";
    version = "0.30.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e51fb5c61993e71158abf5bb863df2674ca3ec39ed6471c64f07aeaf751d67b4"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      intx = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".intx."0.1.0" { inherit profileName; }).out;
      smallvec = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.11.1" { inherit profileName; }).out;
      spin = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" { inherit profileName; }).out;
      wasmi_arena = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi_arena."0.4.0" { inherit profileName; }).out;
      wasmi_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmi_core."0.12.0" { inherit profileName; }).out;
      wasmparser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser-nostd."0.100.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmi_arena."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmi_arena";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a1ea379cbb0b41f3a9f0bf7b47036d036aae7f43383d8cc487d4deccf40dee0a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmi_arena."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmi_arena";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "401c1f35e413fac1846d4843745589d9ec678977ab35a384db8ae7830525d468"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmi_core."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmi_core";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c5bf998ab792be85e20e771fe14182b4295571ad1d4f89d3da521c1bef5f597a"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "downcast_rs" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "libm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.8" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "num_traits" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmi_core."0.12.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmi_core";
    version = "0.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "624e6333e861ef49095d2d678b76ebf30b06bf37effca845be7e5b87c90071b7"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      downcast_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; }).out;
      libm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.8" { inherit profileName; }).out;
      num_traits = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.17" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.102.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmparser";
    version = "0.102.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "48134de3d7598219ab9eaf6b91b15d8e50d31da76b8519fe4ecfcec2cf35104b"; };
    dependencies = {
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmparser-nostd."0.91.0" = overridableMkRustCrate (profileName: rec {
    name = "wasmparser-nostd";
    version = "0.91.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9c37f310b5a62bfd5ae7c0f1d8e6f98af16a5d6d84ba764e9c36439ec14e318b"; };
    dependencies = {
      ${ if rootFeatures' ? "aleph-runtime/baby-liminal-extension" then "indexmap" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap-nostd."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmparser-nostd."0.100.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmparser-nostd";
    version = "0.100.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9157cab83003221bfd385833ab587a039f5d6fa7304854042ba358a3b09e0724"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap-nostd."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f907fdead3153cb9bfb7a93bbd5b62629472dc06dee83605358c64c52ed3dda9"; };
    features = builtins.concatLists [
      [ "cache" ]
      [ "cranelift" ]
      [ "jitdump" ]
      [ "parallel-compilation" ]
      [ "pooling-allocator" ]
    ];
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      object = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.30.4" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      psm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".psm."0.1.21" { inherit profileName; }).out;
      rayon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.8.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      target_lexicon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.12" { inherit profileName; }).out;
      wasmparser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.102.0" { inherit profileName; }).out;
      wasmtime_cache = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-cache."8.0.1" { inherit profileName; }).out;
      wasmtime_cranelift = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-cranelift."8.0.1" { inherit profileName; }).out;
      wasmtime_environ = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."8.0.1" { inherit profileName; }).out;
      wasmtime_jit = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-jit."8.0.1" { inherit profileName; }).out;
      wasmtime_runtime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-runtime."8.0.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-asm-macros."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-asm-macros";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3b9daa7c14cd4fa3edbf69de994408d5f4b7b0959ac13fa69d465f6597f810d"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-cache."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-cache";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c86437fa68626fe896e5afc69234bb2b5894949083586535f200385adfd71213"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.21.5" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      directories_next = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".directories-next."2.0.0" { inherit profileName; }).out;
      file_per_thread_logger = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".file-per-thread-logger."0.1.6" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if !(hostPlatform.parsed.kernel.name == "windows") then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.36.17" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      toml = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.11" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
      zstd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd."0.11.2+zstd.1.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-cranelift."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-cranelift";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b1cefde0cce8cb700b1b21b6298a3837dba46521affd7b8c38a9ee2c869eee04"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      cranelift_codegen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.95.1" { inherit profileName; }).out;
      cranelift_entity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.95.1" { inherit profileName; }).out;
      cranelift_frontend = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-frontend."0.95.1" { inherit profileName; }).out;
      cranelift_native = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-native."0.95.1" { inherit profileName; }).out;
      cranelift_wasm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-wasm."0.95.1" { inherit profileName; }).out;
      gimli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.27.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      object = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.30.4" { inherit profileName; }).out;
      target_lexicon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.12" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      wasmparser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.102.0" { inherit profileName; }).out;
      wasmtime_cranelift_shared = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-cranelift-shared."8.0.1" { inherit profileName; }).out;
      wasmtime_environ = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."8.0.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-cranelift-shared."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-cranelift-shared";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cd041e382ef5aea1b9fc78442394f1a4f6d676ce457e7076ca4cb3f397882f8b"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      cranelift_codegen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-codegen."0.95.1" { inherit profileName; }).out;
      cranelift_native = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-native."0.95.1" { inherit profileName; }).out;
      gimli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.27.3" { inherit profileName; }).out;
      object = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.30.4" { inherit profileName; }).out;
      target_lexicon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.12" { inherit profileName; }).out;
      wasmtime_environ = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."8.0.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-environ";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a990198cee4197423045235bf89d3359e69bd2ea031005f4c2d901125955c949"; };
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      cranelift_entity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.95.1" { inherit profileName; }).out;
      gimli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.27.3" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      object = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.30.4" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      target_lexicon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.12" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      wasmparser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.102.0" { inherit profileName; }).out;
      wasmtime_types = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-types."8.0.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-jit."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-jit";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0de48df552cfca1c9b750002d3e07b45772dd033b0b206d5c0968496abf31244"; };
    features = builtins.concatLists [
      [ "jitdump" ]
      [ "wasmtime-jit-debug" ]
    ];
    dependencies = {
      addr2line = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.19.0" { inherit profileName; }).out;
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      cpp_demangle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpp_demangle."0.3.5" { inherit profileName; }).out;
      gimli = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.27.3" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      object = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.30.4" { inherit profileName; }).out;
      rustc_demangle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.23" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      target_lexicon = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".target-lexicon."0.12.12" { inherit profileName; }).out;
      wasmtime_environ = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."8.0.1" { inherit profileName; }).out;
      wasmtime_jit_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-jit-debug."8.0.1" { inherit profileName; }).out;
      wasmtime_jit_icache_coherence = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-jit-icache-coherence."8.0.1" { inherit profileName; }).out;
      wasmtime_runtime = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-runtime."8.0.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-jit-debug."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-jit-debug";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e0554b84c15a27d76281d06838aed94e13a77d7bf604bbbaf548aa20eb93846"; };
    features = builtins.concatLists [
      [ "gdb_jit_int" ]
      [ "object" ]
      [ "once_cell" ]
      [ "perf_jitdump" ]
      [ "rustix" ]
    ];
    dependencies = {
      object = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.30.4" { inherit profileName; }).out;
      once_cell = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.36.17" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-jit-icache-coherence."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-jit-icache-coherence";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aecae978b13f7f67efb23bd827373ace4578f2137ec110bbf6a4a7cde4121bbd"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "android" then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-runtime."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-runtime";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "658cf6f325232b6760e202e5255d823da5e348fdea827eff0a2a22319000b441"; };
    features = builtins.concatLists [
      [ "pooling-allocator" ]
    ];
    dependencies = {
      anyhow = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.75" { inherit profileName; }).out;
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      indexmap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" { inherit profileName; }).out;
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "mach" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; }).out;
      memfd = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memfd."0.6.4" { inherit profileName; }).out;
      memoffset = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.8.0" { inherit profileName; }).out;
      paste = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".paste."1.0.14" { profileName = "__noProfile"; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      ${ if hostPlatform.isUnix then "rustix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.36.17" { inherit profileName; }).out;
      wasmtime_asm_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-asm-macros."8.0.1" { inherit profileName; }).out;
      wasmtime_environ = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-environ."8.0.1" { inherit profileName; }).out;
      wasmtime_jit_debug = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmtime-jit-debug."8.0.1" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.kernel.name == "windows" then "windows_sys" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasmtime-types."8.0.1" = overridableMkRustCrate (profileName: rec {
    name = "wasmtime-types";
    version = "8.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4f6fffd2a1011887d57f07654dd112791e872e3ff4a2e626aee8059ee17f06f"; };
    dependencies = {
      cranelift_entity = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cranelift-entity."0.95.1" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      wasmparser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.102.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.65" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.65";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5db499c5f66323272151db0e666cd34f78617522fb0c1604d31a27c50c206a85"; };
    features = builtins.concatLists [
      [ "Crypto" ]
      [ "Event" ]
      [ "EventTarget" ]
      [ "MessageEvent" ]
      [ "Performance" ]
      [ "Window" ]
      [ "Worker" ]
    ];
    dependencies = {
      js_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.65" { inherit profileName; }).out;
      wasm_bindgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.88" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" = overridableMkRustCrate (profileName: rec {
    name = "webpki";
    version = "0.21.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8e38c0608262c46d4a56202ebabdeb094cef7e560ca7a226c6bf055188aa4ea"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "trust_anchor_util" ]
    ];
    dependencies = {
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki."0.22.4" = overridableMkRustCrate (profileName: rec {
    name = "webpki";
    version = "0.22.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed63aea5ce73d0ff405984102c42de94fc55a6b75765d621c65262469b3c9b53"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.5" { inherit profileName; }).out;
      untrusted = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.22.6" = overridableMkRustCrate (profileName: rec {
    name = "webpki-roots";
    version = "0.22.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b6c71e40d7d2c34a5106301fb632274ca37242cd0c9d3e64dbece371a40a2d87"; };
    dependencies = {
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.22.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.25.2" = overridableMkRustCrate (profileName: rec {
    name = "webpki-roots";
    version = "0.25.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14247bb57be4f377dfb94c72830b8ce8fc6beac03cf4bf7b9732eadd414123fc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webrtc."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "webrtc";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2d3bc9049bdb2cea52f5fd4f6f728184225bdb867ed0dc2410eab6df5bdd67bb"; };
    dependencies = {
      arc_swap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.6.0" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      hex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; }).out;
      interceptor = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".interceptor."0.8.2" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rcgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rcgen."0.9.3" { inherit profileName; }).out;
      regex = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.10.2" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      rtcp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtcp."0.7.2" { inherit profileName; }).out;
      rtp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtp."0.6.8" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.1" { inherit profileName; }).out;
      sdp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sdp."0.5.3" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      stun = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stun."0.4.4" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.30" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      turn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".turn."0.6.1" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" { inherit profileName; }).out;
      waitgroup = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".waitgroup."0.1.2" { inherit profileName; }).out;
      data = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-data."0.6.0" { inherit profileName; }).out;
      dtls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-dtls."0.7.2" { inherit profileName; }).out;
      ice = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-ice."0.9.1" { inherit profileName; }).out;
      mdns = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-mdns."0.5.2" { inherit profileName; }).out;
      media = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-media."0.5.1" { inherit profileName; }).out;
      sctp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-sctp."0.7.0" { inherit profileName; }).out;
      srtp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-srtp."0.9.1" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webrtc-data."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "webrtc-data";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0ef36a4d12baa6e842582fe9ec16a57184ba35e1a09308307b67d43ec8883100"; };
    dependencies = {
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      derive_builder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".derive_builder."0.11.2" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      sctp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-sctp."0.7.0" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webrtc-dtls."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "webrtc-dtls";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4a00f4242f2db33307347bd5be53263c52a0331c96c14292118c9a6bb48d267"; };
    dependencies = {
      aes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.6.0" { inherit profileName; }).out;
      aes_gcm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.10.3" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bincode = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" { inherit profileName; }).out;
      block_modes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-modes."0.7.0" { inherit profileName; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      ccm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ccm."0.3.0" { inherit profileName; }).out;
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; }).out;
      der_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der-parser."8.2.0" { inherit profileName; }).out;
      elliptic_curve = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.12.3" { inherit profileName; }).out;
      hkdf = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.3" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      p256 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".p256."0.11.1" { inherit profileName; }).out;
      p384 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".p384."0.11.2" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      rcgen = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rcgen."0.10.0" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      rustls = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.19.1" { inherit profileName; }).out;
      sec1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sec1."0.3.0" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" { inherit profileName; }).out;
      sha2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" { inherit profileName; }).out;
      signature = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."1.6.4" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      webpki = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki."0.21.4" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
      x25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."2.0.0" { inherit profileName; }).out;
      x509_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.13.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webrtc-ice."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "webrtc-ice";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "465a03cc11e9a7d7b4f9f99870558fe37a102b65b93f8045392fef7c67b39e80"; };
    dependencies = {
      arc_swap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.6.0" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      crc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc."3.0.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      serde_json = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.108" { inherit profileName; }).out;
      stun = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stun."0.4.4" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      turn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".turn."0.6.1" { inherit profileName; }).out;
      url = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.4.1" { inherit profileName; }).out;
      uuid = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.5.0" { inherit profileName; }).out;
      waitgroup = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".waitgroup."0.1.2" { inherit profileName; }).out;
      mdns = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-mdns."0.5.2" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webrtc-mdns."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "webrtc-mdns";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f08dfd7a6e3987e255c4dbe710dde5d94d0f0574f8a21afa95d171376c143106"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "reuse_port" ]
    ];
    dependencies = {
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      socket2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.4.10" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webrtc-media."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "webrtc-media";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f72e1650a8ae006017d1a5280efb49e2610c19ccc3c0905b03b648aee9554991"; };
    dependencies = {
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      rtp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtp."0.6.8" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webrtc-sctp."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "webrtc-sctp";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d47adcd9427eb3ede33d5a7f3424038f63c965491beafcc20bc650a2f6679c0"; };
    dependencies = {
      arc_swap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arc-swap."1.6.0" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      crc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc."3.0.1" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webrtc-srtp."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "webrtc-srtp";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6183edc4c1c6c0175f8812eefdce84dfa0aea9c3ece71c2bf6ddd3c964de3da5"; };
    dependencies = {
      aead = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.4.3" { inherit profileName; }).out;
      aes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes."0.7.5" { inherit profileName; }).out;
      aes_gcm = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aes-gcm."0.9.4" { inherit profileName; }).out;
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      byteorder = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      ctr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ctr."0.8.0" { inherit profileName; }).out;
      hmac = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.11.0" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      rtcp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtcp."0.7.2" { inherit profileName; }).out;
      rtp = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rtp."0.6.8" { inherit profileName; }).out;
      sha1 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha-1."0.9.8" { inherit profileName; }).out;
      subtle = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      util = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".webrtc-util."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "webrtc-util";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93f1db1727772c05cf7a2cfece52c3aca8045ca1e176cd517d323489aa3c6d87"; };
    features = builtins.concatLists [
      [ "buffer" ]
      [ "conn" ]
      [ "default" ]
      [ "ifaces" ]
      [ "marshal" ]
      [ "sync" ]
      [ "vnet" ]
    ];
    dependencies = {
      async_trait = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".async-trait."0.1.74" { profileName = "__noProfile"; }).out;
      ${ if hostPlatform.isWindows then "bitflags" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.3.2" { inherit profileName; }).out;
      bytes = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.5.0" { inherit profileName; }).out;
      ipnet = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.9.0" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      ${ if !hostPlatform.isWindows then "libc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      ${ if !hostPlatform.isWindows then "nix" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.24.3" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      tokio = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.33.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".which."4.4.2" = overridableMkRustCrate (profileName: rec {
    name = "which";
    version = "4.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7"; };
    dependencies = {
      either = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.9.0" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows || hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "redox" then "home" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".home."0.5.5" { inherit profileName; }).out;
      ${ if hostPlatform.isWindows then "once_cell" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.18.0" { inherit profileName; }).out;
      rustix = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.21" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wide."0.7.13" = overridableMkRustCrate (profileName: rec {
    name = "wide";
    version = "0.7.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c68938b57b33da363195412cfc5fc37c9ed49aa9cfe2156fde64b8d2c9498242"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      bytemuck = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.14.0" { inherit profileName; }).out;
      safe_arch = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".safe_arch."0.7.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".widestring."1.0.2" = overridableMkRustCrate (profileName: rec {
    name = "widestring";
    version = "1.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "653f141f39ec16bba3c5abe400a0c60da7468261cc2cbf36805022876bc721a8"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      [ "basetsd" ]
      [ "consoleapi" ]
      [ "errhandlingapi" ]
      [ "fileapi" ]
      [ "guiddef" ]
      [ "handleapi" ]
      [ "knownfolders" ]
      [ "libloaderapi" ]
      [ "minwinbase" ]
      [ "minwindef" ]
      [ "ntsecapi" ]
      [ "ntstatus" ]
      [ "objbase" ]
      [ "processenv" ]
      [ "processthreadsapi" ]
      [ "shlobj" ]
      [ "std" ]
      [ "synchapi" ]
      [ "sysinfoapi" ]
      [ "winbase" ]
      [ "wincon" ]
      [ "winerror" ]
      [ "winnt" ]
      [ "ws2def" ]
      [ "ws2ipdef" ]
      [ "ws2tcpip" ]
      [ "wtypesbase" ]
    ];
    dependencies = {
      ${ if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f29e6f9198ba0d26b4c9f07dbe6f9ed633e1f3d5b8b414090084349e46a52596"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows."0.51.1" = overridableMkRustCrate (profileName: rec {
    name = "windows";
    version = "0.51.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca229916c5ee38c2f2bc1e9d8f04df975b4bd93f9955dc69fabb5d91270045c9"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_NetworkManagement" ]
      [ "Win32_NetworkManagement_IpHelper" ]
      [ "Win32_NetworkManagement_Ndis" ]
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "default" ]
    ];
    dependencies = {
      windows_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-core."0.51.1" { inherit profileName; }).out;
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-core."0.51.1" = overridableMkRustCrate (profileName: rec {
    name = "windows-core";
    version = "0.51.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1f8cf84f35d2db49a46868f947758c7a1138116f7fac3bc844f43ade1292e64"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.45.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.45.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_NetworkManagement" ]
      [ "Win32_NetworkManagement_IpHelper" ]
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "Win32_Security" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "Win32_System_Console")
      [ "Win32_System_Diagnostics" ]
      [ "Win32_System_Diagnostics_Debug" ]
      [ "Win32_System_Kernel" ]
      [ "Win32_System_Memory" ]
      [ "Win32_System_SystemInformation" ]
      [ "Win32_System_Threading" ]
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "Win32_UI")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "Win32_UI_Input")
      (lib.optional (rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-node/try-runtime" || rootFeatures' ? "aleph-node/try-runtime-cli") "Win32_UI_Input_KeyboardAndMouse")
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.42.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" = overridableMkRustCrate (profileName: rec {
    name = "windows-sys";
    version = "0.48.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"; };
    features = builtins.concatLists [
      [ "Win32" ]
      [ "Win32_Foundation" ]
      [ "Win32_NetworkManagement" ]
      [ "Win32_NetworkManagement_IpHelper" ]
      [ "Win32_Networking" ]
      [ "Win32_Networking_WinSock" ]
      [ "Win32_Security" ]
      [ "Win32_Security_Authentication" ]
      [ "Win32_Security_Authentication_Identity" ]
      [ "Win32_Security_Credentials" ]
      [ "Win32_Security_Cryptography" ]
      [ "Win32_Storage" ]
      [ "Win32_Storage_FileSystem" ]
      [ "Win32_System" ]
      [ "Win32_System_Console" ]
      [ "Win32_System_Diagnostics" ]
      [ "Win32_System_Diagnostics_Debug" ]
      [ "Win32_System_IO" ]
      [ "Win32_System_LibraryLoader" ]
      [ "Win32_System_Memory" ]
      [ "Win32_System_Pipes" ]
      [ "Win32_System_Registry" ]
      [ "Win32_System_SystemServices" ]
      [ "Win32_System_Threading" ]
      [ "Win32_System_Time" ]
      [ "Win32_System_WindowsProgramming" ]
      [ "Win32_UI" ]
      [ "Win32_UI_Shell" ]
      [ "default" ]
    ];
    dependencies = {
      windows_targets = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.42.2" { inherit profileName; }).out;
      ${ if hostPlatform.config == "aarch64-pc-windows-msvc" || hostPlatform.config == "aarch64-uwp-windows-msvc" then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.42.2" { inherit profileName; }).out;
      ${ if hostPlatform.config == "i686-pc-windows-gnu" || hostPlatform.config == "i686-uwp-windows-gnu" then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.42.2" { inherit profileName; }).out;
      ${ if hostPlatform.config == "i686-pc-windows-msvc" || hostPlatform.config == "i686-uwp-windows-msvc" then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.42.2" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnu" || hostPlatform.config == "x86_64-uwp-windows-gnu" then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.42.2" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.42.2" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-msvc" || hostPlatform.config == "x86_64-uwp-windows-msvc" then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.42.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows-targets";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"; };
    dependencies = {
      ${ if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then "windows_aarch64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then "windows_i686_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then "windows_i686_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then "windows_x86_64_gnu" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" { inherit profileName; }).out;
      ${ if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "msvc" then "windows_x86_64_msvc" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_gnullvm";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_aarch64_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_gnu";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_i686_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnu";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_gnullvm";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.42.2" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.42.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" = overridableMkRustCrate (profileName: rec {
    name = "windows_x86_64_msvc";
    version = "0.48.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winnow."0.5.19" = overridableMkRustCrate (profileName: rec {
    name = "winnow";
    version = "0.5.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "829846f3e3db426d4cee4510841b71a8e58aa2a76b1132579487ae430ccd9c7b"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.6.4" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winreg."0.50.0" = overridableMkRustCrate (profileName: rec {
    name = "winreg";
    version = "0.50.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "524e57b2c537c0f9b1e69f1965311ec12182b4122e45035b1508cd24d2adadb1"; };
    dependencies = {
      cfg_if = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; }).out;
      windows_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wyz."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "wyz";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed"; };
    dependencies = {
      tap = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tap."1.0.1" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "x25519-dalek";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5a0c105152107e3b96f6a00a65e86ce82d9b125230e1c4302940eca58ff71f4f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "u64_backend" ]
    ];
    dependencies = {
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."3.2.0" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.5.1" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x25519-dalek."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "x25519-dalek";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb66477291e7e8d2b0ff1bcb900bf29489a9692816d79874bea351e7a8b6de96"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "precomputed-tables" ]
      [ "static_secrets" ]
      [ "zeroize" ]
    ];
    dependencies = {
      curve25519_dalek = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."4.1.1" { inherit profileName; }).out;
      rand_core = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" { inherit profileName; }).out;
      serde = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.190" { inherit profileName; }).out;
      zeroize = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.13.2" = overridableMkRustCrate (profileName: rec {
    name = "x509-parser";
    version = "0.13.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9fb9bace5b5589ffead1afb76e43e34cff39cd0f3ce7e170ae0c29e53b88eb1c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "ring" ]
      [ "verify" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.3.1" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; }).out;
      der_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der-parser."7.0.0" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      oid_registry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".oid-registry."0.4.0" { inherit profileName; }).out;
      ring = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.16.20" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x509-parser."0.14.0" = overridableMkRustCrate (profileName: rec {
    name = "x509-parser";
    version = "0.14.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e0ecbeb7b67ce215e40e3cc7f2ff902f94a223acf44995934763467e7b1febc8"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      asn1_rs = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".asn1-rs."0.5.2" { inherit profileName; }).out;
      base64 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" { inherit profileName; }).out;
      data_encoding = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".data-encoding."2.4.0" { inherit profileName; }).out;
      der_parser = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der-parser."8.2.0" { inherit profileName; }).out;
      lazy_static = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; }).out;
      nom = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" { inherit profileName; }).out;
      oid_registry = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".oid-registry."0.6.1" { inherit profileName; }).out;
      rusticata_macros = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusticata-macros."4.1.0" { inherit profileName; }).out;
      thiserror = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.50" { inherit profileName; }).out;
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xsalsa20poly1305."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "xsalsa20poly1305";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "02a6dad357567f81cd78ee75f7c61f1b30bb2fe4390be8fb7c69e2ac8dffb6c7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal") "rand_core")
    ];
    dependencies = {
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "aead" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aead."0.5.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "poly1305" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".poly1305."0.8.0" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "salsa20" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".salsa20."0.10.2" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "subtle" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.4.1" { inherit profileName; }).out;
      ${ if rootFeatures' ? "aleph-node/liminal" || rootFeatures' ? "aleph-node/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-node/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/baby-liminal-extension" || rootFeatures' ? "aleph-runtime/liminal" || rootFeatures' ? "aleph-runtime/liminal-runtime-benchmarks" || rootFeatures' ? "aleph-runtime/liminal-std" || rootFeatures' ? "aleph-runtime/liminal-try-runtime" || rootFeatures' ? "aleph-runtime/pallet-baby-liminal" then "zeroize" else null } = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yamux."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "yamux";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e5d9ba232399af1783a58d8eb26f6b5006fbefe2dc9ef36bd283324792d03ea5"; };
    dependencies = {
      futures = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.29" { inherit profileName; }).out;
      log = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.20" { inherit profileName; }).out;
      nohash_hasher = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nohash-hasher."0.2.0" { inherit profileName; }).out;
      parking_lot = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.1" { inherit profileName; }).out;
      rand = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" { inherit profileName; }).out;
      static_assertions = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".static_assertions."1.1.0" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".yasna."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "yasna";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e17bb3549cc1321ae1296b9cdc2698e2b6cb1992adfa19a8c72e5b7a738f44cd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "time" ]
    ];
    dependencies = {
      time = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.30" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.25" = overridableMkRustCrate (profileName: rec {
    name = "zerocopy";
    version = "0.7.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8cd369a67c0edfef15010f980c3cbe45d7f651deac2cd67ce097cd801de16557"; };
    features = builtins.concatLists [
      [ "simd" ]
    ];
    dependencies = {
      ${ if false then "zerocopy_derive" else null } = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.25" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.25" = overridableMkRustCrate (profileName: rec {
    name = "zerocopy-derive";
    version = "0.7.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c2f140bda219a26ccc0cdb03dba58af72590c53b22642577d88a927bc5c87d6b"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zeroize."1.6.0" = overridableMkRustCrate (profileName: rec {
    name = "zeroize";
    version = "1.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2a0956f1ba7c7909bfb66c2e9e4124ab6f6482560f6628b5aaeba39207c9aad9"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      (lib.optional (rootFeatures' ? "aleph-runtime/liminal-std") "std")
      [ "zeroize_derive" ]
    ];
    dependencies = {
      zeroize_derive = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.4.2" { profileName = "__noProfile"; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.4.2" = overridableMkRustCrate (profileName: rec {
    name = "zeroize_derive";
    version = "1.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69"; };
    dependencies = {
      proc_macro2 = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.69" { inherit profileName; }).out;
      quote = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.33" { inherit profileName; }).out;
      syn = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.39" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd."0.11.2+zstd.1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "zstd";
    version = "0.11.2+zstd.1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "20cc960326ece64f010d2d2107537f26dc589a6573a316bd5b1dba685fa5fde4"; };
    dependencies = {
      zstd_safe = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-safe."5.0.2+zstd.1.5.2" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "zstd";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1a27595e173641171fc74a1232b7b1c7a7cb6e18222c11e9dfb9888fa424c53c"; };
    dependencies = {
      zstd_safe = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-safe."6.0.6" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd-safe."5.0.2+zstd.1.5.2" = overridableMkRustCrate (profileName: rec {
    name = "zstd-safe";
    version = "5.0.2+zstd.1.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d2a5585e04f9eea4b2a3d1eca508c4dee9592a89ef6f450c11719da0726f4db"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      zstd_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-sys."2.0.9+zstd.1.5.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd-safe."6.0.6" = overridableMkRustCrate (profileName: rec {
    name = "zstd-safe";
    version = "6.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ee98ffd0b48ee95e6c5168188e44a54550b1564d9d530ee21d5f0eaed1069581"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      libc = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.150" { inherit profileName; }).out;
      zstd_sys = (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zstd-sys."2.0.9+zstd.1.5.5" { inherit profileName; }).out;
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".zstd-sys."2.0.9+zstd.1.5.5" = overridableMkRustCrate (profileName: rec {
    name = "zstd-sys";
    version = "2.0.9+zstd.1.5.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9e16efa8a874a0481a574084d34cc26fdb3b99627480f785888deb6386506656"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    buildDependencies = {
      cc = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.83" { profileName = "__noProfile"; }).out;
      pkg_config = (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.27" { profileName = "__noProfile"; }).out;
    };
  });
  
}
